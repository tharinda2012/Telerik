<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArtOfTest.WebAii</name>
    </assembly>
    <members>
        <member name="T:CE.iPhone.PList.IPListElement">
            <summary>
            A .Net representation of a  PList element
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.IPListElement.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.IPListElement.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.IPListElement.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.IPListElement.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>The count of PList elements in this element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="P:CE.iPhone.PList.IPListElement.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CE.iPhone.PList.IPListElement.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.IPListElement.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.Internal.PListBinaryReader">
            <summary>
            A class, used to read binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from a stream
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryReader.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryReader.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.Internal.PListBinaryReader"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryReader.Read(System.IO.Stream)">
            <summary>
            Reads a binary formated <see cref="T:CE.iPhone.IPListElemnet"/> from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/>, read from the specified stream</returns>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryReader.CurrentElementTypeCode">
            <summary>
            Gets the current element type code.
            </summary>
            <value>The current element type code.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryReader.CurrentElementLength">
            <summary>
            Gets the length of the current element.
            </summary>
            <value>The length of the current element.</value>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryReader.ReadInternal(System.Int32)">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.
            </summary>
            <param name="elemNr">The elem idx.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the specified idx.</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryReader.ReadInternal">
            <summary>
            Reads the <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.
            </summary>
            <returns>The <see cref="T:CE.iPhone.IPListElemnet"/> at the current stream position.</returns>
        </member>
        <member name="T:CE.iPhone.PList.Internal.PListBinaryWriter">
            <summary>
            A class, used to write a <see cref="T:CE.iPhone.IPListElemnet"/>  binary formated to a stream
            </summary>
        </member>
        <member name="F:CE.iPhone.PList.Internal.PListBinaryWriter.s_PListHeader">
            <summary>
            The Header (bplist00)
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryWriter.BaseStream">
            <summary>
            Gets the basestream.
            </summary>
            <value>The basestream.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryWriter.ElementIdxSize">
            <summary>
            Gets or sets the size of the element idx.
            </summary>
            <value>The size of the element idx.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListBinaryWriter.Offsets">
            <summary>
            Gets the offset table.
            </summary>
            <value>The offset table.</value>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.Internal.PListBinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryWriter.Write(System.IO.Stream,CE.iPhone.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryWriter.FormatIdx(System.Int32)">
            <summary>
            Formats an element idx based on the ElementIdxSize.
            </summary>
            <param name="idx">The idx.</param>
            <returns>The formated idx.</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListBinaryWriter.WriteInternal(CE.iPhone.PList.IPListElement)">
            <summary>
            Writers a <see cref="T:CE.iPhone.IPListElemnet"/> to the current stream position
            </summary>
            <param name="element">The element.</param>
            <returns>The Inx of the written element</returns>
        </member>
        <member name="T:CE.iPhone.PList.Internal.PListElement`1">
            <summary>
            An abstract base class for primitive PList types
            </summary>
            <typeparam name="T">The .Net equivalent to the PList type</typeparam>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListElement`1.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListElement`1.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListElement`1.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListElement`1.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, 
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a 
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> 
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> 
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>The XML String representation of the Value.</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.op_Implicit(CE.iPhone.PList.Internal.PListElement{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="!:CE.iPhone.PList.PListElement&lt;T&gt;"/> to <see cref="!:T"/>.
            </summary>
            <param name="element">The elem.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElement`1.Equals(CE.iPhone.PList.IPListElement)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:CE.iPhone.PList.Internal.PListElementFactory">
            <summary>
            Singleton class which generates concrete <see cref="T:CE.iPhone.IPListElement"/> from the Tag or TypeCode
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.Internal.PListElementFactory.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.Internal.PListElementFactory"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.Register``1(``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.Register``1(System.String,System.Byte,``0)">
            <summary>
            Registers the specified element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag.</param>
            <param name="typeCode">The type code.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.Create(System.Byte,System.Int32)">
            <summary>
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's typecode.
            </summary>
            <param name="typeCode">The typecode of the element.</param>
            <param name="length">The length of the element 
            (required only for <see cref="T:CE.iPhone.PListBool"/>, <see cref="T:CE.iPhone.PListNull"/> and <see cref="T:CE.iPhone.PListFill"/>).</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.Create(System.String)">
            <summary>        
            Creates a concrete <see cref="T:CE.iPhone.IPListElement"/> object secified specified by it's tag.
            </summary>
            <param name="tag">The tag of the element.</param>
            <returns>The created <see cref="T:CE.iPhone.IPListElement"/> object</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.CreateLengthElement(System.Int32)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.
            </summary>
            <param name="length">The exteded length information.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for exteded length information.</returns>
        </member>
        <member name="M:CE.iPhone.PList.Internal.PListElementFactory.CreateKeyElement(System.String)">
            <summary>
            Creates a <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:CE.iPhone.IPListElement"/> object used for dictionary keys.</returns>
        </member>
        <member name="T:CE.iPhone.PList.PListArray">
            <summary>
            Represents an array of an <see cref="T:CE.iPhone.IPListElement"/> objects
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListArray.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListArray.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListArray.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListArray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:CE.iPhone.PList.PListDict">
            <summary>
            Represents an dictionary with <see cref="T:System.String"/> keys and <see cref="T:CE.iPhone.IPListElement"/> values
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListDict.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListDict.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListDict.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListDict.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:CE.iPhone.PList.PListFormat">
            <summary>
            The Format of a PList File
            </summary>
        </member>
        <member name="T:CE.iPhone.PList.PListBool">
            <summary>
            Represents a Boolean Value from a PList
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListBool.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListBool.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListBool.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CE.iPhone.PList.PListBool.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListBool"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListBool"/> class.
            </summary>
            <param name="value">The Value of this element</param>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListBool.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListData">
            <summary>
            Represents a Byte[] Value from a PList
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListData.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListData.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListData.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListData"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListData"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListData.Parse(System.String)">
            <summary>
            Parses the specified value from a given String (encoded as Base64), read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListData.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value (encoded as Base64).
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListData.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListData.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListData.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListDate">
            <summary>
            Represents a DateTime Value from a PList
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListDate.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListDate.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListDate.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListDate"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListDate"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListDate.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListFill">
            <summary>
            Represents a fill element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:CE.iPhone.PList.PListFill.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListFill.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListFill.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListFill.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:CE.iPhone.PList.PListInteger">
            <summary>
            Represents an integer Value from a PList
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListInteger.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListInteger.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListInteger.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListInteger"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListInteger"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListInteger.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListNull">
            <summary>
            Represents a null element in a PList
            </summary>
            <remarks>Is skipped in Xml-Serialization</remarks>
        </member>
        <member name="P:CE.iPhone.PList.PListNull.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListNull.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListNull.IsBinaryUnique">
            <summary>
            Gets a value indicating whether this instance is written only once in binary mode.
            </summary>
            <value>
            	<c>true</c> this instance is written only once in binary mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.GetPListElementCount">
            <summary>
            Gets the count of PList elements in this element.
            </summary>
            <returns>
            The count of PList elements in this element.
            </returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListNull.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:CE.iPhone.PList.PListReal">
            <summary>
            Represents a double Value from a PList
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListReal.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListReal.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListReal.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListReal"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListReal"/> class.
            </summary>
            <param name="value">The value of this element.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListReal.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListString">
            <summary>
            Represents an string Value from a PList 
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListString.Tag">
            <summary>
            Gets the Xml tag of this element.
            </summary>
            <value>The Xml tag of this element.</value>
        </member>
        <member name="P:CE.iPhone.PList.PListString.TypeCode">
            <summary>
            Gets the binary typecode of this element.
            </summary>
            <value>The binary typecode of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListString"/> class.
            </summary>
        </member>
        <member name="M:CE.iPhone.PList.PListString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CE.iPhone.PList.PListString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CE.iPhone.PList.PListString.Value">
            <summary>
            Gets or sets the value of this element.
            </summary>
            <value>The value of this element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListString.Parse(System.String)">
            <summary>
            Parses the specified value from a given String, read from Xml.
            </summary>
            <param name="value">The String whis is parsed.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListString.ToXmlString">
            <summary>
            Gets the XML String representation of the Value.
            </summary>
            <returns>
            The XML String representation of the Value.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListString.ReadBinary(CE.iPhone.PList.Internal.PListBinaryReader)">
            <summary>
            Reads this element binary from the reader.
            </summary>
            <param name="reader">The <see cref="T:CE.iPhone.PListBinaryReader"/> from which the element is read.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListString.GetPListElementLength">
            <summary>
            Gets the length of this PList element.
            </summary>
            <returns>The length of this PList element.</returns>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="M:CE.iPhone.PList.PListString.WriteBinary(CE.iPhone.PList.Internal.PListBinaryWriter)">
            <summary>
            Writes this element binary to the writer.
            </summary>
            <param name="writer">The <see cref="T:CE.iPhone.PListBinaryWriter"/> to which the element is written.</param>
            <remarks>Provided for internal use only.</remarks>
        </member>
        <member name="T:CE.iPhone.PList.PListRoot">
            <summary>
            Represents a PList File
            </summary>
        </member>
        <member name="P:CE.iPhone.PList.PListRoot.Format">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CE.iPhone.PList.PListRoot"/> is stored in binary format.
            </summary>
            <value><c>true</c> if stored in binary format; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Load(System.String)">
            <summary>
            Loads the PList from specified file.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <returns>A <see cref="T:CE.iPhone.PList.PListRoot"/> object loaded from the file</returns>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Load(System.IO.Stream)">
            <summary>
            Loads the PList from specified stream.
            </summary>
            <param name="stream">The stream containing the PList.</param>
            <returns>A <see cref="T:CE.iPhone.PList.PListRoot"/> object loaded from the stream</returns>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Save(System.String,CE.iPhone.PList.PListFormat)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Save(System.String)">
            <summary>
            Saves the PList to the specified path.
            </summary>
            <param name="fileName">The path of the PList.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Save(System.IO.Stream)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.Save(System.IO.Stream,CE.iPhone.PList.PListFormat)">
            <summary>
            Saves the PList to the specified stream.
            </summary>
            <param name="stream">The stream in which the PList is saves.</param>
            <param name="format">The format of the PList (Binary/Xml).</param>
        </member>
        <member name="P:CE.iPhone.PList.PListRoot.Root">
            <summary>
            Gets or sets the root PList-Element.
            </summary>
            <value>The root PList-Element.</value>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, 
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a 
            custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> 
            to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is
            produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> 
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            method.
            </returns>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:CE.iPhone.PList.PListRoot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.ChromeSettings">
            <summary>
            Keeps the user settings of Chrome
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.SafariSettings">
            <summary>
            Keeps the user settings of Safari
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.FirefoxSettings">
            <summary>
            Keeps the user settings of Firefox
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftBrowsersSettings">
            <summary>
            Keeps the user settings of Internet Explorer
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Chrome.ChromeActions.GetNativeInstance">
            <summary>
            Safari currently does not have a way to be accessed from managed code.
            </summary>
            <returns>null.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.Chrome.ChromeConfiguration.IsChromeUserLoggedIn">
            <summary>
            Get whether the user is currently logged-in with his Google account. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Edge actions object.
            </summary>
            <param name="browser">The associated browser with this action object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.LaunchNewBrowserInstance(System.Diagnostics.ProcessWindowStyle,ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Launch an instance of Edge with its extension enabled
            </summary>
            <param name="timeout">The timeout in milliseconds to wait until launched and ready to proceed with the test</param>
            <param name="windowStyle">The window style to use when launching this browser (i.e. minimized, maximized ...etc.)</param>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.WindowsBuildVersion">
            <summary>
            The version of windows build
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.IsWindows10OrLatter">
            <summary>
            Determines whether the OS is Windows 10 and latter
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.GetNativeInstance">
            <summary>
            MS Edge currently does not have a way to be accessed from managed code.
            </summary>
            <returns>null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.DeleteCookie(System.String)">
            <summary>
            Delete all cookies using the domain name
            </summary>
            <param name="domain">The domain associate with the cookie to delete</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.DeleteCookie(System.Net.Cookie)">
            <summary>
            Delete a specific cookie
            </summary>
            <param name="cookie">The cookie</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeActions.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            Clear browser cache
            </summary>
            <param name="type">Type of cache to clear</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand">
            <summary>
            Provides a way to send commands to the remote server
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Command class using a command name and a JSON-encoded string for the parameters.
            </summary>
            <param name="name">Name of the command</param>
            <param name="jsonParameters">Parameters for the command as a JSON-encoded string.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.#ctor(ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the Command class for a Session
            </summary>
            <param name="sessionId">Session ID the driver is using</param>
            <param name="name">Name of the command</param>
            <param name="parameters">Parameters for that command</param>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.Name">
            <summary>
            Gets the command name
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.Parameters">
            <summary>
            Gets the parameters of the command
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.ParametersAsJsonString">
            <summary>
            Gets the parameters of the command as a JSON-encoded string.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.SessionId">
            <summary>
            Gets the SessionID of the command
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.ConvertParametersFromJson(System.String)">
            <summary>
            Gets the command parameters as a <see cref="T:System.Collections.Generic.Dictionary`2" />, with a string key, and an object value.
            </summary>
            <param name="value">The JSON-encoded string representing the command parameters.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> with a string keys, and an object value. </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand.ToString">
            <summary>
            Returns a string of the Command object
            </summary>
            <returns>A string representation of the EdgeCommand Object</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo">
            <summary>
            Provides the execution information for a WebDriverCommand.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.PostCommand">
            <summary>
            POST verb for the command info
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.GetCommand">
            <summary>
            GET verb for the command info
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.DeleteCommand">
            <summary>
            DELETE verb for the command info
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the EdgeCommandInfo class
            </summary>
            <param name="method">Method of the Command</param>
            <param name="resourcePath">Relative URL path to the resource used to execute the command</param>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.Method">
            <summary>
            Gets the HTTP method associated with the command.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.ResourcePath">
            <summary>
            Gets the URL representing the path to the resource.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo.CreateWebRequest(System.Uri,ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommand)">
            <summary>
            Creates a web request for your command
            </summary>
            <param name="baseUri">Uri that will have the command run against</param>
            <param name="commandToExecute">Command to execute</param>
            <returns>A web request of what has been run</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.FromJson(System.String)">
            <summary>
            Returns a new object from a JSON-encoded string.
            </summary>
            <param name="value">The JSON string to deserialize into an object.</param>
            <returns>An object described by the JSON string.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.IsSpecificationCompliant">
            <summary>
            Gets a value indicating whether this response is compliant with the WebDriver specification.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.SessionId">
            <summary>
            Gets or sets the session ID.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.Status">
            <summary>
            Gets or sets the status value of the response.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.Value">
            <summary>
            Gets or sets the value from JSON.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.ToJson">
            <summary>
            Returns this object as a JSON-encoded string.
            </summary>
            <returns>A JSON-encoded string representing this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response.ToString">
            <summary>
            Returns the object as a string.
            </summary>
            <returns>A string with the Session ID, status value, and the value from JSON.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.ResponseValueJsonConverter">
            <summary>
            Converts the response to JSON
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.ResponseValueJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the object can be converted
            </summary>
            <param name="objectType">The object to be converted</param>
            <returns>True if it can be converted or false if can't be</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.ResponseValueJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Process the reader to return an object from JSON
            </summary>
            <param name="reader">A JSON reader</param>
            <param name="objectType">Type of the object</param>
            <param name="existingValue">The existing value of the object</param>
            <param name="serializer">JSON Serializer</param>
            <returns>Object created from JSON</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.ResponseValueJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes objects to JSON. Currently not implemented
            </summary>
            <param name="writer">JSON Writer Object</param>
            <param name="value">Value to be written</param>
            <param name="serializer">JSON Serializer </param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId">
            <summary>
            Provides a mechanism for maintaining a session for a test
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SessionId class
            </summary>
            <param name="opaqueKey">Key for the session in use</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId.Equals(System.Object)">
            <summary>
            Compares two Sessions
            </summary>
            <param name="obj">Session to compare</param>
            <returns>True if they are equal or False if they are not</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId.GetHashCode">
            <summary>
            Get the hash code of the key
            </summary>
            <returns>The hash code of the key</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.SessionId.ToString">
            <summary>
            Get the value of the key
            </summary>
            <returns>The key in use</returns>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.DefineDriverMapping">
            <summary>
            Represents the Define Driver Mapping command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Status">
            <summary>
            Represents the Status command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.NewSession">
            <summary>
            Represents a New Session command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetSessionList">
            <summary>
            Represents the Get Session List command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetSessionCapabilities">
            <summary>
            Represents the Get Session Capabilities command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Close">
            <summary>
            Represents a Browser close command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Quit">
            <summary>
            Represents a browser quit command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Get">
            <summary>
            Represents a GET command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GoBack">
            <summary>
            Represents a Browser going back command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GoForward">
            <summary>
            Represents a Browser going forward command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Refresh">
            <summary>
            Represents a Browser refreshing command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.AddCookie">
            <summary>
            Represents adding a cookie command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetAllCookies">
            <summary>
            Represents getting all cookies command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetCookie">
            <summary>
            Represents getting cookie command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.DeleteCookie">
            <summary>
            Represents deleting a cookie command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.DeleteAllCookies">
            <summary>
            Represents Deleting all cookies command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.FindElement">
            <summary>
            Represents FindElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.FindElements">
            <summary>
            Represents FindElements command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.FindChildElement">
            <summary>
            Represents FindChildElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.FindChildElements">
            <summary>
            Represents FindChildElements command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.DescribeElement">
            <summary>
            Describes an element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ClearElement">
            <summary>
            Represents ClearElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ClickElement">
            <summary>
            Represents ClickElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SendKeysToElement">
            <summary>
            Represents SendKeysToElements command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TapElement">
            <summary>
            Represents TapElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SubmitElement">
            <summary>
            Represents SubmitElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetCurrentWindowHandle">
            <summary>
            Represents GetCurrentWindowHandle command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetWindowHandles">
            <summary>
            Represents GetWindowHandles command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SwitchToWindow">
            <summary>
            Represents SwitchToWindow command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SwitchToFrame">
            <summary>
            Represents SwitchToFrame command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SwitchToParentFrame">
            <summary>
            Represents SwitchToParentFrame command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetActiveElement">
            <summary>
            Represents GetActiveElement command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetCurrentUrl">
            <summary>
            Represents GetCurrentUrl command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetPageSource">
            <summary>
            Represents GetPageSource command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetTitle">
            <summary>
            Represents GetTitle command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ExecuteScript">
            <summary>
            Represents ExecuteScript command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ExecuteAsyncScript">
            <summary>
            Represents ExecuteAsyncScript command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementText">
            <summary>
            Represents GetElementText command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementTagName">
            <summary>
            Represents GetElementTagName command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.IsElementSelected">
            <summary>
            Represents IsElementSelected command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.IsElementEnabled">
            <summary>
            Represents IsElementEnabled command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.IsElementDisplayed">
            <summary>
            Represents IsElementDisplayed command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementLocation">
            <summary>
            Represents GetElementLocation command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementLocationOnceScrolledIntoView">
            <summary>
            Represents GetElementLocationOnceScrolledIntoView command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementSize">
            <summary>
            Represents GetElementSize command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementRect">
            <summary>
            Represents GetElementRect command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementAttribute">
            <summary>
            Represents GetElementAttribute command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementProperty">
            <summary>
            Represents GetElementProperty command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetElementValueOfCssProperty">
            <summary>
            Represents GetElementValueOfCSSProperty command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ElementEquals">
            <summary>
            Represents ElementEquals command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Screenshot">
            <summary>
            Represents Screenshot command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ElementScreenshot">
            <summary>
            Represents the ElementScreenshot command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetOrientation">
            <summary>
            Represents GetOrientation command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetOrientation">
            <summary>
            Represents SetOrientation command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetWindowSize">
            <summary>
            Represents GetWindowSize command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetWindowSize">
            <summary>
            Represents SetWindowSize command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetWindowPosition">
            <summary>
            Represents GetWindowPosition command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetWindowPosition">
            <summary>
            Represents SetWindowPosition command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MaximizeWindow">
            <summary>
            Represents MaximizeWindow command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.FullScreenWindow">
            <summary>
            Represents FullScreenWindow command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.DismissAlert">
            <summary>
            Represents the DismissAlert command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.AcceptAlert">
            <summary>
            Represents the AcceptAlert command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetAlertText">
            <summary>
            Represents the GetAlertText command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetAlertValue">
            <summary>
            Represents the SetAlertValue command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetAlertCredentials">
            <summary>
            Represents the Authenticate command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ImplicitlyWait">
            <summary>
            Represents the ImplicitlyWait command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetAsyncScriptTimeout">
            <summary>
            Represents the SetAsyncScriptTimeout command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetTimeout">
            <summary>
            Represents the SetTimeout command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.Actions">
            <summary>
            Represents the Actions command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MouseClick">
            <summary>
            Represents the MouseClick command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MouseDoubleClick">
            <summary>
            Represents the MouseDoubleClick command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MouseDown">
            <summary>
            Represents the MouseDown command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MouseUp">
            <summary>
            Represents the MouseUp command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.MouseMoveTo">
            <summary>
            Represents the MouseMoveTo command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SendKeysToActiveElement">
            <summary>
            Represents the SendKeysToActiveElement command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.UploadFile">
            <summary>
            Represents the UploadFile command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchSingleTap">
            <summary>
            Represents the TouchSingleTap command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchPress">
            <summary>
            Represents the TouchPress command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchRelease">
            <summary>
            Represents the TouchRelease command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchMove">
            <summary>
            Represents the TouchMove command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchScroll">
            <summary>
            Represents the TouchScroll command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchDoubleTap">
            <summary>
            Represents the TouchDoubleTap command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchLongPress">
            <summary>
            Represents the TouchLongPress command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.TouchFlick">
            <summary>
            Represents the TouchFlick command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetLocation">
            <summary>
            Represents the GetLocation command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetLocation">
            <summary>
            Represents the SetLocation command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetAppCache">
            <summary>
            Represents the GetAppCache command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetAppCacheStatus">
            <summary>
            Represents the application cache GetStatus command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ClearAppCache">
            <summary>
            Represents the ClearAppCache command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetLocalStorageItem">
            <summary>
            Represents the GetLocalStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetLocalStorageKeys">
            <summary>
            Represents the GetLocalStorageKeys command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetLocalStorageItem">
            <summary>
            Represents the SetLocalStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.RemoveLocalStorageItem">
            <summary>
            Represents the RemoveLocalStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ClearLocalStorage">
            <summary>
            Represents the ClearLocalStorage command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetLocalStorageSize">
            <summary>
            Represents the GetLocalStorageSize command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetSessionStorageItem">
            <summary>
            Represents the GetSessionStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetSessionStorageKeys">
            <summary>
            Represents the GetSessionStorageKeys command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.SetSessionStorageItem">
            <summary>
            Represents the SetSessionStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.RemoveSessionStorageItem">
            <summary>
            Represents the RemoveSessionStorageItem command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.ClearSessionStorage">
            <summary>
            Represents the ClearSessionStorage command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverCommand.GetSessionStorageSize">
            <summary>
            Represents the GetSessionStorageSize command.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfoRepository">
            <summary>
            Holds the information about all commands specified by the JSON wire protocol.
            This class cannot be inherited, as it is intended to be a singleton, and
            allowing subclasses introduces the possibility of multiple instances.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfoRepository.#ctor">
            <summary>
            Initializes a new instance of the EdgeCommandInfoRepository class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfoRepository.InitializeCommandDictionary">
            <summary>
            Initializes the dictionary of commands for the EdgeCommandInfoRepository
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfoRepository.GetEdgeCommandInfo(System.String)">
            <summary>
            Gets the EdgeCommandInfo for a WebDriverCommand".
            </summary>
            <param name="commandName">The WebDriverCommand for which to get the edge command information.</param>
            <returns>The EdgeCommandInfo for the specified command.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfoRepository.TryAddCommand(System.String,ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.EdgeCommandInfo)">
            <summary>
            Tries to add a command to the list of known commands.
            </summary>
            <param name="commandName">Name of the command.</param>
            <param name="commandInfo">The command information.</param>
            <returns>
            <see langword="true" /> if the new command has been added successfully; otherwise, <see langword="false" />.</returns>
            <remarks>
            This method is used by WebDriver implementations to add additional custom driver-specific commands.
            This method will not overwrite existing commands for a specific name, and will return <see langword="false" />
            in that case.
            </remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError">
            <summary>
            Represents an error condition from a remote end using the W3C specification
            dialect of the wire protocol.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.ElementNotSelectable">
            <summary>
            Represents the element not selectable error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.ElementNotVisible">
            <summary>
            Represents the element not visible error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.InvalidArgument">
            <summary>
            Represents the invalid argument error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.InvalidElementCoordinates">
            <summary>
            Represents the invalid element coordinates error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.InvalidElementState">
            <summary>
            Represents the invalid element state error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.InvalidSelector">
            <summary>
            Represents the invalid selector error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.InvalidSessionId">
            <summary>
            Represents the invalid session ID error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.JavaScriptError">
            <summary>
            Represents the unhandled JavaScript error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.MoveTargetOutOfBounds">
            <summary>
            Represents the move target out of bounds error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.NoSuchAlert">
            <summary>
            Represents the no such alert error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.NoSuchElement">
            <summary>
            Represents the no such element error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.NoSuchFrame">
            <summary>
            Represents the no such alert frame.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.NoSuchWindow">
            <summary>
            Represents the no such alert window.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.ScriptTimeout">
            <summary>
            Represents the script timeout error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.SessionNotCreated">
            <summary>
            Represents the session not created error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.StaleElementReference">
            <summary>
            Represents the stale element reference error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.Timeout">
            <summary>
            Represents the timeout error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnableToSetCookie">
            <summary>
            Represents the unable to set cookie error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnableToCaptureScreen">
            <summary>
            Represents the unable to capture screen error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnexpectedAlertOpen">
            <summary>
            Represents the unexpected alert open error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnknownCommand">
            <summary>
            Represents the unknown command error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnknownError">
            <summary>
            Represents an unknown error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnknownMethod">
            <summary>
            Represents the unknown method error.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.UnsupportedOperation">
            <summary>
            Represents the unsupported operation error.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverError.ResultFromError(System.String)">
            <summary>
            Converts a string error to a WebDriverResult value.
            </summary>
            <param name="error">The error string to convert.</param>
            <returns>The converted WebDriverResult value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with
            a specified error message and a reference to the inner exception that is the
            cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
                  or <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new WebDriverException object.
            </summary>
            <param name="info">The data needed to serialize or deserialize an object.</param>
            <param name="context">The source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult">
            <summary>
            Specifies return values for actions in the driver.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.Success">
            <summary>
            The action was successful.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.IndexOutOfBounds">
            <summary>
            The index specified for the action was out of the acceptable range.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoCollection">
            <summary>
            No collection was specified.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoString">
            <summary>
            No string was specified.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoStringLength">
            <summary>
            No string length was specified.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoStringWrapper">
            <summary>
            No string wrapper was specified.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchDriver">
            <summary>
            No driver matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchElement">
            <summary>
            No element matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchFrame">
            <summary>
            No frame matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.UnknownCommand">
            <summary>
            The functionality is not supported.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.ObsoleteElement">
            <summary>
            The specified element is no longer valid.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.ElementNotDisplayed">
            <summary>
            The specified element is not displayed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.InvalidElementState">
            <summary>
            The specified element is not enabled.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.UnhandledError">
            <summary>
            An unhandled error occurred.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.ExpectedError">
            <summary>
            An error occurred, but it was expected.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.ElementNotSelectable">
            <summary>
            The specified element is not selected.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchDocument">
            <summary>
            No document matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.UnexpectedJavaScriptError">
            <summary>
            An unexpected JavaScript error occurred.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoScriptResult">
            <summary>
            No result is available from the JavaScript execution.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.XPathLookupError">
            <summary>
            The result from the JavaScript execution is not recognized.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchCollection">
            <summary>
            No collection matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.Timeout">
            <summary>
            A timeout occurred.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NullPointer">
            <summary>
            A null pointer was received.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoSuchWindow">
            <summary>
            No window matching the criteria exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.InvalidCookieDomain">
            <summary>
            An illegal attempt was made to set a cookie under a different domain than the current page.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.UnableToSetCookie">
            <summary>
            A request to set a cookie's value could not be satisfied.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.UnexpectedAlertOpen">
            <summary>
            An alert was found open unexpectedly.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.NoAlertPresent">
            <summary>
            A request was made to switch to an alert, but no alert is currently open.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.AsyncScriptTimeout">
            <summary>
            An asynchronous JavaScript execution timed out.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.InvalidElementCoordinates">
            <summary>
            The coordinates of the element are invalid.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverResult.InvalidSelector">
            <summary>
            The selector used (CSS/XPath) was invalid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.InitializationTimeout">
            <summary>
            Gets a value indicating the time to wait for an initial connection before timing out.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.HideCommandPromptWindow">
            <summary>
            Gets or sets a value indicating whether the command prompt window of the service should be hidden.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.IsRunning">
            <summary>
            Gets a value indicating whether the service is running.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.Port">
            <summary>
            Gets or sets the port of the service.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.ProcessId">
            <summary>
            Gets the process ID of the running driver service executable. Returns 0 if the process is not running.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.ServiceUrl">
            <summary>
            Gets the Uri of the service.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.Start">
            <summary>
            Starts the DriverService.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.IsInitialized">
            <summary>
            Gets a value indicating whether the service is responding to HTTP requests.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.WebDriverService.CommandLineArguments">
            <summary>
            Gets the command-line arguments for the driver service.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions">
            <summary>
            FireFox action support class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.GetComputedStyle(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Get computed style for an element.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="style">The style to get.</param>
            <returns>The style value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new FireFox actions object.
            </summary>
            <param name="associatedBrowser">The associated browser with this action object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.FindContentWindow">
            <summary>
            Get the content document window that is embedded in the browser window.
            </summary>
            <returns>The window</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.GetCookies``1(System.Uri)">
            <summary>
            Gets the cookies header string for a Uri
            </summary>
            <param name="uri">The Uri.</param>
            <returns>The header string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.DeleteCookie(System.String)">
            <summary>
            Delete all cookies from a given domain.
            </summary>
            <param name="domain">The domain associate with the cookies to delete.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.DeleteCookie(System.Net.Cookie)">
            <summary>
            DeleteCookie using a specific cookie
            </summary>
            <param name="cookie">The cookies</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.GetNativeInstance">
            <summary>
            Firefox currently does not have a way to be accessed from managed code.
            </summary>
            <returns>null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxActions.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            Clear firefox's cache.
            </summary>
            <param name="type">The category</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy">
            <summary>
            Proxy used for firefox XPCOM extension to communicate with the .Net objects.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._browserClient">
            <summary>
            The browser client object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._clientID">
            <summary>
            The client Id
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._commandCurrentlyExecuting">
            <summary>
            Whether the mozilla firefox processor is ready or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._signal">
            <summary>
            Signal when response is ready.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._isProvisioned">
            <summary>
            Whether the browser is provisitioned
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.#ctor">
            <summary>
            Create a new proxy object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.DoProvision(System.String)">
            <summary>
            Provisions the client for communication to the framework.
            </summary>
            <param name="remoteUrl">The URL of the framework communication pipe to connect to.</param>
            <returns>Whether or not provisioning was successful.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.Disconnect">
            <summary>
            Disconnect and clean up the proxy object and resources.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.LogMesssage(System.Int32,System.String)">
            <summary>
            Log a message to the log object controlled by the Manager.
            </summary>
            <param name="type">The log type to invoke.</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.Connect(System.String,System.IntPtr)">
            <summary>
            Connect this proxy to the current active Manager object.
            </summary>
            <param name="version">The version of the client that is being connected. (FireFox 2.0, IE 6.0 ..etc)</param>
            <param name="hwnd">The Hwnd of the client being connected.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.SupportsJsLogging">
            <summary>
            Returns whether the automation should support client script logging or not.
            </summary>
            <returns>True to support js script logging else false.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.SetResponse(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Set the response of for a command to be processed.
            </summary>
            <param name="command">The response.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.DispatchJavascriptEvent(System.String)">
            <summary>
            Dispatches a Javascript event to a WebAii event handler
            </summary>
            <param name="eventMessage">JSON-serialized JavascriptEventMessage containing information about the event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.GetRequest">
            <summary>
            Gets the current command request if any are available.
            </summary>
            <returns>The current command being requested for execution.
            If no requests are present, will return null.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.GetRequestId">
            <summary>
            Gets the current command request id if any are available.
            </summary>
            <returns>The current command id being request for execution.
            If no requests are present, will return a 'string.empty'.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.ClientId">
            <summary>
            This client's unique id.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy._browserClient_BrowserRequest(System.Object,ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs)">
            <summary>
            Browser command available
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Firefox.FireFoxClientProxy.ProcessCommand(ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs)">
            <summary>
            Process the command and wait for it to be complete.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.NativeConsts">
             <summary>
            WinInet constans.
             </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.NativeConsts.INTERNET_COOKIE_HTTPONLY">
            <summary>
            InternetGetCookieEx method flag.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.NativeConsts.InternetCookieState">
            <summary>
            Cookie state in IE.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.NativeMethods">
            <summary>
            WinInet Calls.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions">
            <summary>
            Internet Explorer action support class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.ConnectIEDialog(System.String,System.Int32)">
            <summary>
            Connect an IE modal or modeless dialog to the Manager.
            </summary>
            <param name="caption">The full or partial caption of the dialog to connect.</param>
            <param name="delaySearchPeriod">Optionally, you can delay the search (in milli-seconds) for the dialog to make sure windows
            has actually created the window before looking for it. Else 0.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Internet Explorer actions object.
            </summary>
            <param name="associatedBrowser">The associated browser with this action object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetComputedStyle(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Get computed style for an element.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="style">The style to get.</param>
            <returns>The styles value or string.empty if the style is not present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.FindContentWindow">
            <summary>
            Get the content document window that is embedded in the browser window.
            </summary>
            <returns>The window</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetIEContentWindowServer(ArtOfTest.Common.Win32.Window,System.Int32)">
            <summary>
            Get IE's content window. (Internet Explorer_Server)
            </summary>
            <param name="parent"></param>
            <param name="initialDelay"></param>
            <returns>Window object representing IE's content window. null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.LaunchNewBrowserInstance(System.Int32,System.Diagnostics.ProcessWindowStyle,System.String,System.String)">
            <summary>
            Launch an instance of internet explorer with its extension enabled
            </summary>
            <param name="timeout">The timeout in milliseconds to wait until launched and ready to proceed with the test</param>
            <param name="windowStyle">The window style to use when launching this browser (i.e. minimized, maximized ...etc.)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetParentProcess(System.Int32)">
            <summary>
            Use WMI to get the parent of a given process
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.WaitForDocument(System.IntPtr,System.Int32)">
            <summary>
            Waits until the mshtml Document is available from and hwnd. Then returns it.
            </summary>
            <param name="hwnd">The IEFrame to retrieve the document from</param>
            <returns>mshtml.IHTMLDocument2 object</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetDocumentFromHwnd(System.IntPtr)">
            <summary>
            Get a mshtml Document from an Hwnd. Used for IE Modal dialogs
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.BeginAsyncInjection(ArtOfTest.Common.Win32.Window,System.String,System.String,System.String,System.Action)">
            <summary>
            Both the Execution and Recording runtimes require the ability to inject code into new processes, and they need to do this action in a thread.
            The first 4 parameters are identical to those found in the InjectCode method. The last parameter, an Action, is performed after the injection has occurred.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetNativeInstance">
            <summary>
            Gets the native instance of internet explorer.
            </summary>
            <returns>The IWebBrowser2 instance of IE.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetNativeInstance(System.IntPtr)">
            <summary>
            Get a reference to the IE IWebBrowser2 object.
            </summary>
            <returns>The hwnd handle of the browser to find.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.AddCustomSilverlightAssembly(System.String,System.IO.MemoryStream)">
            <summary>
            Adds the specified assembly to the list of assemblies that are injected into Silverlight apps when we're
            automating them.
            </summary>
            <param name="name">The name of the assembly, without the extension</param>
            <param name="stream">A stream containing the assembly binary</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.EnableMimeFilter">
            <summary>
            Enables the MIME filter to inject automation libraries into Silverlight apps as they come down the wire
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.GetCookies``1(System.Uri)">
            <summary>
            Gets the cookies associated with a Uri
            </summary>
            <param name="url">The Url to use to get the cookies</param>
            <returns>The list of cookies associated with this Uri</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.DeleteCookie(System.String)">
            <summary>
            DeleteCookie using the domain name
            </summary>
            <param name="domain">The domain associate with the cookie to delete</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.DeleteCookie(System.Net.Cookie)">
            <summary>
            DeleteCookie using a specific cookie
            </summary>
            <param name="cookie">The cookies</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.SetCookie(System.String,System.String,System.String)">
            <summary>
            Set a cookie
            </summary>
            <param name="domain">Domain name.</param>
            <param name="name">The name of the cookie.</param>
            <param name="data">Cookie data.</param>
            <returns>True/False whether the cookie setting suceeded or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            ClearCache implementation for IE
            </summary>
            <param name="type">The cache type</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.DeleteInternetTempFiles(System.Boolean,System.String,System.Boolean)">
            <summary>
            Delete IE's Temp. Internet Files caches
            http://support.microsoft.com/kb/326201
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.ClearLocalStorage">
            <summary>
            Clear Internet Explorer local storage (DOMStorage) by deleting its directories on the filesystem. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.STATURL.pwcsUrl">
            <summary>
            The specified URL.The calling function must free this parameter.
            Set this parameter to STATURL_QUERYFLAG_NOURL if no URL is specified.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.STATURL.pwcsTitle">
            <summary>
            The title of the Web page, as contained in the title tags.
            This calling application must free this parameter.
            Set this parameter to STATURL_QUERYFLAG_NOTITLE if no Web page is specified.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.DeleteInternetHistory">
            <summary>
            Deleting the interest history
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.InvokeScript(System.String)">
            <summary>
            Runs Javascript code in the browser.  Internet Explorer requires the string containing the code to run to be escaped, and Firefox
            requires that the string <i>not</i> be escaped.
            </summary>
            <param name="script">A string containing the Javascript code to execute</param>
            <returns>A string representation of the value returned by the evaluated Javascript code</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.InternetExplorer.InternetExplorerActions.InvokeScript``1(System.String)">
            <summary>
            Invoke a JavaScript method in the browser.
            </summary>
            <typeparam name="T">The type of object to return.</typeparam>
            <param name="script">The name of the method to call.</param>
            <returns>The response returned by the JavaScript method.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariInstallation.EnsureExtensionIsInstalled(System.String,System.String)">
            <summary>
            Checks if a Safari extension is installed and if not installs it.
            Safari browser must be restarted after extension installation.
            </summary>
            <param name="extensionName">The name of the extension.</param>
            <param name="installationFile">The safariextz file.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions">
            <summary>
            Safari actions support class
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Safari actions object.
            </summary>
            <param name="associatedBrowser">The associated browser with this action object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions.FindContentWindow">
            <summary>
            Get the content document window that is embedded in the browser window.
            </summary>
            <returns>The window</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions.LaunchNewBrowserInstanceInt(System.Int32,System.String,System.Diagnostics.ProcessWindowStyle,ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Launches a new browser instance of this browser
            </summary>
            <param name="timeout">The time out to wait for the browser.</param>
            <param name="remotedUrl">The remoted Url of the manager.</param>
            <param name="windowStyle">The window style to use.</param>
            <param name="manager">The manager object to attach the new browser window to.</param>
            <returns>The native browser instance launch if available.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions.GetNativeInstance">
            <summary>
            Safari currently does not have a way to be accessed from managed code.
            </summary>
            <returns>null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.Safari.SafariActions.GetComputedStyle(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Gets the computed value of the specified style from the DOM.
            </summary>
            <param name="targetElement">The element to get the style from.</param>
            <param name="style">The style to calculate the value of.</param>
            <returns>The value of the computed style.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.CookieWrapper">
            <summary>
            This guy wraps cookie information with a DataContract so we can serialize it easily to send
            to the Chrome and Safari extensions as a JSON string.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.SilverlightOutOfBrowser.SilverlightOutOfBrowserActions.LaunchNewBrowserInstance(System.Int32,System.Diagnostics.ProcessWindowStyle,System.String,System.String)">
            <summary>
            Launch an instance of internet explorer with its extension enabled
            </summary>
            <param name="timeout">Ignored for IE</param>
            <param name="windowStyle">The window style to use when launching this browser (i.e. minimized, maximized ...etc.)</param>
            <param name="arguments">Arguments to pass to the browser.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions">
            <summary>
            Implements automation actions for the AspNetHost browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.DO_POSTBACK_REGEX">
            <summary>
            Regex to search for doPostBack javascript call
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions._postbackRegex">
            <summary>
            Static compiled regex
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions._aspNetHostBrowser">
            <summary>
            The plasma browser associated with this actions objects
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new PlasmaActions object
            </summary>
            <param name="associatedBrowser">The associated browser.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.GetNativeInstance">
            <summary>
            The AspNetHost browser already override this object.
            </summary>
            <returns>The AspNetApplication object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.Click(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Click an element.
            </summary>
            <param name="targetElement">The target element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.DoSelectDropDown(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Select an item in a drop down.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="data">The item to select and how to select it.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.Check(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Check an element or a radio button.
            </summary>
            <param name="targetElement">The target to check.</param>
            <param name="checkedState">The check state to set it to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.SetText(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Set the text for a target element.
            </summary>
            <param name="targetElement">The target element to set the text for.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.DoAction(ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm)">
            <summary>
            Perform the form postback.
            </summary>
            <param name="form">The form to post.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.SetPostbackArguments(System.String[],ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm@)">
            <summary>
            Set a postback arguments.
            </summary>
            <param name="arguments">The arguments list.</param>
            <param name="form">The AspNetForm to set it on.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.ContainsDoPostbackCall(System.String,System.String[]@)">
            <summary>
            Gets whether a string contains a postback call. If so will also set the postBackCallArguments
            to the postback parameters.
            </summary>
            <param name="doPostbackString">The postback call.</param>
            <param name="postBackCallArguments">The postback arguments.</param>
            <returns>True/False whether the doPostbackString contains a postback call.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.ValidateTargetElement(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Validate the target element for this browser's actions.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="validateName">Whether to validate that the element contains a name attribute.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.FindContentWindow">
            <summary>
            Unsupported
            </summary>
            <returns>N/A - UnsupportedBrowserOperationException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.ScrollToVisible(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Unsupported - Does not apply for this browser.
            </summary>
            <param name="targetElement">Target element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.InvokeEvent(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Core.ScriptEventType)">
            <summary>
            Unsupported - There is no javascript engine running for this browser.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="eventType">The event type.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.InvokeScript(System.String)">
            <summary>
            Unsupported - There is no javascript engine running for this browser.
            </summary>
            <param name="script">The script to call.</param>
            <returns>N/A - UnsupportedBrowserOperationException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.GetComputedStyle(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Unsupported - There is no concept of current styles for AspNetHost
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="style">The style.</param>
            <returns>N/A - UnsupportedBrowserOperationException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.GetCookies``1(System.Uri)">
            <summary>
            Gets the cookies associated with a Uri
            </summary>
            <param name="uri">The Uri to use to get the cookies</param>
            <returns>The cookies header.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.DeleteCookie(System.String)">
            <summary>
            DeleteCookie using the domain name
            </summary>
            <param name="domain">The domain associate with the cookie to delete</param>
            <returns>True/False whether the cookie got deleted.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.DeleteCookie(System.Net.Cookie)">
            <summary>
            DeleteCookie using a specific cookie
            </summary>
            <param name="cookie">The cookies</param>
            <returns>True/False whether the cookie got deleted.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.SetCookie(System.String,System.String,System.String)">
            <summary>
            Set a specific cookie
            </summary>
            <param name="domain">domain</param>
            <param name="name">name</param>
            <param name="data">cookie header</param>
            <returns>None</returns>
            <exception cref="T:ArtOfTest.WebAii.Exceptions.UnsupportedBrowserOperationException">Always thrown.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostActions.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            Delete internet browsing cache.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser">
            <summary>
            A proxy that represents a browser object for the AspNetHost inproc web server.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser._aspNetApplication">
            <summary>
            The AspNetApplication object that all requests will be executed against.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser._debugBrowser">
            <summary>
            The debug browser when EnableUILessRequestViewing is enabled.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser._ieDebugActions">
            <summary>
            The debug browser actions object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser._hostActions">
            <summary>
            This browser host actions.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.#ctor(System.String,System.String,ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create a new AspNetHostbrowser
            </summary>
            <param name="browserInstanceId">This browser instance id.</param>
            <param name="version">Version</param>
            <param name="currentManager">The current manager.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.AspNetAppInstance">
            <summary>
            The AspNetApplication instance that all requests are running against.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.Status">
            <summary>
            The response status code as of last response.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.GetForm">
            <summary>
            Get the AspNetForm object.
            </summary>
            <returns>The AspNet Form of this browser as of last request.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.PerformCustomPostAction(ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm)">
            <summary>
            Performs a post action to the server as defined by the form passed in.
            </summary>
            <param name="form">The form object to use to make a postback.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.RefreshDomTree">
            <summary>
            Refresh the DomTree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.Close(System.Int32)">
            <summary>
            Close this browser.
            </summary>
            <param name="waitToCloseTimeout">No Used.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.NavigateTo(System.Uri,System.Boolean)">
            <summary>
            Navigate to a certain relative Url.
            </summary>
            <param name="uri">The relative Url to navigate to (i.e. ~/default.aspx).</param>
            <param name="useDecodedUrl">Decode the url before navigate to it</param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.IsReady">
            <summary>
            Always returns true for this browser.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.IsConnected">
            <summary>
            Whether the AspNetApplication is running and the host is registered.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.IsUsable">
            <summary>
            Whether the ASP.NET application we're testing is configured
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Unsupported - Browser is window-less.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.ResizeContent(System.Drawing.Rectangle)">
            <summary>
            Unsupported - Browser is window-less.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.ContainsRectangle(System.Drawing.Rectangle)">
            <summary>
            Unsupported - Browser is window-less.
            </summary>
            <param name="rectangle"></param>
            <returns>None</returns>
            <exception cref="T:ArtOfTest.WebAii.Exceptions.UnsupportedBrowserOperationException">Always thrown.</exception>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.ContentWindow">
            <summary>
            Unsupported - Browser is window-less. This will throw an UnsupportedBrowserOperation exception.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.ExecuteCommand(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.Boolean,System.Boolean)">
            <summary>
            Unsupported - All commands are executed in-proc. 
            </summary>
            <param name="request">The request to execute.</param>
            <param name="performDomRefresh">Whether to perform a Dom refresh.</param>
            <param name="waitUntilReady">Whether to wait until the browser is ready.</param>
            <returns>N/A - UnsupportedBrowserOperationException</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.Window">
            <summary>
            Unsupported - Browser is window-less.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.Refresh">
            <summary>
            N/A - Call returns immediately.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.GoBack">
            <summary>
            N/A - Call returns immediately.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.GoForward">
            <summary>
            N/A - Call returns immediately.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.WaitUntilReady">
            <summary>
            N/A - Call returns immediately.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.BrowserSpecialized.AspNetHost.AspNetHostBrowser.Stop">
            <summary>
            N/A - Call returns immediately.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.Check(System.Boolean)">
            <summary>
            Sets the Checked state to isChecked and triggers the OnClick and OnChange events
            </summary>
            <param name="isChecked">The checked state to set.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.Check(System.Boolean,System.Boolean)">
            <summary>
            Sets the Checked state to isChecked and optionally invokes
            the onclick event.
            </summary>
            <param name="isChecked">The checked state to set.</param>
            <param name="invokeOnClickChanged">True/False whether to invoke the click event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.Check(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Checked state to isChecked and optionally invokes
            the onclick and onchange events.
            </summary>
            <param name="isChecked">The checked state to set.</param>
            <param name="invokeOnClickChanged">True/False whether to invoke the click event.</param>
            <param name="invokeOnChange">True/False whether to invoke the change event.</param> 
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlRadioCheckboxControl.Checked">
            <summary>
            Sets or returns whether or not a box should be checked.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTime">
            <summary>
            Test class for an HtmlTime element <![CDATA[ <time>...</time> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTime.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTime.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTime.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlProgress">
            <summary>
            Test class for an HtmlProgress element <![CDATA[ <progress>...</progress> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlProgress.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlProgress.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlProgress.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlMeter">
            <summary>
            Test class for an HtmlMeter element <![CDATA[ <meter>...</meter> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlMeter.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlMeter.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlMeter.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDetails">
            <summary>
            Test class for an HtmlDetails element <![CDATA[ <details>...</details> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDetails.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDetails.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDetails.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlCanvas">
            <summary>
            Test class for an HtmlCanvas element <![CDATA[ <canvas>...</canvas> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlCanvas.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlCanvas.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlCanvas.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSearch.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSearch.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRange.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRange.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputNumber.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputNumber.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio">
            <summary>
            Wrapper class for a audio element <![CDATA[ <audio>...</audio> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Autoplay">
            <summary>
            The autoplay attribute determines whether a video begins playing as soon as the page loads
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Controls">
            <summary>
            The controls attribute determines whether the standard playback controls are shown to the user
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Loop">
            <summary>
            Whether the video will start playing from its beginning again once it reaches its end
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Src">
            <summary>
            URL for the video file to play, if no source elements are specified for the video
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.CurrentTime">
            <summary>
            Gets the current playback time
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Duration">
            <summary>
            Gets the duration of the audio source, in seconds
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.InitialTime">
            <summary>
            Gets the initial playback position of the audio player, in seconds
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Load">
            <summary>
            Cause the audio player to reload its source audio
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAudio.Ended">
            <summary>
            Gets whether the audio source has played through to its end
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputUrl.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputUrl.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSource">
            <summary>
            Wrapper class for a source element <![CDATA[ <source ... /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSource.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo">
            <summary>
            Wrapper class for a video element <![CDATA[ <video>...</video> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Autoplay">
            <summary>
            The autoplay attribute determines whether a video begins playing as soon as the page loads
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Controls">
            <summary>
            The controls attribute determines whether the standard playback controls are shown to the user
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Loop">
            <summary>
            Whether the video will start playing from its beginning again once it reaches its end
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Poster">
            <summary>
            URL for the image that is shown before the video begins playing
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Src">
            <summary>
            URL for the video file to play, if no source elements are specified for the video
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.CurrentTime">
            <summary>
            Gets the current playback time
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Duration">
            <summary>
            Gets the duration of the video, in seconds
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.InitialTime">
            <summary>
            Gets the initial playback position of the video, in seconds
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Load">
            <summary>
            Cause the video player to reload its source video
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlVideo.Ended">
            <summary>
            Gets whether the video has played through to its end
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputEmail.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputEmail.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionDescription">
            <summary>
            Test class for an HtmlDefinitionDescription element <![CDATA[ <dd /> ]]>. This control is used by
            the HtmlDefinitionList control
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionDescription.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionDescription.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionDescription.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionDescription.Description">
            <summary>
            Gets the definition description.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList">
            <summary>
            Test class for an HtmlDefinitionList element <![CDATA[ <dl /> ]]>. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList.Descriptions">
            <summary>
            Gets an array of descriptions contained in this
            definition list
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionList.Terms">
            <summary>
            Gets an array of terms contained in this 
            definition list.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionTerm">
            <summary>
            Test class for an HtmlDefinitionTerm element <![CDATA[ <dt /> ]]>. This control is used by
            the HtmlDefinitionList control
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionTerm.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionTerm.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionTerm.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDefinitionTerm.Term">
            <summary>
            Gets the definition term.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlListItem">
            <summary>
            Test class for an HtmlListItem element <![CDATA[ <li /> ]]>. This control is used by
            the HtmlOrdererList control and the HtmlUnorderedList controls.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlListItem.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlListItem.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlListItem.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlListItem.GetItemOrder">
            <summary>
            Gets this item's order in its parent list. 0 based ordering
            </summary>
            <returns>The order of this list item. 0 based</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList">
            <summary>
            Test class for an HtmlOrderedList element <![CDATA[ <ol /> ]]>. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList.Items">
            <summary>
            Gets the direct child list items. - Not Recursive
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOrderedList.AllItems">
            <summary>
            Gets the all child list items. - Recursive
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList">
            <summary>
            Test class for an HtmlOrderedList element <![CDATA[ <ul /> ]]>. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList.Items">
            <summary>
            Gets this ordered list items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlUnorderedList.AllItems">
            <summary>
            Gets the all child list items. - Recursive
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute">
            <summary>
            Provides assert service for control attributes.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.#ctor">
            <summary>
            Create a new AssertAttribute object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Create a new AssertAttribute object and assign it to an HtmlControl.
            </summary>
            <param name="control">The target control to assign to this object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.Value(System.String,ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert if the value of the specified attribute does not match.
            </summary>
            <param name="attributeName">The attribute name to compare the value of.</param>
            <param name="compare">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.Exists(System.String)">
            <summary>
            Assert if the specified attribute does not exist.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.ExistsNot(System.String)">
            <summary>
            Assert if the specified attribute does exist.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.ThrowOnAssertFailed">
            <summary>
            Whether to throw an exception if an assertion evaluated by this object fails. If null,
            this object will follow the default policy determined by Control.s_throwOnAssertFailed
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertAttribute.GetAttribute(System.String)">
            <summary>
            Get an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The atribute if found, else null or throw an AssertException.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck">
            <summary>
            Assert the checked state for a CheckBox or RadioButton input
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck._throwOnFailure">
            <summary>
            Whether to throw an exception if the assertion fails
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.#ctor">
            <summary>
            Create an new AssertCheck.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.#ctor(System.Boolean)">
            <summary>
            Create a new AssertCheck
            </summary>
            <param name="throwOnFailure">Whether this object throws an exception when a check fails</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl)">
            <summary>
            Create a new AssertCheck
            </summary>
            <param name="control">The control to perform assert against.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.IsTrue">
            <summary>
            Assert if it is not checked
            </summary>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.IsFalse">
            <summary>
            Assert if it is checked.
            </summary>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck.GetCheckedState">
            <summary>
            Get the checked state
            </summary>
            <returns>The checked state</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect">
            <summary>
            Assert methods for an HtmlSelect control
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.#ctor">
            <summary>
            Create a new AssertSelect object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect)">
            <summary>
            Create a new AssertSelect object and assign it to an existing control.
            </summary>
            <param name="select">The target HtmlSelect to assign to this AssertSelect object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect,System.Boolean)">
            <summary>
            Create a new AssertSelect object and assign it to an existing control.
            </summary>
            <param name="select">The target HtmlSelect to assign to this AssertSelect object.</param>
            <param name="throwOnFailure">Whether this object throws an exception if a check fails</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.SelectedValue(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert if the selected value does not match.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.SelectedText(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert if the selected text does not match.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedText">The expected text.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.SelectedIndex(ArtOfTest.Common.NumberCompareType,System.Int32)">
            <summary>
            Assert if the selected index does not match.
            </summary>
            <param name="compareType">The number compare type.</param>
            <param name="index">The expected index.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.ValueExists(System.String)">
            <summary>
            Assert if a particular option value does not exist in the HtmlSelect options list.
            </summary>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.TextExists(System.String)">
            <summary>
            Assert if a particular text value does not exist in the HtmlSelect options list.
            </summary>
            <param name="expectedText"></param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.ValueExistsNot(System.String)">
            <summary>
            Assert if a particular option value does exist in the HtmlSelect options list.
            </summary>
            <param name="expectedValue">The expected value to verify it does not exist.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.TextExistsNot(System.String)">
            <summary>
            Assert if a particular text value does exist in the HtmlSelect options list.
            </summary>
            <param name="expectedText">The expected text to verify it does not exist.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.ItemsCountIs(ArtOfTest.Common.NumberCompareType,System.Int32)">
            <summary>
            Assert if the number of options in this HtmlSelect does not match.
            </summary>
            <param name="compareType">The integer compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertSelect.ValueTextExists(System.String,System.Boolean)">
            <summary>
            Check whether a value/text exists.
            </summary>
            <param name="expectedValue">The expected value.</param>
            <param name="useValue">True to search the list of values. False to search the list of text's.</param>
            <returns>True/False indicating if the value/text was found or not in the list.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle">
            <summary>
            Assert based on common html styles.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle._defaultStyleType">
            <summary>
            Whether to use computed or inline by default
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.#ctor">
            <summary>
            Create a new AssertStyle object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Create a new AssertStyle object passing it the target control.
            </summary>
            <param name="control">The target control to assign to this AssertStyle object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.#ctor(System.Boolean)">
            <summary>
            Create a new AssertStyle object.
            </summary>
            <param name="throwOnFailure">Whether this object throws an exception is a check fails</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.DefaultStyleType">
            <summary>
            Gets or sets the default style type to use (Inline or Computed). Defaults to Computed.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Font(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert Font styles.
            </summary>
            <param name="styleName">The font style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Font(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont,System.String)">
            <summary>
            Assert Font styles.
            </summary>
            <param name="styleName">The font style name.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Font(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert Font styles.
            </summary>
            <param name="styleName">The font style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String compare type.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.ColorAndBackground(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert Color/Background styles.
            </summary>
            <param name="styleName">The color or background style.</param>
            <param name="expectedValue">The expected style value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
            <remarks>Automatically detects colors and will perform the proper validation
            regardless of the format of the color encoding attached to the style e.g. "red" will match "#FF0000".</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.ColorAndBackground(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground,System.String)">
            <summary>
            Assert Color/Background styles.
            </summary>
            <param name="styleName">The color or background style.</param>
            <param name="expectedValue">The expected style value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
            <remarks>Automatically detects colors and will perform the proper validation
            regardless of the format of the color encoding attached to the style e.g. "red" will match "#FF0000".</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.ColorAndBackground(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert Color/Background styles.
            </summary>
            <param name="styleName">The color or background style.</param>
            <param name="expectedValue">The expected style value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String Compare Type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
            <remarks>Automatically detects colors and will perform the proper validation
            regardless of the format of the color encoding attached to the style e.g. "red" will match "#FF0000".</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Text(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert Text styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Text(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText,System.String)">
            <summary>
            Assert Text styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Text(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert Text styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String compare type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Display(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert Display styles.
            </summary>
            <param name="styleName">The font style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Display(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay,System.String)">
            <summary>
            Assert Display styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Display(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert Display styles.
            </summary>
            <param name="styleName">The font style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String compare type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Box(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert Box styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Box(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox,System.String)">
            <summary>
            Assert Box styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.Box(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert Box styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String compare type.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.List(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert List styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.List(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList,System.String)">
            <summary>
            Assert List styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.List(ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert List styles.
            </summary>
            <param name="styleName">The style name.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">String compare type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.CommonStyleAssert(System.Object,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType)">
            <summary>
            Assert a style.
            </summary>
            <param name="style">The style object to validate.</param>
            <param name="expectedValue">Expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">The string compare type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.CommonStyleAssert(System.Object,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,ArtOfTest.Common.StringCompareType)">
            <summary>
            Assert a style.
            </summary>
            <param name="style">The style object to validate.</param>
            <param name="expectedValue">Expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="compareType">The string compare type</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.CommonStyleAssert(System.Object,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType)">
            <summary>
            Assert a style with Exact match.
            </summary>
            <param name="style">The style object to validate.</param>
            <param name="expectedValue">Expected value.</param>
            <param name="styleType">Either computed or inline.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.GetStyleValue(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,System.Object,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType,System.Boolean@)">
            <summary>
            Get a style's value given an HtmlControl and an enum style type to get.
            </summary>
            <param name="control">The HtmlControl to get the style of.</param>
            <param name="styleEnum">The enum style to get.</param>
            <param name="styleType">Either computed or inline.</param>
            <param name="isColor">An output indicating whether or not the style's value is a color</param>
            <returns>The actual value as a string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertStyle.GetStyleLiteral(System.Object,System.Boolean@)">
            <summary>
            Given a style enum value, will read its CssStyleAttribute and get its literal string representation.
            </summary>
            <param name="styleEnum">The actual enum value of the style.</param>
            <param name="isColor">An output indicating if the style is a color style.</param>
            <returns>The string representation of the styles value.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent">
            <summary>
            Assert the content of an HtmlControl
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.#ctor">
            <summary>
            Create an new AssertContent.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Create a new AssertContent
            </summary>
            <param name="control">The control to perform assert against.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.TextContent(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert the TextContent of the element.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.OuterMarkup(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert the OuterMarkup of the element.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.InnerText(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert the InnerText of the element.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.InnerMarkup(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert the InnerMarkup of the element.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertContent.StartTagContent(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Assert the StartTagContent of the element.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedValue">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable">
            <summary>
            Provide HtmlTable specific asserts
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.#ctor">
            <summary>
            Create a new table assert object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable)">
            <summary>
            Create a new table assert and assigned it to an HtmlTable control.
            </summary>
            <param name="table">The HtmlTable to set as the target</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable,System.Boolean)">
            <summary>
            Create a new table assert and assigned it to an HtmlTable control.
            </summary>
            <param name="table">The HtmlTable to set as the target</param>
            <param name="throwOnFailure">Whether this object throws an exception if a check fails</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.RowCount(ArtOfTest.Common.NumberCompareType,System.Int32)">
            <summary>
            Asserts if the table row count does not match.
            </summary>
            <param name="compareType">The number compare type.</param>
            <param name="expected">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.RowRange(ArtOfTest.Common.NumberRangeCompareType,System.Int32,System.Int32)">
            <summary>
            Assert if the row count is inside/outside the specified range.
            </summary>
            <param name="range">In/Out of range.</param>
            <param name="lowerEnd">Lower end of range to compare.</param>
            <param name="upperEnd">Upper end of range to compare.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.ColumnCount(ArtOfTest.Common.NumberCompareType,System.Int32)">
            <summary>
            Asserts if the column count does not match.
            </summary>
            <param name="compareType">The number compare type.</param>
            <param name="expected">The expected value.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.ColumnRange(ArtOfTest.Common.NumberRangeCompareType,System.Int32,System.Int32)">
            <summary>
            Asserts if the column count is inside/outside the specified range.
            </summary>
            <param name="compareType">In/Out of range.</param>
            <param name="lowerEnd">Lower end of the range to compare.</param>
            <param name="upperEnd">Upper end of the range to compare.</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.Contains(ArtOfTest.Common.StringCompareType,System.String)">
            <summary>
            Asserts that a certain text appears in the table.
            </summary>
            <param name="compareType">The string compare type.</param>
            <param name="expectedString">The expected string</param>
            <returns>True if the values match else will throw an AssertException.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertTable.GetColumnCount">
            <summary>
            Gets the column count of the table.
            </summary>
            <returns>The column count.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute">
            <summary>
            Used internally to decorate specific Style enums with 
            their actual style literal.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute._text">
            <summary>
            The style literal
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute._isColor">
            <summary>
            Whether the style is a color or not.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute.#ctor(System.String)">
            <summary>
            Create the new attribute
            </summary>
            <param name="cssLiteral"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute.CssLiteral">
            <summary>
            Gets the style literal
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.CssStyleAttribute.IsColor">
            <summary>
            Gets whether this style is a color or not.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType">
            <summary>
            String compare type (Contains, exact ...etc.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.Exact">
            <summary>
            Exact comparison.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.Contains">
            <summary>
            Contains comparison.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.NotContain">
            <summary>
            Does not contain comparison.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.StartsWith">
            <summary>
            Starts with comparison.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.EndsWith">
            <summary>
            Ends with comparison.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType.RegEx">
            <summary>
            Regex comparison.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType">
            <summary>
            Numerical compare type (Equals, less than..etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.Equals">
            <summary>
            Verify A equals B.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.LessThan">
            <summary>
            Verify A is less than B.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.GreaterThan">
            <summary>
            Verify A is greater than B.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.LessThanOrEqual">
            <summary>
            Verify A is less than or equal to B.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.GreaterThanOrEqual">
            <summary>
            Verify A is greater than or equal to B.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType.NotEqual">
            <summary>
            Verify A is not equal to B.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType">
            <summary>
            Style type (Computed vs Inline)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType.Computed">
            <summary>
            Get the computed style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleType.Inline">
            <summary>
            Get the inline style.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory">
            <summary>
            Style category
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.Font">
            <summary>
            Style is a font.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.ColorAndBackground">
            <summary>
            Style is a color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.Text">
            <summary>
            Style is a text.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.Display">
            <summary>
            Style is a display
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.Box">
            <summary>
            Style is a box.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.List">
            <summary>
            Style is a list.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleCategory.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont">
            <summary>
            CSS2 common font styles. (Family, size..etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Family">
            <summary>
            The font's family
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Style">
            <summary>
            The font's style
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Variant">
            <summary>
            The fonts variant.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Weight">
            <summary>
            The font's weight.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Size">
            <summary>
            The font's size.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.Stretch">
            <summary>
            The font's stretch.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleFont.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground">
            <summary>
            CSS2 common color and background styles. (Color, backgroundColor..etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.Color">
            <summary>
            Style is a simple color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.BackgroundColor">
            <summary>
            Style is a background color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.BackgroundImage">
            <summary>
            Style is a background image.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.BackgroundRepeat">
            <summary>
            Style is a backgroud repeat.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.BackgroundAttachment">
            <summary>
            Style is a background attachment.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.BackgroundPosition">
            <summary>
            Style is a background position.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.Background">
            <summary>
            Style is a background.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleColorAndBackground.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText">
            <summary>
            CSS2 common text formatting (Wordspacing, letterspacing ...etc.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.WordSpacing">
            <summary>
            Style is word spacing.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.LetterSpacing">
            <summary>
            Style is letter spacing.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.WhiteSpace">
            <summary>
            Style is white space.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.TextTransform">
            <summary>
            Style is a text transform.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.TextAlign">
            <summary>
            Style is a text align.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.TextIndent">
            <summary>
            Style is a text indent.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.TextDecoration">
            <summary>
            Style is a text decoration.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.TextShadow">
            <summary>
            Style is a text shadow.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleText.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay">
            <summary>
            CSS2 common block formatting (Width, height...etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Width">
            <summary>
            Style is width
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Height">
            <summary>
            Style is height.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.LineHeight">
            <summary>
            Style is line height.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.VerticalAlign">
            <summary>
            Style is vercial alignment.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.MinWidth">
            <summary>
            Style is minimum width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.MaxWidth">
            <summary>
            Style is maximum width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.MinHeight">
            <summary>
            Style is minimum height.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.MaxHeight">
            <summary>
            Style is maximum height.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Display">
            <summary>
            Style is display.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Position">
            <summary>
            Style is position.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Top">
            <summary>
            Style is top.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Left">
            <summary>
            Style is left.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Bottom">
            <summary>
            Style is bottom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Right">
            <summary>
            Style is right.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.Float">
            <summary>
            Style is float.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.zIndex">
            <summary>
            Style is z index.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleDisplay.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox">
            <summary>
            CSS2 box formatting (Padding, margin..etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.MarginTop">
            <summary>
            Style is margin top
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.MarginRight">
            <summary>
            Style is margin right
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.MarginBottom">
            <summary>
            Style is margin bottom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.MarginLeft">
            <summary>
            Style is margin left.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.Margin">
            <summary>
            Style is margin.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.PaddingTop">
            <summary>
            Style is padding top.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.PaddingRight">
            <summary>
            Style is padding right.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.PaddingBottom">
            <summary>
            Style is padding bottom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.PaddingLeft">
            <summary>
            Style is padding left.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.Padding">
            <summary>
            Style is padding.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderTopWidth">
            <summary>
            Style is border top width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderRightWidth">
            <summary>
            Style is border right width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderBottomWidth">
            <summary>
            Style is border bottom width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderLeftWidth">
            <summary>
            Style is border left width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderWidth">
            <summary>
            Style is border width.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderTopColor">
            <summary>
            Style is border top color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderRightColor">
            <summary>
            Style is border right color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderBottomColor">
            <summary>
            Style is border bottom color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderLeftColor">
            <summary>
            Style is border left color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderColor">
            <summary>
            Style is border color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderStyle">
            <summary>
            Style is border style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderTopStyle">
            <summary>
            Style is border top style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderRightStyle">
            <summary>
            Style is border right style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderBottomStyle">
            <summary>
            Style is border bottom style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderLeftStyle">
            <summary>
            Style is border left style.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderTop">
            <summary>
            Style is border top.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderRight">
            <summary>
            Style is border right.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderBottom">
            <summary>
            Style is border bottom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.BorderLeft">
            <summary>
            Style is border left.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.Border">
            <summary>
            Style is border.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleBox.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList">
            <summary>
            CSS2 list styles (ListStyleType ...etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList.ListStyleType">
            <summary>
            Lists type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList.ListStyleImage">
            <summary>
            Lists image
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList.ListStylePosition">
            <summary>
            Lists position.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList.ListStyle">
            <summary>
            Lists style
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlStyleList.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlVisibility">
            <summary>
            CSS2 element visibility
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlVisibility.Visible">
            <summary>
            The control is visible.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlVisibility.Hidden">
            <summary>
            The control is hidden.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlVisibility.Collapsed">
            <summary>
            The control is collapsed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.HtmlVisibility.NotSet">
            <summary>
            Infrastructure use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlFind">
            <summary>
            Extends the generic Find methods to include HTML specific find objects.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlFind.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new Find object.
            </summary>
            <param name="rootElement"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlFind.Table(System.String)">
            <summary>
            Finds the first table that contains the cell text content specified. 
            </summary>
            <param name="textContent">The cell text content to find..</param>
            <returns>The HtmlTable that contains that text, else null</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlFind.TableRow(System.String)">
            <summary>
            Finds the first table row that contains the cell text content specified. 
            </summary>
            <param name="textContent">The text content.</param>
            <returns>The HtmlTableRow that contains that text, else null</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlFind.TableCell(System.String)">
            <summary>
            Finds the first table cell that contains the text content specified. If the text is contained
            by a control inside that table cell, this method will not find that cell.
            </summary>
            <param name="textContent">The text content.</param>
            <returns>The HtmlTableCell that contains that text, else null.</returns>
            
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword">
            <summary>
            Test class for an HtmlInputPassword element <![CDATA[ <input type="password" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.Text">
            <summary>
            Gets/Sets the value of the value attribute of a text field
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.Disabled">
            <summary>
            Gets whether or not a text field is disabled
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.TabIndex">
            <summary>
            Gets the tab order for a text field.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputPassword.Size">
            <summary>
            Gets the size of a text field (in number of characters).
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle">
            <summary>
            Represents a single HtmlStyle. This object can be used to help probe and do validation
            against Html styles. Has functionality to convert unit styles to int values and color styles to System.Drawing.Color.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle._name">
            <summary>
            Style name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle._value">
            <summary>
            Style value
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle._cachedIntValue">
            <summary>
            Cached int value
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle._cachedColor">
            <summary>
            Cached color value
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.#ctor(System.String,System.String)">
            <summary>
            Create a new HtmlStyle object.
            </summary>
            <param name="name">The name of the style.</param>
            <param name="value">The raw value of this style.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.Name">
            <summary>
            Gets the style name.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.Value">
            <summary>
            Gets the style value.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.ToColor">
            <summary>
            Attempts to parse the style value as a color and return a System.Drawing.Color
            object that corresponds to the color style value.
            </summary>
            <returns>The System.Drawing.Color object or Color.Empty if unable to parse the color.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.ToInt">
            <summary>
            Strips any style value from units (i.e. px/pt..etc) and returns the integer value.
            </summary>
            <returns>The integer value. If the unit has no integer value or is empty will return -1.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.IsColor">
            <summary>
            Whether the value of this style is a color value or not.
            </summary>
            <returns>True if style value is a color</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.IsInt">
            <summary>
            Whether the value of this style is an integer value or not.
            </summary>
            <returns>True if a value is an integer value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.IsSameColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Performs a simple color compare that only compares red/green/blue colors.
            Does not compare known color names or alpha blending.
            </summary>
            <remarks>Use this to compare colors instead of System.Color.Equals() to allow your compares
            to work across browsers. For example, IE returns colors as named colors (yellow, red ..etc) for
            computed styles where Mozilla always returns (rgb(x,y,z)). Using the HtmlStyle.ToColor and
            IsSameColor() can help abstract these differences and allow you to perform the compare across browsers.</remarks>
            <param name="colorA">Color A to compare</param>
            <param name="colorB">Color B to compare</param>
            <returns>True/False whether the two colors have identical RGB colors.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle.ToHtmlColor(System.Drawing.Color)">
            <summary>
            Translates a System.Drawing.Color to an Html color string.
            </summary>
            <param name="color">The System.Drawing.Color.</param>
            <returns>The html color string.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait">
            <summary>
            Extends the Wait object for specific HtmlWait scenarios.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.HtmlStyleWaitParams">
            <summary>
            Used to wait for a control
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait._control">
            <summary>
            The htmlControl target.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.#ctor(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,System.Int32)">
            <summary>
            Create a new wait class.
            </summary>
            <param name="htmlControl">The html control target</param>
            <param name="checkInterval">Interval to use to check on the wait condition. (msec)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForExists(System.Int32,System.Boolean)">
            <summary>
            Protected exists. [Control the control refresh]
            </summary>
            <param name="timeout"></param>
            <param name="refreshElement"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForVisible">
            <summary>
            Wait for an element to be visible. HtmlControl.IsVisible is true.
            (Timeout = HtmlWait.Timeout)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForVisible(System.Int32)">
            <summary>
            Wait for an element to be visible. HtmlControl.IsVisible is true.
            </summary>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForVisibleNot">
            <summary>
            Wait for an element to no longer be visible. HtmlControl.IsVisible is false.
            (Timeout = HtmlWait.Timeout)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForVisibleNot(System.Int32)">
            <summary>
            Wait for an element to no longer be visible. HtmlControl.IsVisible is false.
            </summary>
            <param name="timeout">The timeout to use</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStyles(System.String[])">
            <summary>
            Wait for a set of styles on this element. (Timeout = HtmlWait.Timeout)
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStyles(System.Boolean,System.String[])">
            <summary>
            Wait for a set of styles on this element. (Timeout = HtmlWait.Timeout)
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
            <param name="useComputedStyles">True/False whether to use the computed style for this wait.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStyles(System.Int32,System.String[])">
            <summary>
            Wait for a set of styles on this element. 
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="timeout">The timeout to use.</param>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStyles(System.Int32,System.Boolean,System.String[])">
            <summary>
            Wait for a set of styles on this element. 
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="timeout">The timeout to use.</param>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
            <param name="useComputedStyles">True/False whether to use the computed style for this wait.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStylesNot(System.String[])">
            <summary>
            Wait for a set of styles to no longer be true. (Timeout = HtmlWait.Timeout)
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStylesNot(System.Boolean,System.String[])">
            <summary>
            Wait for a set of styles to no longer be true. 
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="useComputedStyles">True/False whether to use the computed style for this wait.</param>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStylesNot(System.Int32,System.String[])">
            <summary>
            Wait for a set of styles to no longer be true. 
            </summary>
            <example>ForStyles("background-color=red","display=none")</example>
            <param name="timeout">The timeout to use.</param>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForStylesNot(System.Int32,System.Boolean,System.String[])">
            <summary>
            Wait for a set of styles to no longer be true. 
            </summary>
            <example>ForStyles("backgroundColor=red","display=none")</example>
            <param name="timeout">The timeout to use.</param>
            <param name="useComputedStyles">True/False whether to use the computed style for this wait.</param>
            <param name="stylesNameValuePairs">The styles name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.ForCondition(System.Func{ArtOfTest.WebAii.Controls.Control,System.Object,System.Boolean},System.Boolean,System.Object,System.Int32)">
            <summary>
            Wait for a custom condition on this control.
            </summary>
            <param name="condition">The condition to wait for.</param>
            <param name="invertCondition">True/False whether to invert the condition or not.</param>
            <param name="custom">Any custom data to pass to this condition.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.WaitForStylesInternal(System.Boolean,System.Int32,System.Boolean,System.String[])">
            <summary>
            Wait for styles internal
            </summary>
            <param name="invertCondition"></param>
            <param name="timeout"></param>
            <param name="useComputedStyles"></param>
            <param name="stylesNameValuePairs"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.WaitForVisibleCondition(ArtOfTest.WebAii.Controls.Control,System.Object)">
            <summary>
            Wait for visibility condition.
            </summary>
            <param name="control">The control to wait on.</param>
            <param name="custom">True to wait for visible. False to wait for not visible.</param>
            <returns>True/false indicating if current visible state matches wait for visible state.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.WaitForStylesCondition(ArtOfTest.WebAii.Controls.Control,System.Object)">
            <summary>
            Wait for styles condition.
            </summary>
            <param name="control">The control to wait on.</param>
            <param name="custom">The specific <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait.HtmlStyleWaitParams"/> to monitor.</param>
            <returns>True/False indicating if the current style matches or not.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.DownloadOption">
            <summary>
            Download options for a download from an html page.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.DownloadOption.Save">
            <summary>
            Save the downloaded file to a specific location on disk.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.DownloadOption.Cancel">
            <summary>
            Cancel the download dialog.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor">
            <summary>
            Test class for an HtmlAnchor element <![CDATA[ <a href="...">...</a> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign this control a base element. Performs any initialization for this control.
            </summary>
            <param name="e">The element to assign.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.HRef">
            <summary>
            Gets the URL of the linked resource.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.Name">
            <summary>
            Gets the name of a link.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.Target">
            <summary>
            Gets where to open a link.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAnchor.Title">
            <summary>
            The text displayed when the mouse pointer 
            is placed over the 
            System.Web.UI.HtmlControls.HtmlAnchor.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton">
            <summary>
            Test class for an HtmlButton element <![CDATA[ <button >...</button> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.Name">
            <summary>
            Gets the name of a button.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.Disabled">
            <summary>
            Gets whether a button is disabled.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.Value">
            <summary>
            Gets the text that is displayed on a button.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.TabIndex">
            <summary>
            Gets the tab order for a button.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlButton.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl">
            <summary>
            Base class for all container controls. Controls that are allowed to contain other Html elements.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.#ctor">
            <summary>
            Create a new HtmlContainerControl
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.TextContent">
            <summary>
            Gets the TextContent of this container control.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.InnerText">
            <summary>
            Gets the innerText of this container control.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl._htmlContainerMap">
            <summary>
            Html container control tag map.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlContainerControl.ContainerControlTagNameTypeMap">
            <summary>
            Gets the Html container control mapping with each control type.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions">
            <summary>
            Assert extensions for the HtmlControl class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions.AssertContent(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Assert methods based on the HtmlControl's content.
            </summary>
            <param name="control">The HtmlControl being tested.</param>
            <returns>An AssertContent object initializated to this HTML cotnrol.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions.AssertStyle(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Assert methods based on the HtmlControl's style.
            </summary>
            <param name="control">The HtmlControl being tested.</param>
            <returns>An AssertStyle object initializated to this HTML cotnrol.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions.AssertStyle(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,System.Boolean)">
            <summary>
            Assert methods based on the HtmlControl's style.
            </summary>
            <param name="control">The HtmlControl being tested.</param>
            <param name="throwOnFailure">Whether this assert object should throw an exception if the check fails</param>
            <returns>An AssertStyle object initializated to this HTML cotnrol.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions.AssertAttribute(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Assert methods based on the HtmlControl's attributes.
            </summary>
            <param name="control">The HtmlControl being tested.</param>
            <returns>An AssertAttribute object initializated to this HTML cotnrol.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControlsAssertExtensions.AssertAttribute(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,System.Boolean)">
            <summary>
            Assert methods based on the HtmlControl's attributes
            </summary>
            <param name="control">The HtmlControl being tested</param>
            <param name="throwOnFailure">Whether to throw an exception if the assertion fails</param>
            <returns>An AssertAttribute object initialized to this HTML control</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl">
            <summary>
            Base class for all HtmlControl's.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl._wait">
            <summary>
            Wait object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl._mappings">
            <summary>
            Mappings collection
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl._find">
            <summary>
            The HtmlFind object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Wrap the specified <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> into a new HtmlControl.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.#ctor">
            <summary>
            Create a new emptry HtmlControl.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Find">
            <summary>
            Find property
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ClientSideLocator">
            <summary>
            Gets the client-side locator for this HtmlControl. This property can be used
            to define a custom client side object that this HtmlControl maps to.
            GetValue/SetValue properties use that object to make their calls
            instead of the default one.
            </summary>
            <value>A string identifying the locator for this HtmlControl.</value>
            <example>(in ASP.NET) $find('myClientObject')</example>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollTop">
            <summary>
            Gets / Sets the scrollTop value of this HtmlControl.
            </summary>
            <value>An int specifying the scrollTop value for thos HtmlControl.</value>
            <seealso cref="P:System.Windows.Forms.HtmlElement.ScrollTop"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollLeft">
            <summary>
            Gets / Sets the scrollLeft value of this HtmlControl.
            </summary>
            <value>An int specifying the scrollLeft value.</value>
            <seealso cref="P:System.Windows.Forms.HtmlElement.ScrollLeft"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Wait">
            <summary>
            Gets the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait"/> object attached to this HtmlControl.
            </summary>
            <value>An HtmlWait object. null if no <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait"/> object is attached to this HtmlControl.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ID">
            <summary>
            This HtmlControl's ID.
            </summary>
            <value>A string specifying this HtmlControls ID. An empty string if not present for this HtmlControl.</value>
            <seealso cref="P:System.Windows.Forms.HtmlElement.Id"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.CssClass">
            <summary>
            This HtmlControl's CSS class name.
            </summary>
            <value>A string specifying this HtmlControl's CSS class name. An empty string if not present
            for this HtmlControl</value>
            <remarks>See also http://msdn.microsoft.com/en-us/library/ms533560(VS.85).aspx</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Attributes">
            <summary>
            All attributes defined for this HtmlControl.
            </summary>
            <value>A ReadOnlyCollection&lt;<see cref="T:ArtOfTest.WebAii.ObjectModel.iAttribute"/>&gt; of the attributes
            defined for this HtmlControl.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Mappings">
            <summary>
            Gets a mappings collection that stores customizable control specific
            mapping knowledge that can be later customized.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Styles">
            <summary>
            Styles collection set on this HtmlControl and persisted in the Html stream.
            This collection does not contain computed styles.
            </summary>
            <value>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing a list of styles defined on this HtmlControl.
            An empty list is returned if there are no styles defined.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Events">
            <summary>
            The list of events defined on this HtmlControl
            </summary>
            <value>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> containing a list of events defined on this HtmlControl.
            An empty list is returned if there are no styles defined.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.TagName">
            <summary>
            The tag name of this HtmlControl.
            </summary>
            <value>A string specifying the tag identification of this HtmlControl.</value>
            <seealso cref="P:System.Windows.Forms.HtmlElement.TagName"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ChildNodes">
            <summary>
            Get all the child element nodes of this HtmlControl.
            </summary>
            <value>A ReadOnlyCollection of the child <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/>'s of this HtmlControl.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.IsActiveElement">
            <summary>
            Gets whether this element has the keyboard focus
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.IsEnabled">
            <summary>
            Gets / sets whether this control is enabled (not disabled)
            </summary>
            <remarks>Only applies to input controls</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.FindParentContainer``1">
            <summary>
            Traverses the DOM tree upwards until it finds the container element desired.
            </summary>
            <returns>The container element or element null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ValidateTag(System.String)">
            <summary>
            Validate a tag name
            </summary>
            <param name="tagName">The tagName to verify.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ValidateControl">
            <summary>
            Validate a HtmlControl using its LocatorExpression.
            </summary>
            <returns>true of the control validated successfully. Otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the control does not match its FindExpression.</exception>
            <remarks>ValidateControl uses LocatorExpression if both LocatorExpression and Locator are defined, and uses
            Locator only if LocatorExpression is not defined.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetAttributeAsString(System.String)">
            <summary>
            Get an attribute of this element as a string
            </summary>
            <param name="attributeName">The attribute name to get.</param>
            <returns>The value of the attribute or a string.empty if the attribute is not available.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Attach the specified <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> to this HtmlControl and initialize its internal properties.
            </summary>
            <param name="e">The base <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> to attach to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.InitializeMappings(ArtOfTest.WebAii.Core.MappingsCollection)">
            <summary>
            Initialize the Mappings collection.
            This method is called when the Mappings collection is accessed for the first time.
            It is then cached
            </summary>
            <param name="mappings">The mappings collection to populate</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetRectangle">
            <summary>
            The absolute screen position and size of this HtmlControl.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> identifying the coordinates of the upper left coner and the width
            and height of this HtmlControl.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.IsVisible">
            <summary>
            Returns whether the html element is visible or not.
            Returns true only when <![CDATA[ computedStyle.display != 'none' && computedStyle.visibility != 'hidden' ]]>
            </summary>
            <returns>True/False indicating whether or not this HtmlControl is currently visible on the page.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetStyleValue(System.String)">
            <summary>
            Returns any style as if you are accessing the element.style object from JavaScript.
            </summary>
            <param name="style">A string specifying the style to access. (e.g. backgroundColor, border)</param>
            <returns>The string value of the requested style.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetStyle(System.String)">
            <summary>
            Returns a HtmlStyle object that can be used to easily
            probe the style value. (i.e. convert unit styles to Int32 or color value to System.Drawing.Color)
            </summary>
            <param name="style">A string specifying the style to access. (e.g. backgroundColor, border)</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle"/> object that defines this style.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetComputedStyleValue(System.String)">
            <summary>
            Returns the computed value of the specified style.
            The computed style value represents the final computed value taking into account the CSS properties for this HtmlElement.
            </summary>
            <param name="style">The style to access. (e.g. backgroundColor, left, border)</param>
            <returns>The string value of the requested computed style.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetComputedStyle(System.String)">
            <summary>
            Returns an <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle"/> object that can be used to easily
            probe the style value. (i.e. convert unit styles to Int32 or color value to System.Drawing.Color)
            </summary>
            <param name="style">The style to access. (e.g. backgroundColor, left, border)</param>
            <returns>The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlStyle"/> object that defines this style.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Parent``1">
            <summary>
            Return the parent HtmlContainerControl of the desired type that this HtmlControl is contained inside of.
            If a parent HtmlControl of the desired type is not found, will return null.
            </summary>
            <typeparam name="TContainerControl">The desired parent container HtmlControl type to find and return.</typeparam>
            <returns>The parent container HtmlControl or null if desired type is not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Capture">
            <summary>
            Captures and returns a bitmap image of this HtmlControl.
            </summary>
            <returns><see cref="T:System.Drawing.Bitmap"/> of this HtmlControl.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Capture(System.String,System.String)">
            <summary>
            Captures and saves this HtmlControl's image to the specified save path as the specified file name
            as a <see cref="T:System.Drawing.Bitmap">BMP</see> file.
            </summary>
            <param name="savePath">Directory path to write the file to.</param>
            <param name="imageName">The image file name (without extension) to create and write to.</param>
            <seealso cref="T:System.Drawing.Bitmap"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Capture(System.String)">
            <summary>
            Captures and saves this HtmlControl's image to the WebAii log location as a <seealso cref="T:System.Drawing.Bitmap">BMP</seealso> file.
            </summary>
            <param name="imageName">The image file name (without extension) to create and write to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.InvokeEvent(ArtOfTest.WebAii.Core.ScriptEventType)">
            <summary>
            Invokes an event on this HtmlControl.
            </summary>
            <param name="eventType">The <see cref="T:ArtOfTest.WebAii.Core.ScriptEventType"/> to invoke.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.InvokeEvent(ArtOfTest.WebAii.Javascript.ScriptEvent)">
            <summary>
            Invokes an event on this HtmlControl.
            </summary>
            <param name="eventObj">An object representing the event to invoke</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.InvokeEvent(ArtOfTest.WebAii.Javascript.ScriptEvent,System.Boolean)">
            <summary>
            Invokes an event on this HtmlControl.
            </summary>
            <param name="eventObj">An object representing the event to invoke</param>
            <param name="closesBrowser">If set, we won't wait for the browser to be ready. If not set it acts the same as HtmlControl.InvokeEvent(eventObj).</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.AddEventListener(System.String,System.EventHandler{ArtOfTest.WebAii.Javascript.JavascriptEventArgs})">
            <summary>
            Add an event handler to a Javascript event handler list on this HtmlControl.
            </summary>
            <param name="eventType">The event type to add the handler to.</param>
            <param name="listener">The event handler to add.</param>
            <returns>True/False indicating whether or not the event handler was successfully added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.RemoveEventListener(System.String,System.EventHandler{ArtOfTest.WebAii.Javascript.JavascriptEventArgs})">
            <summary>
            Removes an event handler from a Javascript event handler list on this HtmlControl.
            </summary>
            <param name="eventType">The event type to be remove the event handler from.</param>
            <param name="listener">The event handler to remove.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseClick">
            <summary>
            Uses the Desktop.Mouse object to move the mouse to this HtmlControl and click it.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseClick(ArtOfTest.WebAii.Core.MouseClickType)">
            <summary>
            Uses the Desktop.Mouse object to move the mouse to the absolute center of this HtmlControl and simulate a left mouse click.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="clicktType">Mouse Click Type</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseClick(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32)">
            <summary>
            Uses the Desktop.Mouse object to move the mouse to a point relative to this HtmlControl and simulate the specified mouse click.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="clickType">One of the <see cref="T:ArtOfTest.WebAii.Core.MouseClickType"/> types</param>
            <param name="x">The X offset relative to the left edge of the control to click. May be negative.</param>
            <param name="y">The Y offset relative to the top side of the control to click. May be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseClick(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Uses the Desktop.Mouse object to move the mouse to a point relative to this HtmlControl and simulate the specified mouse click.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="clickType">One of the MouseClickType types.</param>
            <param name="reference">Which point on the HtmlControl is used as the reference point.</param>
            <param name="offset">A point relative to the reference specified to click. The x and/or y values may be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseClick(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Uses the Desktop.Mouse object to move the mouse to a point relative to this HtmlControl and simulate the specified mouse click.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="clickType">One of the MouseClickType types.</param>
            <param name="reference">Which point on the HtmlControl is used as the reference point.</param>
            <param name="Xoffset">The X offset relative to the specified reference to click. May be negative.</param>
            <param name="Yoffset">The Y offset relative to the specified reference to click. May be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseHover">
            <summary>
            Uses the Desktop.Mouse object to Hover over this absolute center of this HtmlControl.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseHover(System.Drawing.Point)">
            <summary>
            Uses the Desktop.Mouse object to Hover over a point relative to this HtmlControl.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="pointToHoverOver">Point relative to the upper left corner of this HtmlControl to hover. X and/or Y value may be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseHover(System.Int32,System.Int32)">
            <summary>
            Uses the Desktop.Mouse object to Hover over a point relative to this HtmlControl.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="x">The X offset relative to the left edge of the control to hover over. May be negative.</param>
            <param name="y">The Y offset relative to the top edge of the control to hover over. May be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.MouseHover(System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Uses the Desktop.Mouse object to Hover over a point relative to this HtmlControl.
            Be sure this HtmlControl is visible in the browser window first. Call <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)"/> or
            <see cref="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)"/>first if the element could be currently outside of the browsers window.
            </summary>
            <param name="reference">Which point on the HtmlControl is used as the reference point.</param>
            <param name="x">The X offset relative to the specified reference to hover over. May be negative.</param>
            <param name="y">The Y offset relative to the specified reference to hover over. May be negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Click">
            <summary>
            Invoke a click on this HtmlControl.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Click(System.Boolean)">
            <summary>
            Invoke a click on this HtmlControl that will cause its browser window to close (this is common for html pop-ups).
            </summary>
            <param name="isClosing">If set, we won't wait for the browser to be ready. If not set it acts the same as HtmlControl.Click().</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible">
            <summary>
            Scroll the browsers window to make this HtmlControl visible on the page.
            This will method uses the ScrollToVisibleType.ElementTopAtWindowTop 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)">
            <summary>
            Scroll the browsers window to make this HtmlControl visible on the page.
            </summary>
            <param name="scrollToVisibleType">How the HtmlControl should be aligned on the page</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)">
            <summary>
            Scroll the browsers window so that the specified rectangle within this HtmlControl is visible on the page.
            </summary>
            <param name="scrollToVisibleType">How the HtmlControl should be aligned on the page.</param>
            <param name="rectangle">The rectangular portion of the HtmlControl that we want to make sure is visible on the page.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Download(System.Boolean,ArtOfTest.WebAii.Controls.HtmlControls.DownloadOption,System.String,System.Int32)">
            <summary>
            Clicks a control using the MouseClick or Click and handles the download dialogs
            sequence that is produced.
            </summary>
            <param name="clickUsingDesktopMouse">When set to True Desktop Mouse.Click will be used.
            Make sure the HtmlControl is visible in the browsers window first before using Desktop Mouse.Click.
            When set to False HtmlControl.Click will be used.</param>
            <param name="downloadOption">The download option to use (Save or Cancel).</param>
            <param name="saveLocation">The save location on disk when the download option is set to Save.</param>
            <param name="downloadTimeout">The number of milliseconds to wait until all download dialogs are handled.</param>
            <exception cref="T:System.TimeoutException">Timed out waiting for the download dialogs to be handled.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.CallMethod(System.String)">
            <summary>
            Call a client side Javascript method on this HtmlControl.
            </summary>
            <param name="methodCall">The method call.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.CallMethod``1(System.String)">
            <summary>
            Call a client side Javascript method on this HtmlControl and return type T.
            </summary>
            <typeparam name="T">The type to convert the return value of the method call to.</typeparam>
            <param name="methodCall">The method call string.</param>
            <returns>The return value from the methoc call, if any</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.CallMethod``1(System.String,``0)">
            <summary>
            Call a client side Javascript method on this HtmlControl with return type of T and a default return value.
            </summary>
            <typeparam name="T">The type to convert the return value of the method call to.</typeparam>
            <param name="methodCall">The method call string.</param>
            <param name="defaultValue">A default value to use in case the conversion failed to the specified type and you want to return a custom
            default value other than default(T).</param>
            <returns>The return value of the call or the default value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetValue``1(System.String)">
            <summary>
            Get a property value (e.g. control.border or control.style.backgroundColor).
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The value of the property or default(T) if the value of the property cannot be retrieved or converted to type T.</returns>
            <example><c>string s = myControl.GetValue&lt;string&gt;("style.backgroundColor")</c></example>
            <remarks>The property is retrieved by executing Javascript on the client side using the specified
            property name as the Javascript function.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetValue``1(System.String,``0)">
            <summary>
            Get a property value (e.g. control.border or control.style.backgroundColor) and return the specified default value if the get fails for any reason.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="defaultValue">A default value to use in case the conversion failed to the specified type and you want to return a custom
            default value other than default(T).</param>
            <returns>The value of the property or defaultValue if the property value cannot be retrieved or converted.</returns>
            <example><c>string s = myControl.GetValue&lt;string&gt;("style.backgroundColor", "White")</c></example>
            <remarks>The property is retrieved by executing Javascript on the client side using the specified
            property name as the Javascript function.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetValue``1(System.String,System.Boolean)">
            <summary>
            Get a property value (e.g. control.border or control.style.backgroundColor) with ability to specify wrappedJSObject's in Firefox.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="isJsWrappedObject">Only applies to Firefox browser. Set to true to indicate this HtmlControl is a wrappedJSObject.</param>
            <returns>The value of the property.</returns>
            <example><c>string s = myControl.GetValue&lt;string&gt;("style.backgroundColor", true)</c></example>
            <remarks>The property is retrieved by executing Javascript on the client side using the specified
            property name as the Javascript function.</remarks>
            <remarks>See https://developer.mozilla.org/en/wrappedJSObject for more information about wrappedJSObject.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.GetValue``1(System.String,System.Boolean,``0)">
            <summary>
            Get a property value (e.g. control.border or control.style.backgroundColor) with ability to specify wrappedJSObject's in Firefox and return the specified default value if the get fails for any reason.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="isJsWrappedObject">Only applies to Firefox browser. Set to true to indicate this HtmlControl is a wrappedJSObject.</param>
            <param name="defaultValue">The return value, if the property has no value (is null or the empty string)</param>
            <returns>The value of the property.</returns>
            <example><c>string s = myControl.GetValue&lt;string&gt;("style.backgroundColor", true, "White")</c></example>
            <remarks>The property is retrieved by executing Javascript on the client side using the specified
            property name as the Javascript function.</remarks>
            <remarks>See https://developer.mozilla.org/en/wrappedJSObject for more information about wrappedJSObject.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.SetValue``1(System.String,``0)">
            <summary>
            Set a property value. (e.g. control.border = 2 or control.style.backgroundColor = "red")
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The value to set.</param>
            <example><c>myControl.SetValue$lt;string&gt;("style.backgroundColor","red")</c></example>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.SetValue``1(System.String,``0,System.Boolean)">
            <summary>
            Set a property value. (e.g. control.border = 2 or control.style.backgroundColor = "red")
            <![CDATA[ myControl.SetValue<string>("style.backgroundColor","red") ]]>
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The value to set.</param>
            <param name="isJsWrappedObject">Whether the property is a JsWrappedObject. Specific to Firefox.</param>
            <example><![CDATA[ myControl.SetValue<string>("style.backgroundColor","red") ]]></example>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.Focus">
            <summary>
            Give this Html element focus.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.Common.OffsetReference,System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Drag this HtmlControl from a source offset to an X/Y offset from the source.
            </summary>
            <param name="sourceOffsetReference">The source offset reference.</param>
            <param name="sourceOffset">The source offset.</param>
            <param name="destinationOffsetX">The destination X offset relative to the source.</param>
            <param name="destinationOffsetY">The destination Y offset relative to the source.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.Common.OffsetReference,System.Int32,System.Int32,System.Drawing.Rectangle,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32)">
            <summary>
            Drag this HtmlControl from a source offset to an X/Y offset from the source.
            </summary>
            <param name="sourceOffsetReference">The source offset reference.</param>
            <param name="sourceOffsetX">The X offset from the source. May be positive or negative.</param>
            <param name="sourceOffsetY">The Y offset from the source. May be positive or negative.</param>
            <param name="destinationRectangle"></param>
            <param name="destinationOffsetReference">The destination rectangle reference.</param>
            <param name="destinationOffsetX">The X offset from the destination.</param>
            <param name="destinationOffsetY">The Y offset from the destination.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(System.Drawing.Point)">
            <summary>
            Drag this HtmlControl to an absolute screen coordinate point.
            </summary>
            <param name="absolutePoint">The absolute screen coordinate point.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(System.Int32,System.Int32)">
            <summary>
            Drag this HtmlControl to a relative X/Y offset.
            </summary>
            <param name="offsetX">The X offset. May be positive or negative.</param>
            <param name="offsetY">The Y offset. May be positive or negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Drag this HtmlControl to the center on the destination HtmlControl.
            </summary>
            <param name="control">The destination HtmlControl</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,ArtOfTest.Common.OffsetReference,System.Drawing.Point)">
            <summary>
            Drag to a destination HtmlControl with an offset of where within the destination HtmlControl to drag to.
            </summary>
            <param name="control">The destination HtmlControl.</param>
            <param name="destinationOffsetReference">The destination offset reference.</param>
            <param name="destinationOffset">The offset amount from destination reference. May be positive or negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.Common.OffsetReference,System.Drawing.Point,ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Drag this HtmlControl by specifying a reference point on the HtmlControl rectangle to start the
            drag from with an offset and drop on the destination HtmlControl center.
            </summary>
            <param name="sourceOffsetReference">The source offset reference of the drag start.</param>
            <param name="sourceOffset">The offset from the specified source reference. May be positive or negative.</param>
            <param name="destination">The destination HtmlControl.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.Common.OffsetReference,System.Drawing.Point,ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,ArtOfTest.Common.OffsetReference,System.Drawing.Point)">
            <summary>
            Drag this HtmlControl by specifying a reference point on the HtmlControl rectangle to start the drag from
            and a reference point on the destination HtmlControl to specify the drop location.
            </summary>
            <param name="sourceOffsetReference">The source offset reference of the drag start.</param>
            <param name="sourceOffset">The offset from the specified spirce reference. May be positive or negative.</param>
            <param name="destination">The destination HtmlControl.</param>
            <param name="destinationOffsetReference">The destination offset reference of the drop.</param>
            <param name="destinationOffset">The offset from the specified destination reference. May be positive or negative.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragTo(ArtOfTest.Common.OffsetReference,System.Int32,System.Int32,System.Boolean,ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drag this HtmlControl by specifying a reference point on the HtmlControl rectangle to start the drag from
            and a reference point on the destination HtmlControl to specify the drop location.
            </summary>
            <param name="sourceOffsetReference">The source offset reference of the drag start.</param>
            <param name="sourceOffsetX">The offset X from the specified source reference. May be positive or negative.</param>
            <param name="sourceOffsetY">The offset Y from the specified source reference. May be positive or negative.</param>
            <param name="sourcePixelDrag">If True, will use the sourceOffsetX and sourceOffsetY as the pixel drop point, if false will use sourceOffsetX and sourceOffsetY as a percentage for calculating the drop point.</param>
            <param name="destination">The destination HtmlControl.</param>
            <param name="destinationOffsetReference">The destination offset reference of the drop.</param>
            <param name="destinationOffsetX">The offset X from the specified destination reference. May be positive or negative.</param>
            <param name="destinationOffsetY">The offset Y from the specified destination reference. May be positive or negative.</param>
            <param name="pixelDrop">If True, will use the windowOffsetX and windowOffsetY as the pixel drop point, if false will use windowOffsetX and windowOffsetY as a percentage for calculating the drop point.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.DragToWindowLocation(ArtOfTest.Common.OffsetReference,System.Int32,System.Int32,System.Boolean,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Drag this HtmlControl, using the browser window as the drop target
            </summary>
            <param name="sourceOffsetReference">The source offset reference of the drag start.</param>
            <param name="sourceOffsetX">The offset X from the specified source reference. May be positive or negative.</param>
            <param name="sourceOffsetY">The offset Y from the specified source reference. May be positive or negative.</param>
            <param name="sourcePixelDrag">If True, will use the sourceOffsetX and sourceOffsetY as the pixel drop point, if false will use sourceOffsetX and sourceOffsetY as a percentage for calculating the drop point.</param>
            <param name="windowOffset">The destination offest reference of the drag destination.</param>
            <param name="windowOffsetX">The offset X from the specified destination reference. May be positive or negative.</param>
            <param name="windowOffsetY">The offset Y from the specified destination reference. May be positive or negative.</param>
            <param name="pixelDrop">If True, will use the windowOffsetX and windowOffsetY as the pixel drop point, if false will use windowOffsetX and windowOffsetY as a percentage for calculating the drop point.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.ToString">
            <summary>
            Builds and returns a string representation of this element.
            </summary>
            <returns>A string representation of this element.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl.AsjQueryControl">
            <summary>
            Conver this HtmlControl to jQueryControl.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDiv">
            <summary>
            Test class for an HtmlDiv element <![CDATA[ <div>...</div> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDiv.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new test control
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDiv.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlDiv.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm">
            <summary>
            Test class for an HtmlForm element <![CDATA[ <form >...</form> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.EncType">
            <summary>
            Gets the MIME type used to encode the content of a form.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.Length">
            <summary>
            Gets the number of elements in a form.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.Target">
            <summary>
            Gets where to open the action-URL in a form.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.Name">
            <summary>
            Gets the name of a form.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.AutofocusInput">
            <summary>
            Gets the autofocus input control of this form
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlForm.NoValidate">
            <summary>
            Gets or sets whether the form uses the browser to validate its inputs
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage">
            <summary>
            Test class for an HtmlImage element <![CDATA[ <img src="..." /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Align">
            <summary>
            A string that specifies the alignment of 
            the image relative to other Web page elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Alt">
            <summary>
            A string that contains the alternative 
            caption for the browser to use when 
            the image is unavailable.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Border">
            <summary>
            Specifies the width of the border around an image.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Src">
            <summary>
            A string that contains the URL to the
            image to display.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.Width">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlImage.IsLoaded">
            <summary>
            Checks to see if the image has finished loading on the page or not.
            </summary>
            <returns>Returns true/false indicating if the image successfully loaded or not on the page.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputButton">
            <summary>
            Test class for an HtmlInputButton element <![CDATA[ <input type="button" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputButton.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputButton.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputButton.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBoxExtensions">
            <summary>
            Assert extensions for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox"/> class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBoxExtensions.AssertCheck(ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox"/> control.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox"/> to wrap.</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox">
            <summary>
            Test class for an HtmlInputCheckBox element <![CDATA[ <input type="checkbox" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputCheckBox.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl">
            <summary>
            Base class for all input controls
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.#ctor">
            <summary>
            Create a new test control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Type">
            <summary>
            Input control type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Name">
            <summary>
            Gets the name attribute for control
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Value">
            <summary>
            Gets or sets the value attribute for control
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Placeholder">
            <summary>
            Gets the placeholder text for the control
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Autofocus">
            <summary>
            Gets whether this element is the autofocus input for the form containing it
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.Required">
            <summary>
            Gets whether this input must be filled in for the form to validate
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.ValidateType(ArtOfTest.WebAii.ObjectModel.InputElementType)">
            <summary>
            Validates the type of the input control.
            </summary>
            <param name="inputElementType">InputElementType Enum</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputControl.GetControlType(ArtOfTest.WebAii.ObjectModel.InputElementType)">
            <summary>
            Determines the framework control type according to the input element type.
            </summary>
            <param name="type">The input element type to look for.</param>
            <returns>The corresponding framework control type.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile">
            <summary>
            Test class for an HtmlInputFile element <![CDATA[ <input type="file" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile.Upload(System.String,System.Int32)">
            <summary>
            Upload a file.
            </summary>
            <param name="filePath">The full path to file to upload.</param>
            <param name="uploadTimeout">The timeout to wait until upload is complete.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputFile.FilePath">
            <summary>
            Gets or sets the Path for the control
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputHidden">
            <summary>
            Test class for an HtmlInputHidden element <![CDATA[ <input type="hidden" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputHidden.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputHidden.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputHidden.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage">
            <summary>
            Test class for an HtmlInputImage element <![CDATA[ <input type="image" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Align">
            <summary>
            A string that specifies the alignment of 
            the image relative to other Web page elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Alt">
            <summary>
            A string that contains the alternative 
            caption for the browser to use when 
            the image is unavailable.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Border">
            <summary>
            The width (in pixels) of a frame for an image.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Height">
            <summary>
            The height of the image.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Src">
            <summary>
            A string that contains the path to an 
            image file to display.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputImage.Width">
            <summary>
            The width of the image.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButtonExtensions">
            <summary>
            Assert extensions for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton"/> class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButtonExtensions.AssertCheck(ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton"/> control.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton"/> to wrap.</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton">
            <summary>
            Test class for an HtmlInputRadioButton element <![CDATA[ <input type="radio" /> ]]>
            </summary>  
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputRadioButton.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputReset">
            <summary>
            Test class for an HtmlInputImage element <![CDATA[ <input type="reset" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputReset.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputReset.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputReset.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSubmit">
            <summary>
            Test class for an HtmlInputImage element <![CDATA[ <input type="reset" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSubmit.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSubmit.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputSubmit.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText">
            <summary>
            Test class for an HtmlInputImage element <![CDATA[ <input type="text" /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.Text">
            <summary>
            Gets/Sets the value of the value attribute of a text field
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.Disabled">
            <summary>
            Gets whether or not a text field is disabled
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.TabIndex">
            <summary>
            Gets the tab order for a text field.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlInputText.Size">
            <summary>
            Gets the size of a text field (in number of characters).
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption">
            <summary>
            Test class for an HtmlOption element <![CDATA[ <option ... /> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.Text">
            <summary>
            Return the Text that is set for this option.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.Value">
            <summary>
            Gets the value that is set for this option.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption.Selected">
            <summary>
            Gets or sets this options selection.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelectAssertExtensions">
            <summary>
            Assert extensions for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelectAssertExtensions.AssertSelect(ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> content.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> to wrap.</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelectAssertExtensions.AssertSelect(ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect,System.Boolean)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> content.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> to wrap.</param>
            <param name="throwOnFailure">Whether this object should throw an exception if checks fail</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWaitExtensions">
            <summary>
            Class to extend the legacy HtmlWait. Adds ForSelectedIndex and ForSelectedValue methods.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWaitExtensions.ForSelectedIndex(ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait,System.Int32,System.Int32)">
            <summary>
            Wait for a specific selected index of the drop down.
            </summary>
            <param name="wait">The wait object.</param>
            <param name="index">The selection index to wait for.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlWaitExtensions.ForSelectedValue(ArtOfTest.WebAii.Controls.HtmlControls.HtmlWait,System.String,System.Int32)">
            <summary>
            Wait for a specific selected value of the drop down.
            </summary>
            <param name="wait">The wait object.</param>
            <param name="value">The selection value to wait for.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect">
            <summary>
            Test class for an HtmlSelect element <![CDATA[ <select>...</select> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.GetOptions">
            <summary>
            Gets the options within this Select tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectedOption">
            <summary>
            Gets the HtmlOption that is currently selected.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectedIndex">
            <summary>
            Gets the selected index.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.Item(System.Int32)">
            <summary>
            Gets Html Option by its index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The html option.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.Options">
            <summary>
            Gets the List of Options.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.MultiSelect(ArtOfTest.WebAii.Controls.HtmlControls.HtmlOption[])">
            <summary>
            Multi select a set of options on the select drop down. You can also set the .Selected value on any HtmlOption.
            </summary>
            <param name="options">The list of options to select. These can be accessed fro the Options[] collection.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.MultiSelectByIndex(System.Int32[])">
            <summary>
            Multi select a set of options by passing in the indexes of these options.
            </summary>
            <param name="indexes">The indexes to select</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.MultiSelectByText(System.String[])">
            <summary>
            Multi select a set of options by passing in the text of these options.
            </summary>
            <param name="textStrings">The array of strings option texts to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.MultiSelectByValue(System.String[])">
            <summary>
            Mutli select a set of options by passing in the values of these options to select.
            </summary>
            <param name="values">The arrary of value of options to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByIndex(System.Int32)">
            <summary>
            Select a option by index.
            </summary>
            <param name="index">Index to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByIndex(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Select ption by Index.
            </summary>
            <param name="index">Index to select.</param>
            <param name="invokeOnChangeEvent">Whether to invoke the OnChange event.</param>
            <param name="initEvent">Whether to try to invoke selection changed using the initEvent JS function</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByText(System.String)">
            <summary>
            Select a option by text.
            </summary>
            <param name="text">Text of the option to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByPartialText(System.String,System.Boolean)">
            <summary>
            Select an option by partial text.
            </summary>
            <param name="partialText">The partial text to look for.</param>
            <param name="invokeOnChangeEvent">Whether to invoke the onchange event.</param>
            <exception cref="T:System.ArgumentException">Thrown when an option containing the partial text was not found.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Select Option by Text.
            </summary>
            <param name="text">Text of the option to select.</param>
            <param name="invokeOnChangeEvent">Whether to invoke the OnChange event.</param>
            <param name="initEvent">Whether to try to invoke selection changed using the initEvent JS function</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByValue(System.String)">
            <summary>
            Select Option by Value.
            </summary>
            <param name="value">Value of option to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByPartialValue(System.String,System.Boolean)">
            <summary>
            Select an option by partial value.
            </summary>
            <param name="partialValue">The partial text to look for.</param>
            <param name="invokeOnChangeEvent">Whether to invoke the onchange event.</param>
            <exception cref="T:System.ArgumentException">Thrown when an option containing the partial value was not found.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSelect.SelectByValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Select Option by Value.
            </summary>
            <param name="value">Value of option to select.</param>
            <param name="invokeOnChangeEvent">Whether to invoke the onchange event.</param>
            <param name="initEvent">Whether to try to invoke selection changed using the initEvent JS function</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSpan">
            <summary>
            Test class for an HtmlSpan element <![CDATA[ <span>...</span> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSpan.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSpan.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlSpan.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableAssertExtensions">
            <summary>
            Assert extensions for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableAssertExtensions.AssertTable(ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> content.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> control to wrap.</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableAssertExtensions.AssertTable(ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable,System.Boolean)">
            <summary>
            Assert methods for the <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> content.
            </summary>
            <param name="control">The <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> control to wrap.</param>
            <param name="throwOnFailure">Whether the assert object should throw an exception if checks fail</param>
            <returns>A <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable"/> wrapped in a <see cref="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.AssertCheck"/> object.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable">
            <summary>
            Test class for an HtmlTable element <![CDATA[ <table>...</table> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.Border">
            <summary>
            Gets the width of the table border.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.Caption">
            <summary>
            Gets the caption of a table.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.CellPadding">
            <summary>
            Gets the amount of space between the cell border and cell content
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.CellSpacing">
            <summary>
            Gets the amount of space between the cells in a table.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.Width">
            <summary>
            Gets the width of a table.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.Item(System.Int32)">
            <summary>
            Gets requested row by index.
            </summary>
            <param name="index">row index</param>
            <returns>The requested row.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.BodyRows">
            <summary>
            Gets the rows contained in the body of the table
            if the table is using the tbody tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.HeadRows">
            <summary>
            Gets the rows contained in the table header if
            the table is using the thead tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.FootRows">
            <summary>
            Gets the rows contained in the table footer
            if the table is using the tfoot tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.Rows">
            <summary>
            Return List of HtmlTableRows. Only the body rows if TBody is used.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.AllRows">
            <summary>
            Gets all rows as one collection.
            (Head rows, then body rows and then footer rows)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.ColumnCount">
            <summary>
            Gets the number of columns in this table
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.GetRows">
            <summary>
            Gets all rows in the table.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTable.BuildRows(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Creates the list of rows contained within this table.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell">
            <summary>
            Test class for an HtmlTableCell element <![CDATA[ <td>...</td> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.Align">
            <summary>
            Gets the horizontal alignment of data within a table cell.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.CellIndex">
            <summary>
            Gets the position of a cell in the cells collection of a row
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.ColSpan">
            <summary>
            Gets the number of columns a table cell should span
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.RowSpan">
            <summary>
            Gets the number of rows a table cell should span.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.Height">
            <summary>
            Gets the height of a table cell.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.VAlign">
            <summary>
            Gets the vertical alignment of data within a table cell.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableCell.Width">
            <summary>
            Gets the width of a table cell.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow">
            <summary>
            Test class for an HtmlTableRow element <![CDATA[ <tr>...</tr> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.Align">
            <summary>
            Gets the horizontal alignment of data within a table row.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.RowIndex">
            <summary>
            Gets the position of a row in the table's rows collection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.Item(System.Int32)">
            <summary>
            Return cell by its index in this row.
            </summary>
            <param name="index">The cell index.</param>
            <returns>The cell at desired index.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.Cells">
            <summary>
            Return list of HtmlTableCells.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTableRow.GetCells">
            <summary>
            Creates list of Cells within this Row
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea">
            <summary>
            Test class for an HtmlAnchor element <![CDATA[ <textarea>...</textarea> ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new control.
            </summary>
            <param name="element">The base element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.#ctor">
            <summary>
            Create a new control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign element and initialize this control.
            </summary>
            <param name="e">The base element.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.Rows">
            <summary>
            Gets the number of rows set. If none, returns -1.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.Cols">
            <summary>
            Gets the number of columns set. If none, returns -1
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.HtmlControls.HtmlTextArea.Text">
            <summary>
            Gets or sets the value of the Text Area
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ICalendarDayButton">
            <summary>
            Represents interface for the Xaml CalendarDayButton control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ICalendarButton">
            <summary>
            Represents interface for the Xaml CalendarButton control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITabItem">
            <summary>
            Represents interface for the Xaml TabItem control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IRadioButton">
            <summary>
            Represents interface for the Xaml RadioButton control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ICheckBox">
            <summary>
            Represents interface for the Xaml CheckBox control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IRichTextBox">
            <summary>
            Represents interface for the Xaml RichTextBox control wrapper.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IRangeBase">
            <summary>
            Represents the Xaml RangeBase control wrapper interface.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IRangeBase.Minimum">
            <summary>
            Get/set the minimum value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IRangeBase.Maximum">
            <summary>
            Get/set the maximum value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IRangeBase.SmallChange">
            <summary>
            Get/set the small change value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IRangeBase.LargeChange">
            <summary>
            Get/set the large change value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IRangeBase.Value">
            <summary>
            Get/set the control value.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IAutoCompleteBox">
            <summary>
            Represents interface for the Xaml AutoCompleteBox control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IAutoCompleteBox.Selector">
            <summary>
            Get the drop down list box element holding the items to select.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IAutoCompleteBox.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the AutoCompleteBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IAutoCompleteBox.Select(System.Boolean,System.String)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IAutoCompleteBox.Select(System.Boolean,System.Int32)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The index of the item to select.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITreeView">
            <summary>
            Represents interface for the Xaml TreeView control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeView.RootItems">
            <summary>
            Get the TreeView root items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeView.SelectedValuePath">
            <summary>
            Get/set the selected value path.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem">
            <summary>
            Represents the TreeViewItem for SL/Wpf control wrapper interface.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.IsExpanded">
            <summary>
            Get/set whether the item is expanded.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.IsSelected">
            <summary>
            Get/set whether the item is selected.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.ToggleButton">
            <summary>
            Get the expand/collapse button element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.Header">
            <summary>
            Get the header element, useful for selection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.Items">
            <summary>
            Get the TreeView root items.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.Toggle(System.Boolean)">
            <summary>
            Expands/collapses the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user action.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ITreeViewItem.Select(System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user action.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDataGrid">
            <summary>
            Represents interface for the Xaml DataGrid control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDataGrid.RowElements">
            <summary>
            Get the list of DataGrid row elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDataGrid.ColumnHeaderElements">
            <summary>
            Get the list of DataGrid column header elements.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDataGridColumnHeader">
            <summary>
            Represents interface for the Xaml DataGridColumnHeader control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDataGridRow">
            <summary>
            Represents interface for the Xaml DataGridRow control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDataGridRow.CellElements">
            <summary>
            Get the list of DataGridCell elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDataGridRow.RowData">
            <summary>
            Get a summary of the row data content.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDataGridCell">
            <summary>
            Represents interface for the Xaml DataGridCell control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDataGridCell.CellText">
            <summary>
            Get the DataGridCell text.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IPopup">
            <summary>
            Represents interface for the Xaml Popup control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IPopup.IsOpen">
            <summary>
            Get/set whether the popup is open.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IButtonBase">
            <summary>
            Represents interface for the Xaml ButtonBase control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IButtonBase.IsPressed">
            <summary>
            Get/set whether the button is pressed.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IControl">
            <summary>
            Represents the XAML Control interface.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IControl.IsEnabled">
            <summary>
            Get/set whether the control is enabled.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IContentControl">
            <summary>
            Represents interface for the Xaml ContentControl control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDatePickerTextBox">
            <summary>
            Represents interface for the Xaml DatePickerTextBox control wrappers.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IHyperlinkButton">
            <summary>
            Represents interface for the Xaml HyperlinkButton control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IHyperlinkButton.NavigateUri">
            <summary>
            Get the navigate Uri of the hyperlink button.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IVirtualizingStackPanel">
            <summary>
            Represents interface for the Xaml VirtualizingStackPanel control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IVirtualizingStackPanel.ViewportOffset">
            <summary>
            Get the viewport offset.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IVirtualizingStackPanel.VerticalOffset">
            <summary>
            Get the vertical offset.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IVirtualizingStackPanel.SetVerticalOffset(System.Double)">
            <summary>
            Set the vertical offset.
            </summary>
            <param name="offset">The offset to set.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ISelector">
            <summary>
            Represents interface for the Xaml Selector control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ISelector.SelectedIndex">
            <summary>
            Get/set the selected index.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IComboBoxItem">
            <summary>
            Represents interface for the Xaml ComboBoxItem control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IComboBoxItem.ItemText">
            <summary>
            Get the item text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IComboBoxItem.ParentComboBox">
            <summary>
            Get the parent ComboBox element.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IListBox">
            <summary>
            Represents interface for the Xaml ListBox control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IListBox.SelectedIndex">
            <summary>
            Get/set the selected index.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IListBox.Items">
            <summary>
            Get the Items collection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IListBox.ListBoxItems">
            <summary>
            Get the list box items.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IListBoxItem">
            <summary>
            Represents interface for the Xaml ListBoxItem control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IListBoxItem.IsSelected">
            <summary>
            Get/set whether the item is selected.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ICalendar">
            <summary>
            Represents interface for the Xaml Calendar control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.SelectedDate">
            <summary>
            Get/set the Calendar SelectedDate.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.SelectedDates">
            <summary>
            Get the Calendar SelectedDates collection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.NextButton">
            <summary>
            Get the Calendar Next navigation button element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.PreviousButton">
            <summary>
            Get the Calendar Previous navigation button element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.HeaderButton">
            <summary>
            Get the Calendar Header navigation button element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.MonthViewElement">
            <summary>
            Get the Calendar MonthView element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ICalendar.YearViewElement">
            <summary>
            Get the Calendar YearView element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ICalendar.Navigate(ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection)">
            <summary>
            Navigate the Calendar depending on the direction.
            </summary>
            <param name="direction">The direction to navigate to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ICalendar.SelectDates(System.Boolean,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Selects dates in the calendar.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user clicking on the day elements.</param>
            <param name="dates">The calendar dates to select.</param>
            <param name="isInDatePicker">Whether to update the parent date picker if any too.</param>
            <remarks>In simulate real user and date picker mode a single date selection is possible only.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ICalendar.SelectMonth(System.Int32)">
            <summary>
            Simulates user selecting the specified month.
            </summary>
            <param name="month">The month to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ICalendar.SelectYear(System.Int32)">
            <summary>
            Simulates user selecting the specified year.
            </summary>
            <param name="year">The year to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ICalendar.ZoomOut">
            <summary>
            Simulates the user zooming the calendar out via a header button click.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IComboBox">
            <summary>
            Represents interface for the Xaml ComboBox control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IComboBox.IsDropDownOpen">
            <summary>
            Get/set whether the drop down is open.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IComboBox.ItemsPopup">
            <summary>
            Get the popup containing the list with combo box items.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IComboBox.OpenDropDown(System.Boolean)">
            <summary>
            Open the combobox drop down popup.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click action or just change the drop down state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IComboBox.SelectItemByIndex(System.Boolean,System.Int32)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IComboBox.SelectItemByIndex(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to open the dropdown automatically.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IComboBox.SelectItemByText(System.Boolean,System.String)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IComboBox.SelectItemByText(System.Boolean,System.String,System.Boolean)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to open the dropdown automatically.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IDatePicker">
            <summary>
            Represents interface for the Xaml DatePicker control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.SelectedDate">
            <summary>
            Get the DatePicker selected date.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.IsDropDownOpen">
            <summary>
            Get/set whether the drop down is open.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.TogglePopupButton">
            <summary>
            Get the picker toggle popup button element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.PickerTextBox">
            <summary>
            Get the picker text box element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.OpenCalendarPopup(System.Boolean)">
            <summary>
            Open the picker calendar popup.
            </summary>
            <param name="simulateRealUser">True to find the button and click on it, false to change the state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IDatePicker.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets new text into the date picker text box.
            </summary>
            <param name="simulateRealUser">Whether to simulate typing into the text box or just replace its text.</param>
            <param name="text">The text to type or set.</param>
            <param name="keyPressTime">The delay between each press when typing.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key when typing.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITabControl">
            <summary>
            Represents interface for the Xaml TabControl control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITabControl.SelectedIndex">
            <summary>
            Get/set the TabControl selected index.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ISlider">
            <summary>
            Represents interface for the Xaml Slider control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ISlider.Value">
            <summary>
            Get/set the Slider value.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ISlider.SetValue(System.Double)">
            <summary>
            Sets a new value into Slider.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IRepeatButton">
            <summary>
            Represents interface for the Xaml RepeatButton control wrappers.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IRepeatButton.UserPress(System.Int32)">
            <summary>
            Press and hold the RepeatButton for the specified number of milliseconds
            </summary>
            <param name="holdTime">The number of milliseconds to hold the button down for.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITextBlock">
            <summary>
            Represents interface for the Xaml TextBlock control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITextBlock.Text">
            <summary>
            Get/set the text of the TextBlock.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IToggleButton">
            <summary>
            Represents interface for the Xaml ToggleButton control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.IsChecked">
            <summary>
            Get/set whether the ToggleButton is checked.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.IsThreeState">
            <summary>
            Get/set whether the ToggleButton is in three state.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.CheckIcon">
            <summary>
            Get the check icon element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.Check(System.Boolean)">
            <summary>
            Checks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.UnCheck(System.Boolean)">
            <summary>
            Unchecks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IToggleButton.Toggle">
            <summary>
            Toggle the state of the button.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IPasswordBox">
            <summary>
            Represents interface for the Xaml PasswordBox control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IPasswordBox.Password">
            <summary>
            Get/set the password.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IPasswordBox.PasswordChar">
            <summary>
            Get/set the password char.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IPasswordBox.SetPassword(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the PasswordBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.IButton">
            <summary>
            Represents interface for the Xaml Button control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IFrameworkElement.Text">
            <summary>
            Gets the first text block text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IFrameworkElement.TextBlockContent">
            <summary>
            Gets the text from all the inner TextBlock elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IFrameworkElement.TextLiteralContent">
            <summary>
            Gets the literal text content of this framework element if any.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.IFrameworkElement.Uid">
            <summary>
            Unique identifier for this control in its application. For internal use.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.IFrameworkElement.SetFocus">
            <summary>
            Sets keyboard focus to this element
            </summary>
            <returns>Whether focus was successfully set to this element</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.ITextBox">
            <summary>
            Represents interface for the Xaml TextBox control wrappers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.ITextBox.Text">
            <summary>
            Get/set the text of the TextBox via automation property.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.ITextBox.SetText(System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets or types a new text into the TextBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
            <param name="fireKeyEvents">If true fires KeyDown and KeyUp events during simulated typing. Not compatible with Unicode text input.</param>
            <param name="clearCurrentText">If true clears text before simulated typing.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection">
            <summary>
            Represents navigation direction enumeration.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection.Previous">
            <summary>
            Navigate to previous view.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection.Next">
            <summary>
            Navigate to next view.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Xaml.Silverlight.SilverlightTestElement.UseLayoutRoundingProperty">
            <summary>
            Defines how to get the ActualWidth UseLayoutRounding of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Silverlight.SilverlightTestElement.UseLayoutRounding">
            <summary>
            Gets / Sets the value of the UseLayoutRounding of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.AutoCompleteBox.TextBox">
            <summary>
            Get the actual TextBox element to type text into. Override for custom control template!
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.AutoCompleteBox.Selector">
            <summary>
            Get the drop down list box element holding the items to select.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.AutoCompleteBox.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the TextBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.AutoCompleteBox.Select(System.Boolean,System.String)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.AutoCompleteBox.Select(System.Boolean,System.Int32)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The index of the item to select.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.Button">
            <summary>
            Represents the Button for Wpf control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.NextButton">
            <summary>
            Get the calendar navigation next button. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.PreviousButton">
            <summary>
            Get the calendar navigation previous button. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.MonthViewElement">
            <summary>
            Get the calendar month view element holding the days to select. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.YearViewElement">
            <summary>
            Get the calendar year view element holding the months and years to select. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.HeaderButton">
            <summary>
            Get the calendar header button to zoom out. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.Navigate(ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection)">
            <summary>
            Simulates calendar navigation.
            </summary>
            <param name="direction">The calendar navigation direction.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.SelectDates(System.Boolean,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Selects dates in the calendar.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user clicking on the day elements.</param>
            <param name="dates">The calendar dates to select.</param>
            <param name="isInDatePicker">Whether to update the parent date picker if any too.</param>
            <remarks>In simulate real user and date picker mode a single date selection is possible only.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.SelectMonth(System.Int32)">
            <summary>
            Simulates user selecting the specified month.
            </summary>
            <param name="month">The month to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.SelectYear(System.Int32)">
            <summary>
            Simulates user selecting the specified year.
            </summary>
            <param name="year">The year to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Calendar.ZoomOut">
            <summary>
            Simulates the user zooming the calendar out via a header button click.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox">
            <summary>
            Represents the Wpf ComboBox control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.ItemsPopup">
            <summary>
            Get the popup containing the list with combo box items. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.Items">
            <summary>
            Get the list of combobox items.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.OpenDropDown(System.Boolean)">
            <summary>
            Open the combobox drop down popup.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click action or just change the drop down state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.SelectItemByIndex(System.Boolean,System.Int32)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.SelectItemByIndex(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to automatically open the dropdown.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.SelectItemByText(System.Boolean,System.String)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBox.SelectItemByText(System.Boolean,System.String,System.Boolean)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to automatically open the dropdown.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBoxItem">
            <summary>
            Represents the Wpf ComboBoxItem for control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBoxItem.ItemText">
            <summary>
            Get the item text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ComboBoxItem.ParentComboBox">
            <summary>
            Get the parent ComboBox element.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.ToggleButton">
            <summary>
            Wraps a Silverlight ToggleButton element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ToggleButton.CheckIcon">
            <summary>
            Get the ToggleButton check element. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ToggleButton.Check(System.Boolean)">
            <summary>
            Checks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ToggleButton.UnCheck(System.Boolean)">
            <summary>
            Unchecks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ToggleButton.Toggle">
            <summary>
            Changes the state of the toggle button.
            Clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.CheckBox">
            <summary>
            Wraps a WPF CheckBox element.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.ListBoxItem">
            <summary>
            Represents the ListBoxItem for Wpf control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ListBox.ItemsPanel">
            <summary>
            Get the element holding the list box items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.ListBox.ListBoxItems">
            <summary>
            Get the list box items.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.ListBox.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.PasswordBox.Password">
            <summary>
            Get/set the password.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.PasswordBox.SetPassword(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the PasswordBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.RepeatButton">
            <summary>
            Wraps a Wpf RepeatButton element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.RepeatButton.UserPress(System.Int32)">
            <summary>
            Press and hold the RepeatButton for the specified number of milliseconds
            </summary>
            <param name="holdTime">The number of milliseconds to hold the button down for.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.RadioButton">
            <summary>
            Wraps a WPF RadioButton element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.Slider.SetValue(System.Double)">
            <summary>
            Sets a new value into Slider.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.TextBox.SetText(System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets or types a new text into the TextBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
            <param name="fireKeyEvents">If true fires KeyDown and KeyUp events during simulated typing. Not compatible with Unicode text input.</param>
            <param name="clearCurrentText">If true clears text before simulated typing.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeView">
            <summary>
            Represents the TreeView for Silverlight control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeView.ItemsPanel">
            <summary>
            Get the element holding the tree view items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeView.RootItems">
            <summary>
            Get the list of tree view items on the root level.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeView.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.VirtualizingStackPanel">
            <summary>
            Wraps the Wpf VirtualizingStackPanel control.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.VirtualizingStackPanel.ViewportOffset">
            <summary>
            Get the viewport offset.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.VirtualizingStackPanel.VerticalOffset">
            <summary>
            Get the vertical offset.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.VirtualizingStackPanel.SetVerticalOffset(System.Double)">
            <summary>
            Set the vertical offset.
            </summary>
            <param name="offset">The offset to set.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem">
            <summary>
            Represents the TreeViewItem for Silverlight control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.Text">
            <summary>
            Get the item text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.ToggleButton">
            <summary>
            Get the toggle button responsible for simulating item expand/collapse actions.
            Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.Header">
            <summary>
            Get the header responsible for item selection.
            Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.ItemsPanel">
            <summary>
            Get the element holding the tree view items. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.Items">
            <summary>
            Get the item children.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.Toggle(System.Boolean)">
            <summary>
            Expands/collapses the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click to expand/collapse the item.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.Select(System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click to select the item.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.TreeViewItem.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid">
            <summary>
            Wraps a Silverlight DataGrid object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.RowContainer">
            <summary>
            Gets the row container. Please override for custom control template.
            </summary>
            <value>The row container.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.ColumnHeaderContainer">
            <summary>
            Gets the column header container. Please override for custom control template.
            </summary>
            <value>The column header container.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.GridData">
            <summary>
            Gets the full textual content of a grid. The dictionary key represents the row of the grid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.RowElements">
            <summary>
            Get the list of rows contained in this Grid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.ColumnHeaderElements">
            <summary>
            Get the list of column headers of this Grid.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGrid.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridCell">
            <summary>
            Wraps a Silverlight DataGridCell.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridCell.CellText">
            <summary>
            Return the cell text if any, else empty string.
            In case of multiple text blocks concatenates all the text.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridRow">
            <summary>
            Wraps a Silverlight DataGridRow.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridRow.DataGridCellsPresenter">
            <summary>
            Get the DataGridRow cells presenter element. Please override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridRow.CellElements">
            <summary>
            Get the cells inside this row.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridRow.RowData">
            <summary>
            Gets all the text contained in the cells as an array of strings for this row.
            </summary>
            <value>The row data.</value>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.DataGridRow.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DatePicker.TogglePopupButton">
            <summary>
            Get the picker toggle popup button element. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Xaml.Wpf.DatePicker.PickerTextBox">
            <summary>
            Get the picker text box element. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.DatePicker.OpenCalendarPopup(System.Boolean)">
            <summary>
            Open the picker calendar popup.
            </summary>
            <param name="simulateRealUser">True to find the button and click on it, false to change the state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.Wpf.DatePicker.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets new text into the date picker text box.
            </summary>
            <param name="simulateRealUser">Whether to simulate typing into the text box or just replace its text.</param>
            <param name="text">The text to type or set.</param>
            <param name="keyPressTime">The delay between each press when typing.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key when typing.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Xaml.Wpf.Hyperlink">
            <summary>
            Wraps a Wpf Hyperlink element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.XamlControlHelper.OpenDatePickerCalendarPopup(ArtOfTest.WebAii.Controls.Xaml.IDatePicker,System.Boolean)">
            <summary>
            Open the picker calendar popup.
            </summary>
            <param name="simulateRealUser">True to find the button and click on it, false to change the state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.XamlControlHelper.FindElementByName(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.String)">
            <summary>
            Searches from the root for an element with the specified name. 
            This method doesn't timeout searching via FindStrategy.WhenNotVisibleReturnNull.
            </summary>
            <param name="root">The root element to start the search from.</param>
            <param name="name">The name of the element to search.</param>
            <returns>The element or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.XamlControlHelper.FindElementByType(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.String)">
            <summary>
            Searches from the root for an element with the specified type.
            This method doesn't timeout searching via FindStrategy.WhenNotVisibleReturnNull.
            </summary>
            <param name="root">The root element to start the search from.</param>
            <param name="type">The type of the element to search.</param>
            <returns>The element or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Xaml.XamlControlHelper.FindElementByText(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.String)">
            <summary>
            Searches from the root for an element with the specified text.
            This method doesn't timeout searching via FindStrategy.WhenNotVisibleReturnNull.
            </summary>
            <param name="root">The root element to start the search from.</param>
            <param name="text">The element text content to search for.</param>
            <returns>The element or null if not found.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.BaseControlAssert`1">
            <summary>
            Represents the base of all control assert objects.
            </summary>
            <typeparam name="T">The type of the base control.</typeparam>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.BaseControlAssert`1.NotFound">
            <summary>
            Not found constant string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.BaseControlAssert`1._target">
            <summary>
            The target for all assertions.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.#ctor">
            <summary>
            Create a new base assert.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.#ctor(`0)">
            <summary>
            Create a new base assert and pass it the target control
            </summary>
            <param name="control">The target control</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.BaseControlAssert`1.Target">
            <summary>
            Gets or sets the assert target
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.NumberCompareRange(System.Int32,System.Int32,System.Int32,ArtOfTest.Common.NumberRangeCompareType)">
            <summary>
            Do numberical range comparison.
            </summary>
            <param name="number">The number to compare.</param>
            <param name="lowerEnd">The lower end of the range.</param>
            <param name="upperEnd">The upper end of the range.</param>
            <param name="compareType">The compare type.</param>
            <returns>True/False whether the comparison passed.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.NumberCompare(System.Int32,System.Int32,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.NumberCompareType)">
            <summary>
            Do numerical comparison 
            </summary>
            <param name="leftPortion">Left side</param>
            <param name="rightPortion">Right side</param>
            <param name="compareType">The compare type.</param>
            <returns>True/False whether the compare passed</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.StringCompare(System.String,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType)">
            <summary>
            Perform a string comparison
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The string to compare to.</param>
            <param name="compareType">The comparison type.</param>
            <returns>True/False whether the comparison passed</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.AssertNumber(System.Int32,System.Int32,ArtOfTest.Common.NumberCompareType,System.Boolean)">
            <summary>
            Common assert for a number
            </summary>
            <param name="leftPortion">The left side of the comparison.</param>
            <param name="rightPortion">The right side of the comparison.</param>
            <param name="compareType">The comparison type (Equal, Less Than, etc.).</param>
            <returns>True.</returns>
            <exception cref="T:ArtOfTest.Common.Exceptions.AssertException">Thrown when the comparison fails.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.AssertString(System.String,System.String,ArtOfTest.WebAii.Controls.HtmlControls.HtmlAsserts.StringCompareType,System.Boolean)">
            <summary>
            Commnon assert for strings.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="compareType">The compare type (Contains, Exact, etc.).</param>
            <returns>True.</returns>
            <exception cref="T:ArtOfTest.Common.Exceptions.AssertException">Thrown when the comparison fails.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.AssertString(System.String,System.String,ArtOfTest.Common.StringCompareType,System.Boolean)">
            <summary>
            Commnon assert for strings.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The actual value.</param>
            <param name="compareType">The compare type (Contains, Exact, etc.).</param>
            <returns>True.</returns>
            <exception cref="T:ArtOfTest.Common.Exceptions.AssertException">Thrown when the comparison fails.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.Assert(System.Boolean,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Throw an AssertException if conditiion is false and throwAssert is true.
            </summary>
            <param name="condition">The condition result.</param>
            <param name="message">The message.</param>
            <param name="expected">Expected value.</param>
            <param name="actual">Actual value.</param>
            <param name="throwAssert">Whether or not to throw the assert when condition is false.</param>
            <returns>Returns true/false of the condition result.</returns>
            <exception cref="T:ArtOfTest.Common.Exceptions.AssertException">Thrown when the comparison fails and throwAssert is true.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.BaseControlAssert`1.Assert(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Throw <see cref="T:ArtOfTest.Common.Exceptions.AssertException"/> if condition is false.
            </summary>
            <param name="condition">The condition result from previous condition test.</param>
            <param name="message">The message to put in the assert.</param>
            <param name="expected">The Expected value to display in the assert.</param>
            <param name="actual">The Actual value to display in the assert.</param>
            <returns>True.</returns>
            <exception cref="T:ArtOfTest.Common.Exceptions.AssertException">Thrown when the comparison fails.</exception>
        </member>
        <member name="T:ArtOfTest.WebAii.Controls.Control">
            <summary>
            The base object for all controls.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control._element">
            <summary>
            The DOM element representing this object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control._browser">
            <summary>
            The owner browser of this control
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control._isRefresh">
            <summary>
            Whether the control is in refresh call.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control._throwOnInvalidAssignment">
            <summary>
            Whether to throw on invalid assignments.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control._assignmentSucceeded">
            <summary>
            Whether the assignment failed or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Controls.Control.s_throwOnAssertFailed">
            <summary>
            Whether to throw on assert failure.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create new control and assigns it a base element.
            </summary>
            <param name="element">The DOM element representing this control.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.#ctor">
            <summary>
            Create new control.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.ThrowOnInvalidAssignment">
            <summary>
            Gets whether the control should throw on invalid assignments
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.IsRefresh">
            <summary>
            Gets whether the control is executing a Refresh call.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.BaseElement">
            <summary>
            Gets the DOM element representing this test control
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.OwnerBrowser">
            <summary>
            Gets the owner browser that owns this control.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.Locator">
            <summary>
            Gets the FindParam that describes this control.
            The base Control returns null.
            </summary>
            <remarks>This property is provided for convenience and can be overriden by custom controls as
            a place to put and store the FindParam that describes them.</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Controls.Control.LocatorExpression">
            <summary>
            Returns the FindExpression for this control. Since this is a abstract base class it always returns null.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.AssignElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Assign this control a base element. Performs any initialization for this control.
            </summary>
            <param name="e">The element to assign.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.Refresh">
            <summary>
            Refresh this control within the current DOM and update this control property values.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.CreateInstance``1(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Create a new control instance.
            </summary>
            <typeparam name="TControl">The control type to create</typeparam>
            <param name="e">The base element object.</param>
            <param name="throwIfNull">Whether to throw if it can't create the control.</param>
            <returns>The control type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.AssignFailed(System.Exception)">
            <summary>
            Mark the assignment to failed. Throw if the framework is set for throwing.
            </summary>
            <param name="exceptionToThrow">The exception to throw.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.GetLocator``1">
            <summary>
            Return an instance of this control's FindParam.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <returns>The FindParam set in the Control.Locator.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.SetRefreshState(System.Boolean)">
            <summary>
            Set the refresh state of this control.
            </summary>
            <param name="state">The desired state.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.MatchControl(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Given a FindParam this method returns true/false whether this FindParam matches the passed in 
            element.
            </summary>
            <remarks>For a FindParam to match an element, the following condition must be met:
            1. The FindParam.TagName is set, needs to match the element's tagName.
            2. If FindParam.Type=Content, then the content as described by FindParam needs to match.
            3. The FindParam.Attributes and FindParam.PartialAttributes need to match if any are set.
            4. If FindParam.Type=TagIndex/XPath or NodeIndexPath will throw an exception since they do
            not apply in this scenario since they apply only when matching an element within a full
            DOM hierarchy not an atomic element matching.
            </remarks>
            <param name="element">The element to match.</param>
            <param name="paramToMatch">The FindParam.</param>
            <returns>True/False whether the FindParam matches.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Controls.Control.GetFamilyElement(System.Int32,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Finds the nth parent/child of the specified element.
            </summary>
            <param name="level">Number of levels to move up/down. Negative values move up. Positive values move down.</param>
            <param name="e">The element to start at.</param>
            <returns>A parent/child element or null if an attempt is made to go beyond the ends of the DOM tree.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ComboBox.ItemsPopup">
            <summary>
            Get the popup containing the list with combo box items. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ComboBox.Items">
            <summary>
            Retrieves the list of items for this ComboBoxItem's for this ComboBox.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.OpenDropDown(System.Boolean)">
            <summary>
            Open the combobox drop down popup.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click action or just change the drop down state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.SelectItemByIndex(System.Boolean,System.Int32)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.SelectItemByIndex(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Select a combobox item by given index.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected index.</param>
            <param name="index">The index of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to automatically open the dropdown.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.SelectItemByText(System.Boolean,System.String)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.SelectItemByText(System.Boolean,System.String,System.Boolean)">
            <summary>
            Select a combo box item by given text.
            </summary>
            <param name="simulateRealUser">Whether to simulate selection by real user click or just change the selected state of the item.</param>
            <param name="text">The text of the item to select.</param>
            <param name="openDropDownBeforeSelection">Whether to automatically open the dropdown.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ComboBox.SelectByText(System.String,System.Boolean)">
            <summary>
            Selects the first item in the ComboBox that contains text matching the specified string.
            </summary>
            <param name="toMatch">The text of the item to select</param>
            <param name="partialMatch">Whether to use a partial or a full string match.  When partialMatch is set, the first item containing
            the specified text will be selected.  When partialMatch is not set, the first item exactly matching the specified text
            will be selected.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.ComboBoxItem">
            <summary>
            Represents the Silverlight ComboBoxItem for control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ComboBoxItem.ItemText">
            <summary>
            Get the item text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ComboBoxItem.ParentComboBox">
            <summary>
            Get the parent ComboBox element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.AutoCompleteBox.TextBox">
            <summary>
            Get the actual TextBox element to type text into. Override for custom control template!
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.AutoCompleteBox.Selector">
            <summary>
            Get the drop down list box element holding the items to select.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.AutoCompleteBox.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the TextBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.AutoCompleteBox.Select(System.Boolean,System.String)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The text of the item to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.AutoCompleteBox.Select(System.Boolean,System.Int32)">
            <summary>
            Selects item in the drop down if open.
            </summary>
            <param name="simulateRealUser">If true, simulates real click, otherwise changes selection.</param>
            <param name="itemText">The index of the item to select.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.HyperlinkButton">
            <summary>
            Wraps a Silverlight HyperlinkButton element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ListBox.ItemsPanel">
            <summary>
            Get the element holding the list box items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ListBox.ListBoxItems">
            <summary>
            Get the list box items.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ListBox.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DatePicker.TogglePopupButton">
            <summary>
            Get the picker toggle popup button element. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DatePicker.PickerTextBox">
            <summary>
            Get the picker text box element. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.DatePicker.OpenCalendarPopup(System.Boolean)">
            <summary>
            Open the picker calendar popup.
            </summary>
            <param name="simulateRealUser">True to find the button and click on it, false to change the state via automation property.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.DatePicker.SetText(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets new text into the date picker text box.
            </summary>
            <param name="simulateRealUser">Whether to simulate typing into the text box or just replace its text.</param>
            <param name="text">The text to type or set.</param>
            <param name="keyPressTime">The delay between each press when typing.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key when typing.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.ListBoxItem">
            <summary>
            Represents the ListBoxItem for Silverlight control wrapper.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Slider.SetValue(System.Double)">
            <summary>
            Sets a new value into Slider.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.TreeView">
            <summary>
            Represents the TreeView for Silverlight control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeView.ItemsPanel">
            <summary>
            Get the element holding the tree view items.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeView.RootItems">
            <summary>
            Get the list of tree view items on the root level.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TreeView.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem">
            <summary>
            Represents the TreeViewItem for Silverlight control wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.Text">
            <summary>
            Get the item text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.ToggleButton">
            <summary>
            Get the toggle button responsible for simulating item expand/collapse actions.
            Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.Header">
            <summary>
            Get the header responsible for item selection.
            Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.ItemsPanel">
            <summary>
            Get the element holding the tree view items. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.Items">
            <summary>
            Get the item children.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.Toggle(System.Boolean)">
            <summary>
            Expands/collapses the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click to expand/collapse the item.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.Select(System.Boolean)">
            <summary>
            Selects the item.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user click to select the item.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TreeViewItem.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.BitmapImage">
            <summary>
            Wraps a Silverlight BitmapImage element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TextBox.SetText(System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets or types a new text into the TextBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the text.</param>
            <param name="text">The text to set/type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key</param>
            <param name="fireKeyEvents">If true fires KeyDown and KeyUp events during simulated typing. Not compatible with Unicode text input.</param>
            <param name="clearCurrentText">If true clears text before simulated typing.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.PasswordBox.SetPassword(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Sets or types a new text into the PasswordBox.
            </summary>
            <param name="simulateRealUser">If true, simulates typing, otherwise simply replaces the password.</param>
            <param name="password">The password to set/type.</param>
            <param name="keyPressTime">The delay between each press.</param>
            <param name="keyHoldTime">The delay between pressing and releasing each key.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.ToggleButton">
            <summary>
            Wraps a Silverlight ToggleButton element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.ToggleButton.CheckIcon">
            <summary>
            Get the ToggleButton check icon element. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ToggleButton.Check(System.Boolean)">
            <summary>
            Checks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ToggleButton.UnCheck(System.Boolean)">
            <summary>
            Unchecks the toggle button.
            If simulate real user clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            If doesn't, simulate real user updates the checked state via an automation property.
            </summary>
            <param name="simulateRealUser">Whether to simulate a real user click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.ToggleButton.Toggle">
            <summary>
            Changes the state of the toggle button.
            Clicks on the toggle box portion 
            if it exists, otherwise clicks on the center of the button rectangle.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.RepeatButton">
            <summary>
            Wraps a Silverlight RepeatButton element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.RepeatButton.UserPress(System.Int32)">
            <summary>
            Press and hold the RepeatButton for the specified number of milliseconds
            </summary>
            <param name="holdTime">The number of milliseconds to hold the button down for</param>
            <remarks>Due to inaccuracies in automation and Silverlight timing, the hold time is approximate.</remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.Calendar">
            <summary>
            Wraps a Silverlight Calendar element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.Calendar.NextButton">
            <summary>
            Get the calendar navigation next button. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.Calendar.PreviousButton">
            <summary>
            Get the calendar navigation previous button. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.Calendar.MonthViewElement">
            <summary>
            Get the calendar month view element holding the days to select. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.Calendar.YearViewElement">
            <summary>
            Get the calendar year view element holding the months and years to select. Override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.Calendar.HeaderButton">
            <summary>
            Get the calendar header button to zoom out. Override for custom control template.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Calendar.Navigate(ArtOfTest.WebAii.Controls.Xaml.CalendarNavigationDirection)">
            <summary>
            Simulates calendar navigation.
            </summary>
            <param name="direction">The calendar navigation direction.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Calendar.SelectMonth(System.Int32)">
            <summary>
            Simulates user selecting the specified month.
            </summary>
            <param name="month">The month to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Calendar.SelectYear(System.Int32)">
            <summary>
            Simulates user selecting the specified year.
            </summary>
            <param name="year">The year to select.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Calendar.SelectDates(System.Boolean,System.Collections.Generic.List{System.DateTime},System.Boolean)">
            <summary>
            Selects dates in the calendar.
            </summary>
            <param name="simulateRealUser">Whether to simulate real user clicking on the day elements.</param>
            <param name="dates">The calendar dates to select.</param>
            <param name="isInDatePicker">Whether to update the parent date picker if any too.</param>
            <remarks>In simulate real user and date picker mode a single date selection is possible only.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.Calendar.ZoomOut">
            <summary>
            Simulates the user zooming the calendar out via a header button click.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TabControl.TabItemContainer">
            <summary>
            Gets the tab item container.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.TabControl.TabItems">
            <summary>
            Gets the tab items.
            </summary>
            <value>The tab items.</value>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TabControl.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.TabControl.SelectTab(System.String)">
            <summary>
            Selects the tab by its header text.
            </summary>
            <param name="headerText">The tab text in the header.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.DataGridCell">
            <summary>
            Wraps a Silverlight DataGridCell.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGridCell.CellText">
            <summary>
            Return the cell text if any, else empty string.
            In case of multiple text blocks concatenates all the text.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.DataGrid">
            <summary>
            Wraps a Silverlight DataGrid object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.DataGrid.CurrentColumnProperty">
            <summary>
            Defines how to get the value of the CurrentColumn property.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.CurrentColumn">
            <summary>
            Gets / Sets the CurrentColumn for this Silverlight DataGrid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.RowContainer">
            <summary>
            Gets the row container. Please override for custom control template.
            </summary>
            <value>The row container.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.ColumnHeaderContainer">
            <summary>
            Gets the column header container. Please override for custom control template.
            </summary>
            <value>The column header container.</value>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.GridData">
            <summary>
            Gets the full textual content of a grid. The dictionary key represents the row of the grid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.RowElements">
            <summary>
            Get the list of rows contained in this Grid.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGrid.ColumnHeaderElements">
            <summary>
            Get the list of column headers of this Grid.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.DataGrid.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.DataGridRow">
            <summary>
            Wraps a Silverlight DataGridRow.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGridRow.DataGridCellsPresenter">
            <summary>
            Get the DataGridRow cells presenter element. Please override for custom control template.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGridRow.CellElements">
            <summary>
            Get the cells inside this row.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGridRow.RowData">
            <summary>
            Gets all the text contained in the cells as an array of strings for this row.
            </summary>
            <value>The row data.</value>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.DataGridRow.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.DeepZoomImageTileSource">
            <summary>
            Wraps a Silverlight DeepZoomImageTileSource element.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.StructSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.DataGridColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.DataGridColumn.DisplayIndexProperty">
            <summary>
            Defines how to get/set the DisplayIndex property from the real Silverlight object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.DataGridColumn.DisplayIndex">
            <summary>
            Gets / Sets the value of the DisplayIndex.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.DataGridColumn.GetRealType">
            <summary>
            Gets the full type name of the DataGridColumn this class wraps.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage">
            <summary>
            Class that wraps a MultiScaleSubImage oject.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.AspectRatioProperty">
            <summary>
            Defines how to get the AspectRatio property.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.OpacityProperty">
            <summary>
            Defines how to get the Opacity property.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ViewportOriginProperty">
            <summary>
            Defines how to get the ViewportOrigin property.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ViewportWidthProperty">
            <summary>
            Defines how to get the ViewportWidth property.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ZIndexProperty">
            <summary>
            Definds how to get the ZIndex property.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.#ctor">
            <summary>
            Creates a new MultiScaleSubImage wrapper.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.AspectRatio">
            <summary>
            Gets the AspectRatio value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.Opacity">
            <summary>
            Gets / Sets the Opacity value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ViewportOrigin">
            <summary>
            Gets / Sets the ViewportOrigin value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ViewportWidth">
            <summary>
            Gets / Sets the ViewportWidth value.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.ZIndex">
            <summary>
            Gets / Sets the zIndex value.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UI.MultiScaleSubImage.GetRealType">
            <summary>
            Gets the string representation of the real type this class wraps.
            </summary>
            <returns>The string representation of the real type.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UI.StructThickness">
            <summary>
            
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ApplicationNotReadyException">
            <summary>
            This exception is used to signal that an operation was attempted against a Silverlight app that is not yet or no longer accessible
            through the DOM.
            </summary>
            
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.NoSuchPropertyException">
            <summary>
            The exception that is thrown when the specified property does not exist on a Silverlight element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.NoSuchPropertyException.#ctor(System.String)">
            <summary>
            Constructs a new NoSuchPropertyException object.
            </summary>
            <param name="message">The message to relating to the exception.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ObjectConverter">
            <summary>
            This class is implemented only on the Silverlight side.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectConverter.FromReal(System.Object,System.Object)">
            <summary>
            Takes the real object type and initializes its peer properties
            </summary>
            <param name="realObject">The realObject type</param>
            <param name="peer">The peer object to initialize</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectConverter.ToReal(System.Object,System.String)">
            <summary>
            Takes a peer object and sets its values on the real object and returns the real object.
            </summary>
            <param name="peer">The peer object.</param>
            <param name="realTypeString">The real type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectConverter.MapAbstractProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Map an abstract property type to the actualy property it is set to.
            </summary>
            <param name="abstractProperty"></param>
            <param name="realObject"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectConverter.MapRealType(System.Type)">
            <summary>
            Given a real type, return the peer type for it.
            </summary>
            <param name="realType">The real type.</param>
            <returns>The peer type.</returns>
            <remarks>This method will return null if the type does not exist.</remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.XamlFindClause">
            <summary>
            Holds a single clause as part of a Silverlight element FindExpression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlFindClause._knownTypes">
            <summary>
            The known types supported by Html searches.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlFindClause._xamlSearchType">
            <summary>
            The HtmlSearchType
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlFindClause._xamlTagName">
            <summary>
            The Xaml tag name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlFindClause._tagIndex">
            <summary>
            Xaml tag index.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.OnParsed">
            <summary>
            Occurs when an clause is parsed into name value pairs
            including compare type.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.Match(ArtOfTest.Common.ITargetElement,ArtOfTest.Common.ITargetElement)">
            <summary>
            Match the target with this clause.
            </summary>
            <param name="element">The element to match.</param>
            <param name="startElement">Element to start search at. Required for hierarchal searches</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.GetAttributeValue(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.String)">
            <summary>
            Get an attribute value set on the framework element.
            </summary>
            <param name="fx">The framework element.</param>
            <param name="attr">The attribute to use.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.InitializeKnownTypes">
            <summary>
            Initialize the static known types.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.ExtractValue(System.String,ArtOfTest.Common.ITargetElement)">
            <summary>
            Extract the actual value for the search type passed in.
            </summary>
            <param name="searchType">The search type.</param>
            <param name="element">The target element</param>
            <returns>The actual value</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.XamlFindClause.GetTagIndexFromParent(ArtOfTest.WebAii.Silverlight.FrameworkElement,ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Given a parent and a child element, return the child index within that parent
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.Attributes.ContainsSilverlightTypesAttribute">
            <summary>
            Use this attribute to decorate assemblies that contain classes that are used to transfer information between
            WebAii tests and Silverlight applications.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.AutomationMethod">
            <summary>
            Represents a method on an AutomationObject
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationMethod._name">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationMethod.#ctor(System.String,System.Type)">
            <summary>
            Creates a new AutomationMethod
            </summary>
            <param name="name">The name of the method to call on the AutomationObject</param>
            <param name="returnType">The return type of the method</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationMethod.ReturnsAutomationPeer">
            <summary>
            Whether this object is an AutomationObject or not.
            </summary>
            <returns>True/False whether or not this object is an AutomationObject.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationMethod.Name">
            <summary>
            Gets / Sets the name of the method this object represents
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationMethod.ReturnType">
            <summary>
            Gets / Sets the return type of the method this object represents
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationMethod.ReturnTypeName">
            <summary>
            Gets / Sets the return type name of the method this object represents
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationMethod.Parameters">
            <summary>
            Gets / Sets the parameters for the method call
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.AutomationObject`1">
            <summary>
            Represents an object that can be automated inside a Silverlight/WPF App.
            </summary>
            <typeparam name="T">The AutomationPeer type of the object.</typeparam>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationObject`1._propertyBag">
            <summary>
            The object's property bag.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ArtOfTest.WebAii.Silverlight.AutomationObject`1"/> class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.#ctor(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Create a new AutomationObject.
            </summary>
            <param name="reference">The object reference.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.GetProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty)">
            <summary>
            Get a property on this automation object.
            </summary>
            <param name="property">The name of the property to retrieve</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.GetProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty,System.Object)">
            <summary>
            Gets a property on this automation object, or returns a default value if the property cannot be retrieved
            </summary>
            <param name="property">The name of the property to retrieve</param>
            <param name="defaultValue">The value to be returned if the property cannot be retrieved</param>
            <returns>The value of the property, or defaultValue if an error occurs while retrieving the property</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.SetProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty,System.Object)">
            <summary>
            Set a property on this automation object.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.Invoke(ArtOfTest.WebAii.Silverlight.AutomationMethod,System.Object[])">
            <summary>
            Invokes a method on the AutomationObject's client-side peer
            </summary>
            <param name="method">An AutomationMethod specifying the method to invoke on the peer</param>
            <param name="parameters">The parameters for the method call</param>
            <returns>null</returns>
            <remarks>
            <para>This method is deprecated.  Please use InvokeMethod with the same signature instead.</para>
            <para>Only simple parameters (numbers, booleans, and strings) are supported, and return values are not yet
            passed back from the automation peer.</para>
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.InvokeMethod(ArtOfTest.WebAii.Silverlight.AutomationMethod,System.Object[])">
            <summary>
            Invokes a method on the AutomationObject's client-side peer
            </summary>
            <param name="method">An AutomationMethod specifying the method to invoke on the peer</param>
            <param name="parameters">The parameters for the method call</param>
            <returns>null</returns>
            <remarks>Only simple parameters (numbers, booleans, and strings) are supported, and return values are not yet
            passed back from the automation peer</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invokes a method on the AutomationObject's client-side peer
            </summary>
            <param name="methodName">The name of the method to invoke</param>
            <param name="parameters">The parameters for the method call</param>
            <returns>null</returns>
            <remarks>Only simple parameters (numbers, booleans, and string) are supported, and return values are not yet
            passed back from the automation peer</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.Serialize">
            <summary>
            Serialize this automation object to a Json String
            </summary>
            <returns>The Json string representation of this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.Deserialize(System.String)">
            <summary>
            Deserialize this AutomationObject to a jsonString
            TODO: Should this be a static method? 
            </summary>
            <param name="jsonString">The Json string to deserialize</param>
            <returns>The deserialize object</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationObject`1.Reference">
            <summary>
            Get or set the object reference.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationObject`1.PropertyBag">
            <summary>
            The automation object property bag.
            </summary>
            <value>The entire property bag.</value>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign a reference to this AutomationObject.
            </summary>
            <param name="reference">The automation reference.</param>
            <returns>True/False whether the assignment passed/failed.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.GetRealType">
            <summary>
            Gets the real peer type
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.ToRealObject">
            <summary>
            Converts an automation object to the real object.
            </summary>
            <returns>The Silverlight object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationObject`1.FromRealObject(System.Object)">
            <summary>
            Converts a Silverlight object to an AutomationObject
            </summary>
            <param name="o">The Silverlight object to convert.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.AutomationProperty">
            <summary>
            Represents a property on an AutomationObject.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._type">
            <summary>
            The property type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._typeName">
            <summary>
            The type name string. it is cheaper to serialize the string than the 
            full Type object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._index">
            <summary>
            Represent the index if the property is a collection
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._isAttachedProperty">
            <summary>
            Whether this property is a standard property or an attached property on the object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationProperty._attachedPropertyOwnerTypeName">
            <summary>
            If this is an attached property, this holds the namespace and name of the class that owns the property
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationProperty.#ctor(System.String,System.Type)">
            <summary>
            Create a new AutomationProperty
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyType">The property type.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationProperty.#ctor(System.String,System.Type,System.String)">
            <summary>
            Create a new AutomationProperty
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyType">The property type.</param>
            <param name="attachedPropertyOwner">If non-null, the namespace and name of the owner of this
            attached property. If null or empty, this is not an attached property.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.Name">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.Type">
            <summary>
            Gets or sets the property type.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.Index">
            <summary>
            Gets or sets the property type.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.TypeName">
            <summary>
            The name of the type this AutomationObject represents.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.IsAttachedProperty">
            <summary>
            Gets or sets whether this automation property is an attached property
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationProperty.AttachedPropertyOwner">
            <summary>
            Gets or sets the namespace and name of the owner of this attached property
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationProperty.IsAutomationPeer">
            <summary>
            Whether this object is an AutomationObject or not.
            </summary>
            <returns>True/False whether or not this object is an AutomationObject</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationProperty.Clone">
            <summary>
            Returns a clone of this AutomationProperty.
            </summary>
            <returns>The cloned AutomationProperty</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.AutomationReference">
            <summary>
            Represents an automation object reference that can point to a
            UIElement, a property or a method.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.#ctor">
            <summary>
            Create a new AutomationReference
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.#ctor(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Create an AutomationReference that is a FrameworkElement.
            </summary>
            <param name="fx"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.Element">
            <summary>
            Gets the framework element reference.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.EnsureReferencePath">
            <summary>
            Ensure the reference path is built for the FrameworkElement
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.#ctor(ArtOfTest.WebAii.Silverlight.ICommunicationProxy)">
            <summary>
            Create a new AutomationReference passing it the communication proxy.
            </summary>
            <param name="proxy"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.#ctor(ArtOfTest.WebAii.Silverlight.ICommunicationProxy,System.String)">
            <summary>
            Create a new AutomationReference passing it the communication proxy &amp; object name
            </summary>
            <param name="proxy"></param>
            <param name="objectName"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.#ctor(ArtOfTest.WebAii.Silverlight.ICommunicationProxy,System.String,System.String)">
            <summary>
            Create a new AutomationRefernece passing it the communication proxy, object name and 
            reference path.
            </summary>
            <param name="proxy"></param>
            <param name="objectName"></param>
            <param name="refPath"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.Clone">
            <summary>
            Clone this AutomationReference.
            </summary>
            <returns>Cloned reference.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.ObjectName">
            <summary>
            Gets the object name of the reference
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.Path">
            <summary>
            Gets the reference path
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.AppendProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty)">
            <summary>
            Appends an AutomationProperty to this reference.
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.Equals(System.Object)">
            <summary>
            Determines if this object is equal to another.
            </summary>
            <param name="obj">The object to compare to this one</param>
            <returns>
            True if both objects are AutomationReferences, and both have ObjectName and Path properties defined,
            and both objects have the same values for those properties.
            </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.GetHashCode">
            <summary>
            Gets the hashcode for this AutomationReference object.
            </summary>
            <returns>A hashcode.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.Properties">
            <summary>
            Gets or sets the list of AutomationProperties that is reference represents
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.IsProperty">
            <summary>
            Whether this AutomationReference is a property or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.ManagedProxy">
            <summary>
            Gets the communication proxy.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.AutomationReference.HostType">
            <summary>
            Gets the automation host type 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.AsString">
            <summary>
            Return the string representation of this reference.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.FromString(ArtOfTest.WebAii.Silverlight.ICommunicationProxy,System.String)">
            <summary>
            Deserializes an automation reference from its string representation.
            </summary>
            <param name="proxy">The managed proxy (if any) to associate with the automation reference.</param>
            <param name="referenceString">The serialized string representation to deserialize.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.Silverlight.AutomationReference"/></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.AutomationReference.FromString(System.String)">
            <summary>
            Return an <see cref="T:ArtOfTest.WebAii.Silverlight.AutomationReference"/> from its string representation.
            </summary>
            <param name="referenceString"></param>
            <returns>The deserialized <see cref="T:ArtOfTest.WebAii.Silverlight.AutomationReference"/></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ExecuteSilverlightCommandException">
            <summary>
            Holds information about a SilverlightCommandException
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ExecuteSilverlightCommandException.#ctor(System.String)">
            <summary>
            Initializes a new ExecuteSilverlightCommandException
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ExecuteSilverlightCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new ExecuteSilverlightCommandException
            </summary>
            <param name="info">The information needed to serialize/deserialize this object.</param>
            <param name="context">The source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.FrameworkElement">
            <summary>
            The base FrameworkElement that represents any visual element
            in the Silverlight application.
            </summary>    
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.ActualWidthProperty">
            <summary>
            Defines how to get the ActualWidth property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.ActualHeightProperty">
            <summary>
            Defines how to get the ActualHeight property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.WidthProperty">
            <summary>
            Defines how to get the Width property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.HeightProperty">
            <summary>
            Defines how to get the Height property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.MinWidthProperty">
            <summary>
            Defines how to get the MinWidth property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.MaxWidthProperty">
            <summary>
            Defines how to get the MaxWidth property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.MinHeightProperty">
            <summary>
            Defines how to get the MinHeight property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.MaxHeightProperty">
            <summary>
            Defines how to get the MaxHeight property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.HorizontalAlignmentProperty">
            <summary>
            Defines how to get the HorizontalAlignment property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.VerticalAlignmentProperty">
            <summary>
            Defines how to get the VerticalAlignment property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.MarginProperty">
            <summary>
            Defines how to get the Margin property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.DesiredSizeProperty">
            <summary>
            Defines how to get the DesiredSize property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderSizeProperty">
            <summary>
            Defines how to get the RenderSize property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.NameProperty">
            <summary>
            Defines how to get the Name property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.TagProperty">
            <summary>
            Defines how to get the Tag property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.DataContextProperty">
            <summary>
            Defines how to get the DataContext property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.OpacityProperty">
            <summary>
            Defines how to get the Opacity property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.ClipProperty">
            <summary>
            Defines how to get the Clip property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderTransformProperty">
            <summary>
            Defines how to get the RenderTransform property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.OpacityMaskProperty">
            <summary>
            Defines how to get the OpacityMask property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderTransformOriginProperty">
            <summary>
            Defines how to get the RenderTransformOrigin property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsHitTestVisibleProperty">
            <summary>
            Defines how to get the IsHitTestVisible property of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.VisibilityProperty">
            <summary>
            Defines how to get the Visibility property of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.ActualWidth">
            <summary>
            Gets the value of the ActualWidth of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.ActualHeight">
            <summary>
            Gets the value of the ActualHeight of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Width">
            <summary>
            Gets / Sets the value of the Width of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Height">
            <summary>
            Gets / Sets the value of the Height of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.MinWidth">
            <summary>
            Gets /Sets the value of the MinWidth of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.MaxWidth">
            <summary>
            Gets / Sets the value of the MaxWidth of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.MinHeight">
            <summary>
            Gets / Sets the value of the MinHeight of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.MaxHeight">
            <summary>
            Gets / Sets the value of the MaxHeight of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.HorizontalAlignment">
            <summary>
            Gets / Sets the value of the HorizontalAlignment of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.VerticalAlignment">
            <summary>
            Gets / Sets the value of the VerticalAlignment of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Margin">
            <summary>
            Gets / Sets the value of the Margin of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.DesiredSize">
            <summary>
            Gets the value of the DesiredSize of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderSize">
            <summary>
            Gets the value of the RenderSize of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Name">
            <summary>
            Gets the value of the Name of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Opacity">
            <summary>
            Gets / Sets the value of the Opacity of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Clip">
            <summary>
            Gets / Sets the value of the Clip of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderTransform">
            <summary>
            Gets / Sets the value of the RenderTransform of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.OpacityMask">
            <summary>
            Gets / Sets the value of the OpacityMask of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.RenderTransformOrigin">
            <summary>
            Gets / Sets the value of the RenderTransformOrigin of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsHitTestVisible">
            <summary>
            Gets / Sets the value of the IsHitTestVisible of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Visibility">
            <summary>
            Gets / Sets the value of the Visibility of this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement.props">
            <summary>
            A dictionary of all automation properties. Useful for common translators used in different technologies (SL/Wpf).
            The properties can be accessed via the Get/SetProperty methods.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.#ctor(ArtOfTest.Common.ParsedElement,ArtOfTest.Common.IAutomationHost)">
            <summary>
            Create a new FrameworkElement. 
            </summary>
            <param name="parsedElement">The ParsedElement data.</param>
            <param name="host">The Host object.</param>
            <remarks>This constructor is called by the tree builder directly
            at parse time.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.#ctor(ArtOfTest.WebAii.Silverlight.VisualFindInfo)">
            <summary>
            Init this FrameworkElement as a proxy.
            </summary>
            <param name="findInfo">The findInfo definition to use when searching for a matching element in the DOM tree.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.#ctor(ArtOfTest.WebAii.Silverlight.VisualFindInfo,System.Int32)">
            <summary>
            Init this FrameworkElement as a proxy
            </summary>
            <param name="findInfo">The visual element proxy</param>
            <param name="uid">The proxy's uid.  It shouldn't change when the element is fully initialized.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.#ctor">
            <summary>
            Create a new FrameworkElement.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Mappings">
            <summary>
            Gets a mappings collection that stores customizable control specific
            mapping knowledge that can be later customized.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.AutomationId">
            <summary>
            Gets the AutomationId set on this element if any.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.XamlTagBase">
            <summary>
            Gets the lowest control type that the framework recognizes
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Text">
            <summary>
            Gets the element text, the first text block text by default.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.TextBlockContent">
            <summary>
            Gets the text from all the inner TextBlock elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.TextLiteralContent">
            <summary>
            Gets the literal text content of this framework element if any.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.User">
            <summary>
            Gets the UI interaction object that allows you
            to interact with this framework element directly using
            real mouse and keyboard interactions
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.XamlTag">
            <summary>
            Get the xaml tag name of this FrameworkElement.
            This is used for hierarchy matching and traversal.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Wait">
            <summary>
            Gets a VisualWait object to be used on waiting for Visual elemnets in the VisualTree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Find">
            <summary>
            Get the Find object used to search the visual children of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Application">
            <summary>
            Get the Application object that owns this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.AbsoluteTagIndex">
            <summary>
            Get the absolute index of this Xaml tag in the Visual Tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.TagNameIndex">
            <summary>
            Gets the tag name index of the xaml tag name in the visual tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.AbsoluteSiblingTagIndex">
            <summary>
            Get the sibling tag index of this FrameworkElement.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.FindInfo">
            <summary>
            Get the VisualElement proxy
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsProxy">
            <summary>
            Gets whether this element is fully initialized or simply a proxy
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.EnableValidateMouseLocation">
            <summary>
            Enables or disables the validation of mouse click locations before performing mouse actions
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetIdentifier(System.String@,System.String@)">
            <summary>
            Gets whether this framework element has an automationid set on it or name. If it does,
            it will return which one was found and its value. If both are found, AutomationId will 
            be returned first.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsChild(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Checks if element passed in is a child of this framework element.
            </summary>
            <param name="element">The child to check.</param>
            <returns>True/False whether the element is a child.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetChildTagIndex(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Given a child FrameworkElement of this element, return this child's tag index relative to this
            element. If the child has the same tag name as this element, it will not be counted.
            </summary>
            <param name="child">The child to find the index of.</param>
            <returns>The child tag index else -1 </returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.ToolTipText">
            <summary>
            The text of the tooltip specified for this element
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.InitializeMappings(ArtOfTest.WebAii.Core.MappingsCollection)">
            <summary>
            Initialize the Mappings collection.
            This method is called when the Mappings collection is accessed for the first time.
            It is then cached
            </summary>
            <param name="mappings">The mappings collection to populate</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.As``1">
            <summary>
            Return this framework element as a strongly-typed control.
            </summary>
            <typeparam name="T">The type of desired control.</typeparam>
            <returns>The desired control instance.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.CastAs``1">
            <summary>
            Returns this framework element as a strongly-typed control without enforcing tag name to match the type.
            This functions gives you free casting abilities between types.
            </summary>
            <typeparam name="T">The type to cast against.</typeparam>
            <returns>The control type</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetXamlTag(System.String)">
            <summary>
            Set the Xaml tag name.
            </summary>
            <param name="tag">The tag name.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the automation reference to this element.
            </summary>
            <param name="reference">The automation reference to assign.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.KeyPress(System.Windows.Forms.Keys,System.Int32,System.Int32,System.Int32)">
            <summary>
            Simulate user key press specific to this element.
            </summary>
            <param name="key">The key code for the key to press.</param>
            <param name="holdFor">How long to hold the key down, in milliseconds.</param>
            <param name="delayBetweenRepetitions">The time in milliseconds to wait between key presses.</param>
            <param name="repeatCount">The count of actions to repeat.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.AsMostSpecificSubtype">
            <summary>
            Returns this framework element as a weakly-typed control, but with the internal structure of the specific control for its XAML
            tag.  This allows the Property Window in VS to get all the properties of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetRectangle">
            <summary>
            Get the bounding rectangle of this element within this Silverlight App.
            </summary>
            <returns>The rectangle of this element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetRectangle(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Get the bounding rectangle of this element relative to another element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetIntRectangle">
            <summary>
            Gets the bounding rectangle of this element within the Silverlight app with integral coordinates
            </summary>
            <returns>The rectangle of this element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsHitTest">
            <summary>
            Determines whether the element can be clicked/selected
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsHitTest(System.Boolean)">
            <summary>
            Determines whether [is hit test] [the specified allow partial visibiltiy].
            </summary>
            <param name="allowPartialVisibiltiy">The allow partial visibiltiy.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsHitTest(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.Boolean)">
            <summary>
            Determines whether [is hit test] [the specified relative parent].
            </summary>
            <param name="relativeParent">The relative parent.</param>
            <param name="allowPartialVisibiltiy">The allow partial visibiltiy.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Highlight">
            <summary>
            Highlight this element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Highlight(System.Boolean)">
            <summary>
            Highlight this element
            </summary>
            <param name="clear">True to clear the highlight on the element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetRealType">
            <summary>
            Gets the real object type. This property returns string.empty on 
            FrameworkElement and all subclasses that inherit from it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Parent">
            <summary>
            Get the parent framework element
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Parent``1">
            <summary>
            Get the parent control of this control that is of type T.
            </summary>
            <remarks>This function will traverse up the VisualTree until it finds the desired type. This function will also match
            custom control type that inherit from type T. For explicit matchings use Parent(string)</remarks>
            <typeparam name="T">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</typeparam>
            <returns>The parent control of specified type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Parent(System.String)">
            <summary>
            Get the parent control that matched the control type. 
            </summary>
            <param name="controlType">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</param>
            <returns>The parent object of specified type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Parent(System.String,System.Boolean)">
            <summary>
            Get the parent control that matched the control type.
            </summary>
            <param name="controlType">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</param>
            <param name="matchBaseType">If set to true, will match a parent control that inherits from 'controlType'</param>
            <returns>The parent object of specified type.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Children">
            <summary>
            Gets the visual children of this element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetNextSibling">
            <summary>
            Get the next sibling of this FrameworkElement.
            </summary>
            <returns>The next sibling else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetPrevSibling">
            <summary>
            Get the previous sibling.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.NextSibling(System.String)">
            <summary>
            Return the next sibling of this control of type.
            </summary>
            <param name="controlType">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</param>
            <returns>The next sibling, else null if this control is the last sibiling.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.NextSibling``1">
            <summary>
            The next sibling control of desired type.
            </summary>
            <typeparam name="T">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</typeparam>
            <returns>The next sibling.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.PreviousSibling(System.String)">
            <summary>
            The previous sibling control of desired type.
            </summary>
            <param name="controlType">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</param>
            <returns>The previous sibling.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.PreviousSibling``1">
            <summary>
            The previous sibling control of specified type.
            </summary>
            <typeparam name="T">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</typeparam>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.AnySibling``1">
            <summary>
            Return any sibling of this control of the specified type.
            </summary>
            <typeparam name="T">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</typeparam>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.AnySibling(System.String)">
            <summary>
            Return any sibling of this control of the specified type.
            This method searches the previous siblings first, then the next sibilings.
            </summary>
            <param name="controlType">The desired control type to match (i.e. 'Button', 'Calendar' ...etc)</param>
            <returns>The matching sibling else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetScreenRectangle">
            <summary>
            Return the actual coordinates of this element in absolute screen coordinates
            taking into account the location of the overall plug-in on the page.
            </summary>
            <remarks>This will take into consideration any Transforms done on the element.</remarks>
            <returns>Screen coordinates of this element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ScrollToVisible">
            <summary>
            Scrolls the web page so that this element is visible in the browser window
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ScrollToVisible(ArtOfTest.WebAii.Core.ScrollToVisibleType)">
            <summary>
            Scrolls the web page so that this element is visible in the browser window
            </summary>
            <param name="scrollType">Where in the window the the element should be after scrolling</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.EnsureClickable">
            <summary>
            Performs best-effort operations to ensure that this element is user-visible and avialable for simulated user actions.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ToXml">
            <summary>
            Gets an Xml formatted string that represents this element and all its children
            This Xml represents the VisualTree.
            </summary>
            <returns>The Xml string. </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Refresh">
            <summary>
            Refresh this FrameworkElement within the VisualTree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Equals(System.Object)">
            <summary>
            Determines whether this FrameworkElement is equal to another, by comparing their AutomationReferences
            </summary>
            <param name="obj">The object to compare this FrameworkElement to</param>
            <returns>True if obj is a FrameworkElement and its AutomationReference refers to the same element as this one's</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetHashCode">
            <summary>
            Calculates and returns the hashcode for this element.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetProperties">
            <summary>
            Reads and returns the specified property from this element.
            </summary>
            <returns>The value of the specified property as a string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetAttachedProperty``1(System.String,System.String)">
            <summary>
            Get value of attached property.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyOwner">The type name of attached property owner.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The value of attached property.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetAttachedProperty``1(System.String,System.String,``0)">
            <summary>
            Set value of attached property.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="propertyOwner">The type name of attached property owner.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetFocus">
            <summary>
            Sets keyboard focus to this element
            </summary>
            <returns>Whether focus was successfully set to this element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ValidateMouseLocationIfNeeded(System.Drawing.Point)">
            <summary>
            Validate that the current location of the mouse is inside the browser window.
            </summary>
            <param name="point">The coordinates of the mouse.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the mouse is outside of the browser window.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ToRealObject">
            <summary>
            Used internally to translate object across application boundaries
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.FromRealObject(System.Object)">
            <summary>
            Used internally to translate object across application boundaries
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ValidateType(System.Type,System.String)">
            <summary>
            Validate a control type with the control tag name.
            </summary>
            <param name="type">The control type.</param>
            <param name="tagName">The tag name to check</param>
            <returns>True/False whether the tag name matches the type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetXamlTagNameFromType(System.Type)">
            <summary>
            Get the Xaml tag name
            </summary>
            <param name="type">The type name to use.</param>
            <returns>Return the Xaml tag name of that type from the registered lookup types</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.EnsureNotProxy">
            <summary>
            Make sure this element is not a proxy.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FrameworkElement._xamlTagLookup">
            <summary>
            The dictionary of tag lookups.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetKnownControlTypes(ArtOfTest.Common.TechnologyType)">
            <summary>
            Return all the known control types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.RegisterElement(System.Type,System.String)">
            <summary>
            Associate a control type with a Xaml tag.
            </summary>
            <param name="controlType">The control type.</param>
            <param name="xamlTagName">The xaml tag name.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetTagNameFromType(System.Type)">
            <summary>
            Get the TagName from a specific type.
            </summary>
            <param name="type">The type.</param>
            <returns>The tag name to use.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.InitKnownXamlControlTypes(System.Type)">
            <summary>
            Initialize all the known types
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetTypeFromTagName(System.String)">
            ==> REDO in light of our custom control's support
            
            <summary>
            Gets the WebAii element proxy type for the given XAML tag
            </summary>
            <param name="tagName"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetControlTypeFromInterface(System.Type)">
            <summary>
            Get the loaded Xaml control type by given interface control type.
            Useful for sharing common Xaml (SL/Wpf) controls.
            </summary>
            <param name="interfaceType">The interface to look for.</param>
            <returns>The loaded Xaml control type, or the default FrameworkElement type if nothing is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Match(ArtOfTest.Common.IFindExpression)">
            <summary>
            Match this FrameworkElement against a specific find expression.
            </summary>
            <param name="findExpr">The find expression to match.</param>
            <returns>Return true/false whether the expression matches.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetDepth(System.Int32)">
            <summary>
            Set the depth of this framework element.
            </summary>
            <param name="depth">The depth to set it to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.AddChildNode(ArtOfTest.Common.ITargetElement)">
            <summary>
            Add a child node to this framework element.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetClosingTag(ArtOfTest.Common.ITargetElement)">
            <summary>
            Ignore for the base FrameworkElement. May be overriden in a derived class to provide additional functionality.
            </summary>
            <param name="closingElement">Whether or not to mark this element as a closing type of element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetChildren">
            <summary>
            Get the children of this framework element.
            </summary>
            <returns>The list of children</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetParent">
            <summary>
            Get the Parent of this element.
            </summary>
            <returns>Return the parent object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetHostParent">
            <summary>
            Not implemented for Silverlight elements.  Returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetParent(ArtOfTest.Common.ITargetElement)">
            <summary>
            Set the parent object of this framework element.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.TechnologyType">
            <summary>
            Get the technology type of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Depth">
            <summary>
            Get the depth of this element in the Visual Tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.IsTestRegion">
            <summary>
            Gets whether or not this element is contained in a test region.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.ParsedElement">
            <summary>
            Get the parsed element under this object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.FrameworkElement.Host">
            <summary>
            Returns the AutomationHost for this object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetUniqueHashCode">
            <summary>
            Calculates and returns the hash code for this element.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.ToString">
            <summary>
            Gets the string representation of this FrameworkElement object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.Capture">
            <summary>
            Capture the image of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.GetProperty``1(System.String)">
            <summary>
            Gets the property value by given name. Will be useful for common translators supporting different technologies (SL/Wpf).
            </summary>
            <typeparam name="T">The type to pass and return.</typeparam>
            <param name="name">The property name.</param>
            <returns>The propterty return type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.FrameworkElement.SetProperty(System.String,System.Object)">
            <summary>
            Sets the property value. Will be useful for common translators supporting different technologies (SL/Wpf).
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The new property name.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.IApplication">
            <summary>
            Use the IApplication interface to manage a wrapped Silverlight application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.VisualTree">
            <summary>
            Gets the VisualTree of this app.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.Bounds">
            <summary>
            Gets the rectangular bounds of this app.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.Desktop">
            <summary>
            Gets the Desktop object for this app.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.ManagedProxy">
            <summary>
            Gets the ManagedProxy for this app.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.IsConnected">
            <summary>
            Checks if we're connected to the automation client
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IApplication.EnableValidateMouseLocation">
            <summary>
            Whether to validate that the mouse will be within the application's bounds before performing a mouse action
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.GetSubtreeFriendlyName(ArtOfTest.WebAii.Silverlight.VisualTree)">
            <summary>
            Gets a friendly name for the specified sub-tree of this IApplication
            </summary>
            <param name="subtree">The sub-tree we want the friendly name of</param>
            <returns>The sub-tree's friendly name</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.PopulateVisualTree">
            <summary>
            Ensures that the IApplication's visual tree is in a valid state
            </summary>
            <returns>A valid VisualTree</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.ScrollElementVisible(ArtOfTest.WebAii.Silverlight.FrameworkElement,ArtOfTest.WebAii.Core.ScrollToVisibleType)">
            <summary>
            Scrolls a control into view
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.GetScreenRectangle(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Gets the rectangle of the element in screen coordinates
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.ResizeContainer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes the browser or application window so its content rectangle is (x, y, width, height)
            if possible. If that rectangle doesn't fit on the screen, then try it at the upper left corner
            of the screen and as close to that size as possible.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.GetToolTipText(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Gets the text of a tooltip on the element
            </summary>
            <param name="element"></param>
            <returns>Any text contained by the element's tooltip, or null if the element has no toolip</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IApplication.Capture(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Captures the image of an element
            </summary>
            <param name="element">The element to capture an image of</param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.IAutomationPeer">
            <summary>
            Implemented by automation objects that have a Silverlight/WPF object peer.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IAutomationPeer.AssignReference(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Assign the reference of this peer.
            </summary>
            <param name="reference">The AutomationReference that corresponds to this peer</param>
            <returns>True/False whether the assignment succeeded.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IAutomationPeer.Serialize">
            <summary>
            Serialize this automation peer to a string.
            </summary>
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IAutomationPeer.Deserialize(System.String)">
            <summary>
            Deserialize this object from a string.
            </summary>
            <param name="objectString">The string representation of this object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IAutomationPeer.Reference">
            <summary>
            Gets or sets the automation reference of this peer.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IAutomationPeer.PropertyBag">
            <summary>
            The automation object property bag
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IAutomationPeer.GetRealType">
            <summary>
            Gets the real object type that this peer represents.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.IClientProcessor">
            <summary>
            This process is implemented by the Silverlight client
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IClientProcessor.ProcessCommand(System.String)">
            <summary>
            Process a request from the framework.
            </summary>
            <param name="command">The command to process.</param>
            <returns>The response after processing the command.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.IClientProcessor.TestConnection">
            <summary>
            Test the connection to the Silverlight application.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ICommunicationProxy">
            <summary>
            Interface for communication across application boundaries.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.SetProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty,ArtOfTest.WebAii.Silverlight.IAutomationPeer,System.Object)">
            <summary>
            Set a property for an automation peer
            </summary>
            <param name="property"></param>
            <param name="peer"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetProperty(ArtOfTest.WebAii.Silverlight.AutomationProperty,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get a property for an automation peer
            </summary>
            <param name="property"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.InvokeMethod(ArtOfTest.WebAii.Silverlight.AutomationMethod,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Invokes a method on an automation peer
            </summary>
            <param name="method"></param>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetVisualTree(System.String)">
            <summary>
            Get the full visual tree of the application
            </summary>
            <param name="startAt"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetVisualTree(System.String,System.String)">
            <summary>
            Get the full visual tree of the application, but only if it's different from the one we already have
            </summary>
            <param name="startAt"></param>
            <param name="hash">The hash of the visual tree we already have</param>
            <returns>A string representation of the visual tree, or null if the tree has not changed</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetAllVisualTrees">
            <summary>
            Gets all visual trees of the application
            </summary>
            <returns>
            An encoded string containing all the visual trees of the application in the format (@@[length]@@[tree])+.
            </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the bounding rectangle for an automation peer
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the bounding rectangle for one automation peer relative to another automation peer
            </summary>
            <param name="peer">The peer whose rectangle to get</param>
            <param name="relativeTo">The reference point peer</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.Highlight(ArtOfTest.WebAii.Silverlight.IAutomationPeer,System.Boolean)">
            <summary>
            Highlight an element on the surface
            </summary>
            <param name="peer">The element to highlight</param>
            <param name="clear">True/False whether to clear it.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetPeerHashCode(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Gets the hash code of the peer.
            </summary>
            <param name="peer">The peer to get the hash code from.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.PublishKnownControlTypes(System.Collections.Generic.List{System.String})">
            <summary>
            Publish the known control types to the Silverlight application.
            </summary>
            <param name="knownTypes"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetTextRecursive(ArtOfTest.WebAii.Silverlight.AutomationReference)">
            <summary>
            Gets the text content of an element or property.  Recursively descends into children of
            an element and collects the text of all TextBlocks contained in it.  Or if the reference
            is string-valued, simply returns that string
            </summary>
            <param name="reference">The target reference (element or property of an element)</param>
            <returns>The text content, as described above</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetVisibility(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the Visibility property value of an element, where the element inherits the Collapsed
            value if any of its visual tree ancestors have Visibility == Collapsed
            </summary>
            <param name="peer">The element whose Visibility value we're retrieving</param>
            <returns>Collapsed if the element or any of its visual tree ancestors have
            Visibility == Collapsed. Otherwise, Visible.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.ScrollToVisible(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Scroll the controls containing an element so that the element comes into view
            </summary>
            <param name="peer">The element to bring into view</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.GetProperties(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Gets a collection of the properties of an element whose values we are able to transfer
            from the application back to the testing framework.
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ICommunicationProxy.Application">
            <summary>
            Get the parent application object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.IPeerConverter">
            <summary>
            Interface to help manage converting to/from real object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IPeerConverter.ToRealObject">
            <summary>
            Convert this object to a real object.
            </summary>
            <returns>A real object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.IPeerConverter.FromRealObject(System.Object)">
            <summary>
            Converts a real object to this object.
            </summary>
            <param name="o">The real object to convert from.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ItemCollection">
            <summary>
            This class wraps the collection of items contained in a listbox.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.#ctor">
            <summary>
            Creates a new empty ItemCollection object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.Collection">
            <summary>
            Infrastructure use
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.FromRealObject(System.Object)">
            <summary>
            Wraps the items contained in a real item collection and stores them in this object.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.ToRealObject">
            <summary>
            Not supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.GetRealType">
            <summary>
            Gets the type of the real object that this class wraps.
            </summary>
            <returns>A string represtation for this real type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.Add(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.Contains(System.String)">
            <summary>
            Checks whether or not the specified item is contained in the collection.
            </summary>
            <param name="value">The item to check on.</param>
            <returns>True/false whether or not the item is contained in this collection.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.IndexOf(System.String)">
            <summary>
            Gets the index number for the indicated item.
            </summary>
            <param name="value">The item to get the index of.</param>
            <returns>An index value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.Insert(System.Int32,System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Not supported.</param>
            <param name="value">Not supported.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.IsFixedSize">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.IsReadOnly">
            <summary>
            This class is always read only once created. It always returns true.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.Remove(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index. Setting is not supported.
            </summary>
            <param name="index">The 0 based index of the item to get.</param>
            <returns>The itme at the index.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ItemCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.IsSynchronized">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.ItemCollection.SyncRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ObjectSerializer">
            <summary>
            Static class used to serialize/deserialize JSON objects to .NET objects.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectSerializer.Serialize(System.Type,System.Object)">
            <summary>
            Serializes a .NET object into a JSON.
            </summary>
            <param name="t">The objects type to serialize.</param>
            <param name="o">the object to serialize into a JSON.</param>
            <returns>The serialized JSON.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ObjectSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the JSON string into a .NET object.
            </summary>
            <param name="t">The type to deserialize the string into.</param>
            <param name="jsonString">The input JSON.</param>
            <returns>A deserialized .NET object of type t.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.XamlFindExpression">
            <summary>
            Holds a Silverlight element FindExpression.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.XamlFindExpression.SupportedSearchType">
            <summary>
            Gets the XamlSearchType as a Type object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.XamlSearchType">
            <summary>
            Different types of supported find expressions.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.AutomationId">
            <summary>
            The UIAutomation id given to the Xaml element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.TextContent">
            <summary>
            The text content of this Xaml element. Typically a TextBlock
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.XamlPath">
            <summary>
            A Xaml Expression Path (i.e - /button[0]/textblock[id=~foo]/)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.XamlTag">
            <summary>
            The Xaml tag type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.XamlTagBase">
            <summary>
            The tag base type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.Name">
            <summary>
            The Xaml tag name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.TagIndex">
            <summary>
            The Xaml tag index.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.UnKnown">
            <summary>
            UnKnown
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.Uid">
            <summary>
            Unique identifier (Silverlight-side hashcode / object reference)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.XamlSearchType.VirtualizedIndex">
            <summary>
            Index within a VirtualizingStackPanel
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ReflectionUtils">
            <summary>
            This class contains the .NET implementation of some utility methods that are used in both the WebAii framework and the Silverlight
            extension
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ReflectionUtils.GetAssemblies">
            <summary>
            Gets a list of the assemblies that are loaded in the current AppDomain
            </summary>
            <returns>The assemblies that are loaded in the current AppDomain</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.ReflectionUtils.GetType(System.String)">
            <summary>
            Get type from loaded assemblies.
            </summary>
            <param name="typeName">The name of the file.</param>
            <returns>Type object. Null if type not found.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection">
            <summary>
            Holds a colleciton of selected dates for a Silverlight Calendar control.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.#ctor">
            <summary>
            Constructs a new SelectedDatesCollection object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Collection">
            <summary>
            Gets / Sets the collection of DateTime objects this class contains.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Item(System.Int32)">
            <summary>
            Gets / Sets the DateTime at the specified index.
            </summary>
            <param name="index">The index to get/set the DateTime at. The index is 0 based.</param>
            <returns>The DateTime object at the specified index.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.FromRealObject(System.Object)">
            <summary>
            Converts a real Silverlight object into this wrapped object.
            </summary>
            <param name="obj">The real Silverlight object to convert.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.ToRealObject">
            <summary>
            Throws the NotSupportedException because this object cannot be converted into a real Silverlight object.
            </summary>
            <returns>Does not return.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.GetRealType">
            <summary>
            Gets a string representing the Silverlight type this class wraps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.IndexOf(System.DateTime)">
            <summary>
            Gets the index of the specified DateTime.
            </summary>
            <param name="item">The DateTime to get the index of.</param>
            <returns>The index of the DateTime if found in the collection. Returns -1 if not found. The index is 0 based.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Insert(System.Int32,System.DateTime)">
            <summary>
            Inserts the specified DateTime into the collection at the specified index. Existing DateTime
            values are moved down one index.
            </summary>
            <param name="index">The index to insert into.</param>
            <param name="item">The DateTime to insert.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the DateTime at the specified index from this collection.
            </summary>
            <param name="index">The index of the DateTime to remove. The index is 0 based.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Add(System.DateTime)">
            <summary>
            Adds a DateTime to this collection.
            </summary>
            <param name="item">The DateTime to add.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Contains(System.DateTime)">
            <summary>
            Returns true if this collection contains the specified DateTime.
            </summary>
            <param name="item">The DateTime to look for.</param>
            <returns>true if the specified DateTime is found. Else returns false.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.CopyTo(System.DateTime[],System.Int32)">
            <summary>
            Copies this collection to the specified array.
            </summary>
            <param name="array">The DateTime array to copy this collection to.</param>
            <param name="arrayIndex">The starting index in the array to copy to. This index is 0 based.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Count">
            <summary>
            Returns the number of items contained in this collection.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.IsReadOnly">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.Remove(System.DateTime)">
            <summary>
            Removes the specified DateTime from the collection.
            </summary>
            <param name="item">The DateTime to remove.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SelectedDatesCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that supports a simple iteration over a collection of DateTime objects.
            </summary>
            <returns>An IEnumerator&lt;DateTime&gt;</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightApp">
            <summary>
            Class that represents a Silverlight Application hosted in a browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._customSilverlightAssemblies">
            <summary>
            Custom Silverlight assemblies to include support for in automation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._existingApps">
            <summary>
            Existing Apps Cache
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._knownSilverlightControls">
            <summary>
            Known Silverlight controls
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._content">
            <summary>
            App Content
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._settings">
            <summary>
            App Settings
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._proxy">
            <summary>
            The proxy through which all elements
            communicate to Managed Silverlight Application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._plugin">
            <summary>
            The actual plugin tag
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._getPrefix">
            <summary>
            the Getter prefix for the plugin
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._enableValidateMouseLocation">
            <summary>
            Whether to validate the mouse location before clicking on an element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._popupTrees">
            <summary>
            All open Popups' visual trees
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp._wholeAppFind">
            <summary>
            Find object that searches the main app and all open Popups
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp.CREATE_EXTENSION">
            <summary>
            The extension entry script call.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightApp.LOCALHOST_FORMAT">
            <summary>
            The local host location where the application will be served from
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ClearAppCache">
            <summary>
            Clear the application's cache.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.GetApp(ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl,System.Int32,System.Boolean)">
            <summary>
            Gets the Silverlight application for the specified HtmlControl host.
            </summary>
            <param name="host"></param>
            <param name="timeout"></param>
            <param name="catchedOnly"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.Connect">
            <summary>
            Connect to the Silverlight app
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.Connect(System.Int32)">
            <summary>
            Connect the silverlight application to the automation host.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.FindName(System.String)">
            <summary>
            Finds an element with a specific name in the Silverlight Application.
            If the name is not found using the Root.FindName, it will use the
            VisualTree to traverse the tree and find the first name occurrence.
            </summary>
            <remarks>This method is a short-cut for Find.ByName()</remarks>
            <param name="name">The name to find.</param>
            <returns>The found FrameworkElement, else returns null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.FindName``1(System.String)">
            <summary>
            Finds an element with a specific name in the Silverlight Application.
            If the name is not found using the Root.FindName(), it will use the
            VisualTree to traverse the tree and find the first name occurrence.
            </summary>
            <remarks>This method is a short-cut for Find.ByName()</remarks>
            <typeparam name="T">The type to cast this FrameworkElement to.</typeparam>
            <param name="name">The name to find.</param>
            <returns>The found FrameworkElement, else returns null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ClearHighlight">
            <summary>
            Clear any highlighting on the Silverlight surface.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ElementsFromPoint(System.Drawing.Point)">
            <summary>
            Gets a list of FrameworkElements under the specified point in the application
            </summary>
            <param name="p">The point to hit-test, in application-relative coordinates</param>
            <returns>A list of FrameworkElements under the point, starting with the topmost FrameworkElement</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.RefreshVisualTrees">
            <summary>
            Refreshes the main visual tree for the application as well as any open Popup visual trees.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ElementFromPoint(System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
            Returns a proxy for the element at the specified application coordinates and its rectangle
            </summary>
            <param name="x">The x-coordinate of the element.</param>
            <param name="y">The y-coordinate of the element.</param>
            <param name="rect">Puts the rectangular coordinates of the element found at the xy coordinates specified.</param>
            <returns>A wrapped FrameworkElement element representing the element at the specified coordinates.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.GetFocusedElement">
            <summary>
            Returns the element that currently has the keyboard focus
            </summary>
            <returns>The element that currently has keyboard focus, or null if no element has keyboard focus</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.WaitUntilExtensionCreated(System.String)">
            <summary>
            Wait until the extension is created
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Source">
            <summary>
            Get or set the source of this application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.IsConnected">
            <summary>
            Gets whether the SilverlightApp is connected to the automation host
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.IsLoaded">
            <summary>
            Gets whether this plugin is loaded or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Content">
            <summary>
            Gets the 'content' object of this plugin: plugin.content.xxx
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Settings">
            <summary>
            Gets the 'settings' object of this plugin: plugin.settings.xxx
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.ManagedProxy">
            <summary>
            The proxy that allows this app to communicate
            with the managed world inside a silverlight application
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Plugin">
            <summary>
            Gets the actual plugin element (object or embed) as an HtmlControl
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Host">
            <summary>
            Gets the Html tag hosting this Silverlight App as an HtmlControl object.
            (The parent Html tag of the object/embed tag)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.OwnerBrowser">
            <summary>
            Gets the owner browser object instance of this silverlight application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.EnableValidateMouseLocation">
            <summary>
            Gets / Sets whether to validate mouse click locations before allowing user interaction automation
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Desktop">
            <summary>
            Get the Desktop object used for real Keyboard/Mouse automation.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ElementFromPoint(System.Int32,System.Int32)">
            <summary>
            Returns a proxy for the element at the specified application coordinates
            </summary>
            <param name="x">The x-coordinate of the element</param>
            <param name="y">The y-coordinate of the element</param>
            <returns>A proxy for the element at those coordinates, or null if no element corresponds to the specified coordinates</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Find">
            <summary>
            Gets the XamlFind object used to 
            search the silverlight plugin VisualTree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.Bounds">
            <summary>
            Get the Rectangle bounds of this application 
            relative to the entire screen.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.UniqueId">
            <summary>
            A unique identifier that identifies this plugin instance.
            This id is updated only when the plug-in is reloaded on a postback or a browser refresh.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.AddCustomAssembly(System.String,System.IO.MemoryStream)">
            <summary>
            Add a custom assembly to the list of types that will be available
            for automation in addition to what ArtOfTest.WebAii.Silverlight.UI contains.
            </summary>
            <param name="assemblyName">The name of the assembly to add.</param>
            <param name="assembly">The assembly to include as a <see cref="T:System.IO.MemoryStream"/>. This must be a Silverlight compiled assembly.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.InitializeCustomTypes">
            <summary>
            Searches the AppDomain for assemblies that provide custom Silverlight types and adds the assemblies containing those
            types to the custom assembly list
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.InitializeCustomTypes(System.Collections.Generic.IList{ArtOfTest.Common.Extensibility.ICustomSilverlightTypesProvider})">
            <summary>
            Initializes the list of custom type providers that can provide automation in addition to
            what ArtOfTest.WebAii.Silverlight.UI contains
            </summary>
            <param name="providers">The list of providers to initialize.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.CustomAssemblies">
            <summary>
            Gets the list of custom assemblies included
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.ParseBorder(System.String)">
            <summary>
            Converts the CSS border width shorthands into IE pixel values.  These are wrong for other browsers.
            </summary>
            <param name="border"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.GetChildHosts">
            <summary>
            Get all contained hosts. This will always return an empty array for SilverlightApp hosts.
            </summary>
            <returns>Contained Hosts</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightApp.FriendlyName">
            <summary>
            Returns a friendly name for this host
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightApp.EnsureStateIsCurrent">
            <summary>
            Will force all visual trees in the application to refresh.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightAppContent">
            <summary>
            Represents the access point to the content of the Silverlight App as described here: http://msdn2.microsoft.com/en-us/library/bb412394.aspx
            Note: Currently all properties are Read-Only.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppContent.#ctor(ArtOfTest.WebAii.Silverlight.SilverlightApp)">
            <summary>
            The parent Silverlight Application
            </summary>
            <param name="parentApp"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightAppFinder">
            <summary>
            A static class used to obtain a list of all Silverlight Applications on a specific page
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppFinder.SilverlightApps(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Returns an array of all Silverlight Applications on this page.
            </summary>
            <param name="browser">The browser instance.</param>
            <returns>An array of Silverlight Application.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppFinder.GetSilverlightAppIndex(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Controls.HtmlControls.HtmlControl)">
            <summary>
            Finds the index into the SilverlightApp array of the specified plugin
            </summary>
            <param name="browser">The containing Browser</param>
            <param name="plugin">The Silverlight plugin object of which we're looking up the index</param>
            <returns>The index of the specified plugin in the browser's SilverlightApps list, or -1 if not found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppFinder.IsSilverlightPlugin(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Detects whether the element is an object tag hosting
            a Silverlight plugin
            </summary>
            <param name="element">The element to inspect</param>
            <returns>Returns true/false whether the element is a Silverlight plugin</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings">
            <summary>
            Represents a settings object as described here: http://msdn2.microsoft.com/en-us/library/bb412394.aspx
            Note: Currently all properties are Read-Only.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.#ctor(ArtOfTest.WebAii.Silverlight.SilverlightApp)">
            <summary>
            Create a new ControlSettings object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.Background">
            <summary>
            Gets the background color of the rectangular region that display XAML content. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.EnableFramerateCounter">
            <summary>
            Gets a value that determines whether to display the current framerate in the hosting browser's status bar. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.EnableRedrawRegions">
            <summary>
            Gets the areas of the control that are being redrawn each frame. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.EnableHtmlAccess">
            <summary>
            Determines whether the hosted content in the Silverlight control has access to the browser Document Object Model (DOM). 
            // BUG: Silverlight returns true but html access is disabled
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.MaxFrameRate">
            <summary>
            Gets the maximum number of frames to render per second. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppSettings.Windowless">
            <summary>
            Gets whether the Silverlight control displays as a window-less control. 
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightAppsList">
            <summary>
            A collection of silverlight applications.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppsList.#ctor">
            <summary>
            Constructs a new SilverlightAppsList object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppsList.Item(System.Int32)">
            <summary>
            Get a Silverlight Application using its index.
            </summary>
            <param name="index">The index</param>
            <returns>The Silverlight App.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightAppsList.GetApp(System.Int32)">
            <summary>
            Returns the SilverlightApplication without calling Connect on it.
            You can use this method to call the Connect(loadTimeout) with a custom timeout for your application
            </summary>
            <param name="index">The application index</param>
            <returns>The Silverlight Application</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightAppsList.Item(System.String)">
            <summary>
            Get a Silverlight Application using its html host id (i.e the owner div id)
            </summary>
            <param name="hostId">The host id</param>
            <returns>The Silverlight App</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightCommand">
            <summary>
            For internal use only. Holds a command to be processed by the Silverlight client.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Type">
            <summary>
            Get or set the command type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Reference">
            <summary>
            Get or set the reference
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Reference2">
            <summary>
            Get / Set secondary reference
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Property">
            <summary>
            The property to use
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Method">
            <summary>
            Gets / Sets the method to invoke
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightCommand.Value">
            <summary>
            Additional info for this command
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightCommand.AsString">
            <summary>
            Return this command as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightProxy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the real rectangle of an elements
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the rectangle of one element relative to another
            </summary>
            <param name="peer"></param>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.InvokeMethod(ArtOfTest.WebAii.Silverlight.AutomationMethod,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Invokes method on automation peer's client side.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="peer">Automation peer, containing the method.</param>
            <returns>The object client side method returned.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.PublishKnownControlTypes(System.Collections.Generic.List{System.String})">
            <summary>
            Publish Known Control types
            </summary>
            <param name="knownTypes"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.HitTest(System.Drawing.Point)">
            <summary>
            Gets a list of all FrameworkElements under the specified point
            </summary>
            <param name="p">The point to hit test</param>
            <returns>List of all elements under the point</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.HitTestLight(System.Int32,System.Int32)">
            <summary>
            Returns a string containing the uid and rectangle of the top element at the specified point in the application
            </summary>
            <param name="x">x-coordinate of the point</param>
            <param name="y">y-coordinate of the point</param>
            <returns>A string in the format (uid);(left);(top);(width);(height)</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.CreateCommand(ArtOfTest.WebAii.Silverlight.SilverlightCommand)">
            <summary>
            Create a browser command from the SilverlightCommand
            </summary>
            <param name="SlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightProxy.ExecuteSLCommand(ArtOfTest.WebAii.Silverlight.SilverlightCommand)">
            <summary>
            Push the command to the browser.
            </summary>
            <param name="cmd">The command to push</param>
            <returns>The command response</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightResponse">
            <summary>
            For internal use only. Holds the response returned by the client processor after processing a Silverlight command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightResponse.Status">
            <summary>
            The returned status from the Silverlignt client after processing a Silverlight command.
            Either OK, ERROR or ELEMENT_NOT_FOUND.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightUtils.OriginalSourceUriRegex">
            <summary>
            Regex to extract the OriginalSourceUri property from the silverlight application's metadata file.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.AppendAutomationExtension(System.IO.MemoryStream,System.Boolean)">
            <summary>
            Given a .Xap file, go ahead and append our WebAii Automation Extension to it.
            </summary>
            <param name="originalXapFile">The original xap file buffer</param>
            <param name="forceUpdate">When true, we'll force the update of the AutomationExtension</param>
            <returns>The re-packaged xap file as a binary stream.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.TryUpdateAppManifest(System.IO.MemoryStream,System.IO.MemoryStream@)">
            <summary>
            Update the AppManifest file of Silverlight if necessary
            </summary>
            <param name="inputManifest">The manifest file stream.</param>
            <param name="updatedManifest">The potentially updated manifest file stream</param>
            <returns>Whether or not the manifest was updated</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.UpdateIndexHtml(System.String,System.String,System.Boolean)">
            <summary>
            For Silverlight desktop applications we need to modify index.html.
            The source needs to be an actual file path (not offline://...)
            enablehtmlaccess needs to be true
            The html doc created by outofbrowser installation is an xhtml document, so we can parse it as xml
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.SilverlightUtils.ProgramFiles">
            <summary>
            Get the location of Program Files on this computer
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.OutOfBrowserDirectory(System.Boolean)">
            <summary>
            The base directory where all Silverlight Desktop Apps are located
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.GetAbsoluteAppPath(System.String,System.String@,System.Boolean@)">
            <summary>
            Given the relative app directory to an OOB application, validate it, and return the absolute path
            </summary>
            <param name="relativePath">The relative path to the application, for example, 328640058.www.microsoft.com</param>
            <param name="absolutePath">Output: The absolute path to the application, for example, C:\Users\thisuser\AppData\LocalLow\Microsoft\Silverlight\OutOfBrowser\328640058.www.microsoft.com</param>
            <returns>True if the absolute path exists, false if it does not</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.SilverlightUtils.MemoryStreamFromFilename(System.String)">
            <summary>
            Populate and return a memory stream from a filename
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.UserInteractionHelper">
            <summary>
            Collection of methods to assist the UserInteraction class.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteractionHelper.GetCenterPoint(System.Drawing.Rectangle)">
            <summary>
            Return the center point of this rectangle.
            </summary>
            <param name="rectangle">The rectangle to calculate center off.</param>
            <returns>The center point.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32)">
            <summary>
            Drag this element from its center to the x,y offset.
            </summary>
            <param name="x">The x offset from the center.</param>
            <param name="y">The y offset from the center.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Drag this element from a specified offset
            </summary>
            <param name="x">The number of pixels to drag the element horizontally</param>
            <param name="y">The number of pixels to drag the element vertically</param>
            <param name="xOffset">The horizontal offset within the element's rectangle from which to begin the drag</param>
            <param name="yOffset">The vertical offset within the element's rectangle from which to begin the drag</param>
            <param name="offsetRef">The reference used to calculate the offsets within the element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Boolean)">
            <summary>
            Drag this element from a specified offset
            </summary>
            <param name="x">The number of pixels to drag the element horizontally</param>
            <param name="y">The number of pixels to drag the element vertically</param>
            <param name="xOffset">The horizontal offset within the element's rectangle from which to begin the drag</param>
            <param name="yOffset">The vertical offset within the element's rectangle from which to begin the drag</param>
            <param name="offsetRef">The reference used to calculate the offsets within the element</param>
            <param name="skipValidateDropLocation">Whether to skip validation of the drop location</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Drag this element from its center to the center of the dropTarget
            </summary>
            <param name="dropTarget">The drop target element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,ArtOfTest.WebAii.Silverlight.FrameworkElement,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Drag this element to the dropTarget
            </summary>
            <param name="startOffsetX">The horizontal offset within this element from which to begin the drag</param>
            <param name="startOffsetY">The vertical offset within this element from which to begin the drag</param>
            <param name="startOffsetReference">The reference used to calculate the offsets within this element</param>
            <param name="dropTarget">The drop target element</param>
            <param name="endOffsetX">The horizontal offset within the drop target at which to end the drag</param>
            <param name="endOffsetY">The vertical offset within the drop target at which to end the drag</param>
            <param name="endOffsetReference">The reference used to calculate the offsets within the drop target element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,ArtOfTest.Common.ActionPointUnitType,ArtOfTest.WebAii.Silverlight.FrameworkElement,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,ArtOfTest.Common.ActionPointUnitType,System.Boolean)">
            <summary>
            Drag this element to the dropTarget
            </summary>
            <param name="startOffsetX">The horizontal offset within this element from which to begin the drag</param>
            <param name="startOffsetY">The vertical offset within this element from which to begin the drag</param>
            <param name="startOffsetReference">The reference used to calculate the offsets within this element</param>
            <param name="startUnitType"></param>
            <param name="dropTarget">The drop target element</param>
            <param name="endOffsetX">The horizontal offset within the drop target at which to end the drag</param>
            <param name="endOffsetY">The vertical offset within the drop target at which to end the drag</param>
            <param name="endOffsetReference">The reference used to calculate the offsets within the drop target element</param>
            <param name="skipValidateDropLocation">Whether to skip validation of the drop location</param>
            <param name="endUnitType"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Perform a drag to with an auto detection option of the hot spot.
            </summary>
            <param name="x">The x offset from the center.</param>
            <param name="y">The y offset from the center.</param>
            <param name="autoDetectStartHotSpot">Whether to auto-detect the hot spot at the start of the drag or no.</param>
            <remarks>The function uses mouse cursor change (from default cursor) to detect the hot spot. If the hot spot does not change
            the mouse when over it, this function will not be able to detect the spot. This function uses a 10 pixel range to scan
            for hotspots from the center point of this element.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor,System.Int32)">
            <summary>
            Perform a drag to with an auto detection option of the hot spot.
            </summary>
            <param name="x">The x offset from the center.</param>
            <param name="y">The y offset from the center.</param>
            <param name="autoDetectStartHotSpot">Whether to auto-detect the hot spot at the start of the drag or no.</param>
            <param name="hotSpotCursor">A specific cursor to check for as the hot spot indicator</param>
            <param name="radius">The search radios from the center point of the source element.</param>
            <remarks>The function uses mouse cursor change to detect the hot spot. If the hot spot does not change
            the mouse, this function will not be able to detect the spot</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DragTo(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor,System.Int32,System.Boolean)">
            <summary>
            Perform a drag to with an auto detection option of the hot spot.
            </summary>
            <param name="x">The x offset from the center.</param>
            <param name="y">The y offset from the center.</param>
            <param name="autoDetectStartHotSpot">Whether to auto-detect the hot spot at the start of the drag or no.</param>
            <param name="hotSpotCursor">A specific cursor to check for as the hot spot indicator</param>
            <param name="radius">The search radios from the center point of the source element.</param>
            <remarks>The function uses mouse cursor change to detect the hot spot. If the hot spot does not change
            the mouse, this function will not be able to detect the spot</remarks>
            <param name="skipValidateDropLocation">Whether to skip validation of the drop location</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.ClickPoint(System.Drawing.Point)">
            <summary>
            Click an absolute point on the screen.
            </summary>
            <param name="absolutePoint">The point to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.ClickPoint(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Point)">
            <summary>
            Click an absolute point on the screen.
            </summary>
            <param name="clickType">The mouse click type to use.</param>
            <param name="absolutePoint">The absolute point to click</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click(ArtOfTest.WebAii.Core.MouseClickType)">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
            <param name="clickType">The mouse click type to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Point)">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
            <param name="clickType">The mouse click type to use. </param>
            <param name="offsetPoint">The offset point to use from the TopLeft corner of the control</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
            <param name="clickType">The mouse click type to use. </param>
            <param name="x">The X-coordinate of the offset point to use</param>
            <param name="y">The Y-coordinate of the offset point to use</param>
            <param name="reference">The desired reference point to use to calculate the offset</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,ArtOfTest.Common.ActionPointUnitType,System.Windows.Forms.Keys)">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
            <param name="clickType">The mouse click type to use. </param>
            <param name="x">The X-coordinate of the offset point to use</param>
            <param name="y">The Y-coordinate of the offset point to use</param>
            <param name="reference">The desired reference point to use to calculate the offset</param>
            <param name="unitType">The units in which the X and Y coordinates are specified</param>
            <param name="modifierKeys">Combination of modifier keys to hold while clicking</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Click this control by moving the mouse to it and click it.
            </summary>
            <param name="clickType">The mouse click type to use. </param>
            <param name="offsetPoint">The offset point to use from the reference specified of the control</param>
            <param name="reference">The desired reference point to use to calculate the offset</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.MouseMove(System.Collections.Generic.List{System.Drawing.Point},System.Int32,System.Boolean)">
            <summary>
            Move the mouse along the defined path.
            </summary>
            <param name="path">The path as a series of points.</param>
            <param name="delayBetweenPathPoints">Delay between mouse moves within the path points in msec.</param>
            <param name="firstPointIsElementCenter">If set to true, will assume that the first point of the path is this element's center point.
            Else will simply use the passed in path.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.MouseEnter(ArtOfTest.Common.OffsetReference,System.Int32)">
            <summary>
            Enter this elemnet from the offsetreference side.
            </summary>
            <param name="enterSide">The side to enter from.</param>
            <param name="distanceMultiple">If this is set to 1, then the mouse will enter from a starting point
            that is the same distance between that offsetReference corner/side and the center of the element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.MouseEnter(ArtOfTest.Common.OffsetReference)">
            <summary>
            Enter this element from a certain direction.
            </summary>
            <param name="enterSide">The side to enter from</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.MouseLeave(ArtOfTest.Common.OffsetReference,System.Int32)">
            <summary>
            Leave this element from a certain direction.
            </summary>
            <param name="leaveSide">The direction to leave from</param>
            <param name="distanceMultiple"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.MouseLeave(ArtOfTest.Common.OffsetReference)">
            <summary>
            Leave this element from a certain direction.
            </summary>
            <param name="leaveSide">The direction to leave from</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.HoverOver">
            <summary>
            Hover over this element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.HoverOver(System.Drawing.Point)">
            <summary>
            Hover over a specific point relative to the element.
            </summary>
            <param name="p">The point to hover over relative to the top left corner of this element. .</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.HoverOver(System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Hover over a specific point in this element.
            </summary>
            <param name="x">The x-coordinate of the offset</param>
            <param name="y">The y-coordinate of the offset</param>
            <param name="reference">The reference point for the offset</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.HoverOver(System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,ArtOfTest.Common.ActionPointUnitType)">
            <summary>
            Hover over a specific point in this element.
            </summary>
            <param name="x">The x-coordinate of the offset</param>
            <param name="y">The y-coordinate of the offset</param>
            <param name="reference">The reference point for the offset</param>
            <param name="unitType">The unit type for the x and y coordinates</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.TurnMouseWheel(System.Int32,ArtOfTest.WebAii.Core.MouseWheelTurnDirection,System.Boolean)">
            <summary>
            Turn the mouse wheel over over this element.
            </summary>
            <param name="delta">The delta to turn the wheel.</param>
            <param name="direction">The turn direction.</param>
            <param name="clickFirst">Whether you want the element clicked first.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.HoverOver(System.Drawing.Rectangle)">
            <summary>
            Hover over a rectangle.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.TypeText(System.String,System.Int32,System.Boolean)">
            <summary>
            Type text as a real user.
            </summary>
            <param name="text">The text to type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="clickFirst">Whether to click the element first before typing. Used to place cursor in TextBoxes for example.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.TypeText(System.String,System.Int32)">
            <summary>
            Type text as a real user. By default click the element to place the cursor in it.
            </summary>
            <param name="text">The text to type.</param>
            <param name="keyPressTime">The delay between each press</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.TypeText(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Type text as a real user.
            </summary>
            <param name="text">The text to type.</param>
            <param name="keyPressTime">The delay between each press</param>
            <param name="holdTime">The delay between pressing and releasing each key</param>
            <param name="clickFirst">Whether to click the element first before typing. Used to place cursor in TextBoxes for example.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.KeyDown(System.Windows.Forms.Keys)">
            <summary>
            Press key down.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.KeyUp(System.Windows.Forms.Keys)">
            <summary>
            Press key up.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.KeyPress(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Press a key and hold it down for a specific period of time.
            </summary>
            <param name="key">The key code for the key to press.</param>
            <param name="holdFor">How long to hold the key down, in milliseconds.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DetectHotSpot(System.Int32)">
            <summary>
            Get the hot spot within this element that causes the mouse to change shape.
            </summary>
            <param name="searchRadius">The search radius from the center point of this element.</param>
            <returns>The target point.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.DetectHotSpot(System.Int32,System.Windows.Forms.Cursor)">
            <summary>
            Get the hot spot within this element that causes the mouse to change to the specified cursor
            </summary>
            <param name="searchRadius">The search radius from the center point of this element.</param>
            <param name="cursor">The cursor to check.</param>
            <returns>The target point.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.UserInteraction.ValidateMouseLocationIfNeeded(System.Drawing.Point)">
            <summary>
            Validate the location of the mouse.
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.VisualFind">
            <summary>
            VisualFind is used to search the Visual Tree of the Silverlight Application.
            It provides a rich set of API to do rich search.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualFind._parentApp">
            <summary>
            The parent app.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualFind._strategy">
            <summary>
            The search strategy in the VisualTree.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualFind._waitForElementsTimeout">
            <summary>
            The time out to use when strategy = AlwaysWaitOnElement
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualFind._searchRoot">
            <summary>
            The cached visual element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualFind._scopedSearch">
            <summary>
            Whether this Find object is coupled to a SilverlightApp or not
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.#ctor(ArtOfTest.WebAii.Silverlight.IApplication)">
            <summary>
            Create a new VisualFind object. Used for the Entire App.
            </summary>
            <param name="parentApp">The owner application.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.#ctor(ArtOfTest.WebAii.Silverlight.FrameworkElement,ArtOfTest.WebAii.Silverlight.IApplication)">
            <summary>
            Create a new VisualFind object. Used for the scoped elements.
            </summary>
            <param name="rootElement">The root visual element</param>
            <param name="parentApp">The parent app.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.AllByAutomationId(System.String)">
            <summary>
            Finds all controls with a given automation id
            </summary>
            <param name="id">The id to search for</param>
            <returns>A list of all controls with the given id</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByTextContent(System.String)">
            <summary>
            Return the element that contain the specified text.
            </summary>
            <param name="textContent">The text to look for. By default, we will use exact text, if you wish
            to use partial text then prefix the text with a '~' example: ByTextContent("~partialText")</param>
            <returns>The found element.</returns>
            <remarks>The method respects all special characters. Check the ArtOfTest.Common.FindSpecialChars enumeration.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByName``1(System.String)">
            <summary>
            Return the element with specified name as the desired type.
            </summary>
            <typeparam name="T">The desired type of element to return.</typeparam>
            <param name="name">The element's name.</param>
            <returns>The object if found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByName(System.String)">
            <summary>
            Search the Visual Tree with an element with a certain name.
            </summary>
            <param name="name">The name to find.</param>
            <returns>The first visual element with the specified name</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByAutomationId(System.String)">
            <summary>
            Search the Visual Tree for an element with a certain automation ID
            </summary>
            <param name="id">The automation ID to search for</param>
            <returns>The first visual element with the specified automation ID</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByAutomationId``1(System.String)">
            <summary>
            Search the Visual Tree for an element with a certain automation ID and return it as a strongly-typed control
            </summary>
            <typeparam name="T">The desired control type</typeparam>
            <param name="id">The automation ID to search for</param>
            <returns>The first visual element with the specified automation ID, cast to the specified type</returns>
            <remarks>
            This method does not limit the scope of its search only to controls whose types match T.  It searches all controls, and attempts
            to cast the first match to type T.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByType``1">
            <summary>
            Find the first control of certain type.
            </summary>
            <typeparam name="T">The type of the control</typeparam>
            <returns>The control or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByBaseType``1">
            <summary>
            Finds the first element of type or null if no element is matching the criteria.
            If interface type searches for all types inheriting the specified one.
            Else, behaves like standard ByType method.
            </summary>
            <typeparam name="T">The type of element</typeparam>
            <returns>The element if found, or null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByType(System.String)">
            <summary>
            Find the first control of type defined
            </summary>
            <param name="controlType">The control type defined</param>
            <returns>The found control or null if not found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByCustom(System.Predicate{ArtOfTest.WebAii.Silverlight.FrameworkElement})">
            <summary>
            Find using custom logic.
            </summary>
            <param name="customLogic">Custom logic predicate</param>
            <returns>The found element else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.InternalAs``1(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Internal As for cases when element is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByReference(ArtOfTest.WebAii.Silverlight.AutomationReference,System.Boolean)">
            <summary>
            Given an automation reference, lookup 
            the visual element that this reference is pointing to.
            </summary>
            <param name="reference">The AutomationReference</param>
            <param name="throwIfNotFound"></param>
            <returns>The FrameworkElement if found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.RefreshRoot">
            <summary>
            Refresh the visual tree this VisualFind object searches
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ReturnOrThrow(ArtOfTest.WebAii.Silverlight.FrameworkElement,System.String)">
            <summary>
            Return the VisualElement or throw using the provided message.
            </summary>
            <param name="e">The Element core.</param>
            <param name="throwMessage">The message to throw if the Element is null</param>
            <returns>The Visual Element object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ReturnStronglyTypedCollection``1(System.Collections.Generic.IEnumerable{ArtOfTest.WebAii.Silverlight.FrameworkElement})">
            <summary>
            Given an IEnumerable, return a strongly typed list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fxlist"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.SplitPathSegment(System.String,System.String@,System.Int32@)">
            <summary>
            Split on path segment into nodename,index.
            </summary>
            <param name="segment">The original segment.</param>
            <param name="nodeName">The node name.</param>
            <param name="uid">Returns the unique ID part of the path.</param>
            <returns>The index</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualFind.Strategy">
            <summary>
            Gets or sets the find strategy to use when searching for elements in the
            VisualTree
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualFind.WaitOnElementsTimeout">
            <summary>
            Gets or sets the time out to use when Strategy=AlwaysWaitForElementsVisible
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualFind.SearchRoot">
            <summary>
            Gets the Search Root for this FrameworkElement
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualFind.OwnerApp">
            <summary>
            Gets the owner app of this Find object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByExpression(ArtOfTest.WebAii.Silverlight.XamlFindExpression,System.Boolean)">
            <summary>
            Finds the first element in the tree that matches the find expression. It doesn't wait an element to be populated, returns immediately.
            </summary>
            <param name="expression">The find expression.</param>
            <param name="includeRoot">Whether to include the root node in the search</param>
            <returns>The first element it finds else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByExpressionReturnOrThrow(ArtOfTest.WebAii.Silverlight.XamlFindExpression,System.Boolean)">
            <summary>
            Finds the first element in the tree that matches the find expression. 
            It respects the find strategy so can wait an element to be populated according to the timeout.
            </summary>
            <param name="expression">The find expression.</param>
            <param name="includeRoot">Whether to include the root node in the search</param>
            <returns>The first element it finds.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.ByExpressionReturnOrThrow(ArtOfTest.WebAii.Silverlight.XamlFindExpression)">
            <summary>
            Finds the first element in the tree that matches the find expression. 
            It respects the find strategy so can wait an element to be populated according to the timeout.
            </summary>
            <param name="expression">The find expression.</param>
            <returns>The first element it finds.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualFind.AllByExpression(ArtOfTest.WebAii.Silverlight.XamlFindExpression)">
            <summary>
            Finds all the elements in the tree that match the find expression.
            </summary>
            <param name="expression">The find expression.</param>
            <returns>A list of all elements that match the expression or an empty list if nothing is
            found.</returns>
            <remarks>Uses this.SearchRoot as the search root</remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.VisualFindInfo">
            <summary>
            Class used to encapsulate information on how a visual element should
            be found in the VisualTree
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.VisualTree">
            <summary>
            The VisualTree for this Silverlight application
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualTree._lastHash">
            <summary>
            The hash code of the visual tree the last time we did a full refresh
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualTree.#ctor(ArtOfTest.WebAii.Silverlight.IApplication)">
            <summary>
            Create a new VisualTree
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualTree.Refresh">
            <summary>
            Refresh the visual tree and tell us if a refresh was needed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualTree.Root">
            <summary>
            Get the root of the VisualTree 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualTree.Find">
            <summary>
            Get the Find object for this visual tree
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualTree.LastHash">
            <summary>
            Last hash code of the tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualTree.TreeAsString">
            <summary>
            Get the tree as a string.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.VisualTreeUnavailableException">
            <summary>
            The VisualTreeUnavailableException is thrown when a system error occurs trying to connect
            to the Silverlight application.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualTreeUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new VisualTreeUnavailableException object.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">Any inner exception being wrapped by this exception.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.VisualWait">
            <summary>
            Provide wait functionality for Silverlight elements.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualWait._element">
            <summary>
            The fx element that is assigned to this Wait object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualWait._waiter">
            <summary>
            The thread-pooled waiter.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.VisualWait._defaultTimeout">
            <summary>
            The default timeout
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.#ctor(ArtOfTest.WebAii.Silverlight.FrameworkElement)">
            <summary>
            Create a VisualWait object.
            </summary>
            <param name="element">The assigned fx element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForVisible">
            <summary>
            Wait for this element to be visible in the VisualTree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForVisible(System.Int32)">
            <summary>
            Wait for this element to be visible in the VisualTree.
            </summary>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForVisibleNot">
            <summary>
            Wait for this element to no longer be visible i the VisualTree
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForVisibleNot(System.Int32)">
            <summary>
            Wait for this element to no longer be visible i the VisualTree
            </summary>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.For(System.Predicate{ArtOfTest.WebAii.Silverlight.FrameworkElement},System.Int32,System.String)">
            <summary>
            Wait for a custom defined predicate on this framework element.
            </summary>
            <param name="predicate">The custom predicate</param>
            <param name="timeout">The timeout to use</param>
            <param name="onErrorMessage">Message to show in case of an error/timeout</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.For(System.Predicate{ArtOfTest.WebAii.Silverlight.FrameworkElement})">
            <summary>
            Wait for a custom defined predicate on this framework element.
            </summary>
            <param name="predicate">The custom predicate</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.For(System.Predicate{ArtOfTest.WebAii.Silverlight.FrameworkElement},System.String)">
            <summary>
            Wait for a custom defined predicate on this framework element.
            </summary>
            <param name="predicate">The custom predicate</param>
            <param name="onErrorMessage">Message to show in case of an error/timeout</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForNoMotion(System.Int32)">
            <summary>
            Waits for this element to stop moving.
            </summary>
            <param name="motionCheckInterval">The period of time in msec that constitutes no motion. For example
            if you pass in 500msec then if the object does not move for a period of 500msec, this function will return
            else will continue polling.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForNoMotion(System.Int32,System.Int32)">
            <summary>
            Waits for this element to stop moving.
            </summary>
            <param name="motionCheckInterval">The period of time in msec that constitutes no motion. For example
            if you pass in 500msec then if the object does not move for a period of 500msec, this function will return
            else will continue polling.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Silverlight.VisualWait.ForNoMotion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits for this element to stop moving.
            </summary>
            <param name="initialWait">The number of milliseconds to wait before starting to check whether the element has
            stopped moving</param>
            <param name="motionCheckInterval">The period of time in msec that constitutes no motion. For example
            if you pass in 500msec then if the object does not move for a period of 500msec, this function will return
            else will continue polling.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Silverlight.VisualWait.Timeout">
            <summary>
            Gets or sets the default timeout for all wait operations
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.GlobalInfo">
            <summary>
            Global constants used throughout Silverlight.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.WEBAII_CLIENT_ID">
            <summary>
            WebAii client ID string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.WEBAII_CLIENT_TESTMETHOD">
            <summary>
            WebAii client test method string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.WEBAII_CLIENT_CONNECTED">
            <summary>
            WebAii client connected string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.VISUAL_TREE_ROOT">
            <summary>
            WebAii visual tree root string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.IS_AUTOMATIONREADY_ATTRIBUTE">
            <summary>
            Whether the silverlight application is automation ready
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.GlobalInfo.APP_UNIQUE_ID_ATTRIBUTE">
            <summary>
            The unique id attribute
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.AutomationHostType">
            <summary>
            The type of host application being automated.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationHostType.SilverlightApp">
            <summary>
            A Silverlight application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.AutomationHostType.TestApp">
            <summary>
            A non Silverlight application.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.SilverlightCommandType">
            <summary>
            Sliverlight command types.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.PropGet">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.PropSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.Invoke">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.VisualTree">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.Highlight">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.HitTest">
            <summary>
            Gets the elements under a point in the application
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetHashCode">
            <summary>
            Gets the object reference hash code of the element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetFocusedElementUid">
            <summary>
            Gets the object reference hash code of the element with keyboard focus
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetPropList">
            <summary>
            Gets a list of the public properties of the element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.PublishKnownControls">
            <summary>
            Publish the known controls 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.ScrollToVisible">
            <summary>
            Attempt to scroll an element's containers so the element is visible
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.RefreshAllVisualTrees">
            <summary>
            Gets the application's main visual tree and those of all open Popups
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetVirtualizedViewportOffset">
            <summary>
            Gets the count of visual tree items that are not shown at the beginning of a VirtualizingStackPanel's items
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetTextRecursive">
            <summary>
            Gets the text content of all children of an automation reference
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.SilverlightCommandType.GetVisibility">
            <summary>
            Gets the inherited visibility of an element in the visual tree
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.ResponseStatus">
            <summary>
            Silverlight response status's.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.ResponseStatus.OK">
            <summary>
            Response is OK.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.ResponseStatus.ERROR">
            <summary>
            Response is bad.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.ResponseStatus.ELEMENT_NOT_FOUND">
            <summary>
            Could not find the element by the given reference
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Silverlight.FindStrategy">
            <summary>
            The FindStrategy to use when finding or waiting on elements in the VisualTree.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FindStrategy.AlwaysWaitForElementsVisible">
            <summary>
            Wait for elements to be visible.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FindStrategy.WhenNotVisibleReturnElementProxy">
            <summary>
            Return the element proxy when is not visible or null.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FindStrategy.WhenNotVisibleReturnNull">
            <summary>
            Return null when the element is not visible or null.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Silverlight.FindStrategy.WhenNotVisibleThrowException">
            <summary>
            Throw an exception when the element is null.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.BrowserConfiguration.ShutdownProcesses(System.String)">
            <summary>
            Kills processes and their child processes
            </summary>
            <param name="processName">The process name</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.BrowserConfiguration.CloseProcessesMainWindows(System.String)">
            <summary>
            Closes the processes main windows.
            </summary>
            <param name="processName">The process name</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.BrowserConfiguration.EndRunningProcesses(System.String)">
            <summary>
            Tries to close the processes main windows. If unsuccessfull kills them.
            </summary>
            <param name="processName">The process name</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.BrowserConfigurationStatus">
            <summary>
            Show configuration status foa particular browser.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.BrowserConfigurationException">
            <summary>
            Thrown when invalid configuration operation is performed.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WpfSettingsConfigSectionHandler.DefaultApplicationPath">
            <summary>
            Represents the default application path for the WPF tests.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.DummyFindClause">
            <summary>
            Holds a single clause as part of a Silverlight element FindExpression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.DummyFindClause._knownTypes">
            <summary>
            The known types supported by Html searches.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.DummyFindClause._dummySearchType">
            <summary>
            The SearchType
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.DummyFindClause.OnParsed">
            <summary>
            Occurs when an clause is parsed into name value pairs
            including compare type.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.DummyFindClause.Match(ArtOfTest.Common.ITargetElement,ArtOfTest.Common.ITargetElement)">
            <summary>
            Match the target with this clause.
            </summary>
            <param name="element">The element to match.</param>
            <param name="startElement">Element to start search at. Required for hierarchal searches</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.DummyFindClause.InitializeKnownTypes">
            <summary>
            Initialize the static known types.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.DummyFindClause.ExtractValue(System.String,ArtOfTest.Common.ITargetElement)">
            <summary>
            Extract the actual value for the search type passed in.
            </summary>
            <param name="searchType">The search type.</param>
            <param name="element">The target element</param>
            <returns>The actual value</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.DummyFindExpression">
            <summary>
            Holds a Silverlight element FindExpression.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.DummyFindExpression.SupportedSearchType">
            <summary>
            Gets the XamlSearchType as a Type object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.RecycleBrowser">
            <summary>
            Gets whether to recycle the browser instance or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.KillBrowserProcessOnClose">
            <summary>
            Gets whether to kill browser processes on exit
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.DefaultBrowser">
            <summary>
            Gets the default browser used by the Manager when none is specified.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.EnableScriptLogging">
            <summary>
            Gets whether to enable script logging or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.SilverlightConnectTimeout">
            <summary>
            Gets the default Silverlight app connect timeout
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.SilverlightApplicationPath">
            <summary>
            Gets the Silverlight Application Path
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.LocalWebServer">
            <summary>
            Gets which local web server to use to serve test pages.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.WebAppPhysicalPath">
            <summary>
            If UseAspNetDevServer is true, then will indicate the physical path to the 
            application we are testing.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.AspNetDevServerPort">
            <summary>
            Gets the AspNetDevServer port if set. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.EnableUILessRequestViewing">
            <summary>
            Whether to enable debugging of the UILess page requests using a UI browser like IE.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.BaseUrl">
            <summary>
            The base url to use for all NavigateTo actions in the framework.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.UseHttpProxy">
            <summary>
            Whether to use the built-in http proxy.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.EnableSilverlight">
            <summary>
            Enable silverlight automation.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler.VerboseHttpProxy">
            <summary>
            Enable lots of tracing output from the built-in HTTP proxy
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.MappingsCollection">
            <summary>
            A general purpose collection
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.MappingsCollection.#ctor">
            <summary>
            Create a new mappings collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.MappingsCollection.Add(System.String,System.String)">
            <summary>
            Add a new value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.MappingsCollection.Get(System.String)">
            <summary>
            Get a value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.MappingsCollection.Set(System.String,System.String)">
            <summary>
            Set a value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.MappingsCollection.Item(System.String)">
            <summary>
            Access a value using its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.MappingsCollection.AllKeys">
            <summary>
            Gets the keys for the collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.MappingsCollection.Clear">
            <summary>
            Clear the collection
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.UrlWaitInfo">
            <summary>
            Url wait info
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.HtmlFindClause">
            <summary>
            An Html specific find clause.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlFindClause._knownTypes">
            <summary>
            The known types supported by Html searches.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlFindClause._htmlSearchType">
            <summary>
            The HtmlSearchType
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlFindClause._tagName">
            <summary>
            The tag name if present.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlFindClause._tagIndex">
            <summary>
            The tag index if present
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlFindClause._groupIndex">
            <summary>
            The group index if present
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.#ctor">
            <summary>
            Create a new FindClause.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.#ctor(System.String)">
            <summary>
            Create a new FindClause
            </summary>
            <param name="expression">The find expression to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.OnParsed">
            <summary>
            Perform Html specific parameter parsing.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.Match(ArtOfTest.Common.ITargetElement,ArtOfTest.Common.ITargetElement)">
            <summary>
            Match an element
            </summary>
            <param name="target">The target</param>
            <returns>True/False whether the element matches or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.ExtractValue(System.String,ArtOfTest.Common.ITargetElement)">
            <summary>
            Extract the actual value for the search type passed in.
            </summary>
            <param name="searchType">The search type.</param>
            <param name="target">The target element</param>
            <returns>The actual value</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.GenerateXPath(ArtOfTest.Common.ITargetElement,ArtOfTest.Common.ITargetElement)">
            <summary>
            Generate a backup xpath using an element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.GetTagIndexInChildren(ArtOfTest.Common.ITargetElement)">
            <summary>
            Get a child index within a parent only.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.HtmlFindClause.SearchType">
            <summary>
            Get the search type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.HtmlFindClause.TagName">
            <summary>
            Get the tag name.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.HtmlFindClause.TagIndex">
            <summary>
            Get the tag index
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.HtmlFindClause.GroupIndex">
            <summary>
            Get the group index
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.GetAttributeValueOrEmpty(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            The attribute value
            </summary>
            <param name="element">The element to get the attribute of.</param>
            <param name="attribute">The attribute name to get.</param>
            <returns>The attribute name else string.Empty.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindClause.InitializeKnownTypes">
            <summary>
            Initialize the static known types.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.HtmlFindExpression">
            <summary>
            An Html find expression. This expression replaced FindParams that
            are being deprecated.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindExpression.#ctor(System.String[])">
            <summary>
            Create a new FindExpression.
            </summary>
            <param name="findClauses">The find clauses</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindExpression.#ctor">
            <summary>
            Create an empty expression.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlFindExpression.AddClause(System.String)">
            <summary>
            Add the clauses as 
            </summary>
            <param name="clause">The clause to add</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.HtmlFindExpression.SupportedSearchType">
            <summary>
            Gets the supported search (HtmlSearchType) type as a Type object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.ElementFinder">
            <summary>
            Provides infrastructure for accessing elements defined by FindParamAttribute on test methods and classes.
            Replaces the Find.Elements dictionary which has been obsoleted.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._manager">
            <summary>
            Owner manager.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._returnElementProxyWhenNotFound">
            <summary>
            Returns an element proxy if the element is not found.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._fpAttributes">
            <summary>
            The attributes list.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._instanceBased">
            <summary>
            Whether this ElementFinder is instance based or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._waitOnElements">
            <summary>
            Whether to wait on elements if they are not
            found immediately.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementFinder._waitOnElementsTimeout">
            <summary>
            The default timeout to use to wait on elements
            if _waitOnElements is set
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.#ctor(ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create a new ElementFinder object.
            </summary>
            <param name="manager">The manager object</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.#ctor(ArtOfTest.WebAii.Core.Manager,System.Object)">
            <summary>
            Create a new ElementFinder against a specific class instance
            </summary>
            <param name="manager">The manager object</param>
            <param name="classInstance">The class instance</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.ElementFinder.ReturnElementProxyWhenNotFound">
            <summary>
            Gets or sets a flag that indicates to the ElementFinder to return an ElementProxy object when the element is not found instead of null or an exception.
            The Element proxy object is an Element object that is only initialized with the FindParam object it needs to use. You can then call Element.Wait.ForExists()
            on it to wait for it to be found. You can check whether an Element is a proxy element by checking the Element.IsProxy
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.ElementFinder.WaitOnElements">
            <summary>
            Gets or sets whether to wait on elements to exist in the
            DOM tree if they can't be found initially. 
            If set, will use the WaitOnElementsTimeout as the default
            timeout for the wait. Default is false
            Note: This property overrides ReturnElementProxyWhenNotFound if set.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.ElementFinder.WaitOnElementsTimeout">
            <summary>
            Gets or sets the timeout to use when waiting on
            elements. WaitOnElements=true.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.ElementFinder.Item(System.String)">
            <summary>
            Get an element object defined by a FindParam attribute on the test method or test class.
            </summary>
            <param name="elementKey">The element key as defined by the FindParam attribute.</param>
            <returns>The Element object or null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.Merge(System.Type)">
            <summary>
            Merge a set of FindAttribute declarations defined on a type. The parameters will be available using Get, GetHtml or GetXaml 
            </summary>
            <param name="typeToMerge"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.Get(System.String)">
            <summary>
            Get an element defined by a FindAttribute.
            </summary>
            <param name="elementKey">The FindAttribute to use to locate the element.</param>
            <returns>The element from the DOM or a proxy element that can be used later for another search.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetHtml``1(System.String)">
            <summary>
            Get an HTML element.
            </summary>
            <typeparam name="T">The control type.</typeparam>
            <param name="elementKey">The key as defined by the Find() attribute.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetHtml(System.String)">
            <summary>
            Get an HTML element
            </summary>
            <param name="elementKey">The key as defined by the Find() attribute.</param>
            <returns>The Element object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetXaml``1(System.String)">
            <summary>
            Get a Xaml element
            </summary>
            <typeparam name="T">The control type.</typeparam>
            <param name="elementKey">The key as defined by the Find() attribute</param>
            <returns>The found element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetXaml(System.String)">
            <summary>
            Get a Xaml element.
            </summary>
            <param name="elementKey">The element key as defined by the Find() attribute</param>
            <returns>The found element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.EnsureInitialize">
            <summary>
            Ensures that the FindParam attributes are retrieved
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetElementLegacy(System.String,System.Boolean,System.Int32)">
            <summary>
            Gets an element from the FindParam collection.
            </summary>
            <param name="key">The key.</param>
            <param name="waitOnElements">Whether or not to wait for the element to exist.</param>
            <param name="waitOnElementsTimeout">The amount of time to wait for the element to exist.</param>
            <returns>The element object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.ElementFinder.GetElement(System.String,System.Boolean,System.Int32)">
            <summary>
            Get an element from the active browser.
            </summary>
            <param name="key">The FindParam to use to locate the element.</param>
            <param name="waitOnElements">Whether or not to wait for the element to exist.</param>
            <param name="waitOnElementsTimeout">The timeout to use when waiting for an element.</param>
            <returns>The found element or a proxy that can be used later in another search.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.FindParamAttributeCollection">
            <summary>
            Keyed FindParamAttribute collection.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.FindAttributeCollection">
            <summary>
            Find Expression attributes collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlTreeCrawler.HashElementTree(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            This function given an element builds a hashtable with all the element's children with the 
            key to the hash being the abs index of the element.
            </summary>
            <param name="element">The element.</param>
            <returns>The hash table.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlTreeCrawler.HashElementTreeRecursively(ArtOfTest.WebAii.ObjectModel.Element,System.Collections.Hashtable@)">
            <summary>
            Function used to build the hash table recursively.
            </summary>
            <param name="element">The element.</param>
            <param name="hash">The hash table.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.HtmlTreeCrawler.GenerateExpressionPath(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Generate an Expression Path between two Elements
            </summary>
            <param name="node"></param>
            <param name="relativeTo"></param>
            <returns>An expression path that can be used to find node given 'relativeTo' node.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.HtmlSearchType">
            <summary>
            Different types of supported find expressions.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.Attribute">
            <summary>
            A find expression based that uses Attribute matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.TextContent">
            <summary>
            A find expression based that uses TextContent matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.InnerText">
            <summary>
            A find expression based that uses InnerText matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.InnerMarkup">
            <summary>
            A find expression based that uses InnerMarkup matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.OuterMarkup">
            <summary>
            A find expression based that uses OuterMarkup matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.StartTagContent">
            <summary>
            A find expression based that uses StartTagContent matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.NodeIndexPath">
            <summary>
            A find expression based that uses NodeIndexPath matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.TagName">
            <summary>
            A find expression based that uses TagName matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.TagIndex">
            <summary>
            A find expression based that uses TagIndex matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.XPath">
            <summary>
            A find expression based that uses XPath matching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.HtmlPath">
            <summary>
            A Html Expression Path (i.e - /div[0]/table[id=~foo]/)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.HtmlSearchType.GroupIndex">
            <summary>
            A find expression based that uses GroupIndex matching.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Actions">
            <summary>
            Generic action support for all browser types.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Actions.WaitForElementThreadInfo">
            <summary>
            Private struct used to pass information to the wait thread.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions._browser">
            <summary>
            Browser object associated with this actions object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions._annotator">
            <summary>
            The annotator when highlight execution is true.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions._waitCheckInterval">
            <summary>
            The wait check interval
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions._waiter">
            <summary>
            The wait object for WaitForElement()
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions._contentWindow">
            <summary>
            The document container window of the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Actions.IE_SERVER_CLASS">
            <summary>
            The IE content window class name
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Actions.Browser">
            <summary>
            Gets the Browser object associated with this instance of the actions object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Actions.WaitCheckInterval">
            <summary>
            The Settings.WaitCheckInterval value. You can get/set it here too.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Actions.IsPassword">
            <summary>
            Indicate whether executing an action on a password element that should be hidden
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Actions object.
            </summary>
            <param name="associatedBrowser">The browser object to associate with this actions object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.FindContentWindow">
            <summary>
            This method is overriden by each inherited specialized browser object.
            </summary>
            <returns>Return the window object of the content portion of the browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.GetContentWindow">
            <summary>
            Get browser content window.
            </summary>
            <returns>Return the window object of the content portion of the browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.GetContentRectangle">
            <summary>
            Gets the rectangle of content window or element.
            </summary>
            <returns>Rectangle of content.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.GetNativeInstance">
            <summary>
            This method is overriden by each inherited specialized browser to get the native instance of that browser object.
            </summary>
            <returns>The native instance of the running browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.GetCookies``1(System.Uri)">
            <summary>
            Returns the set of cookies associated with a Uri
            </summary>
            <param name="uri">The Uri.</param>
            <returns>The set of cookies associated with it.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SetCookie(System.String,System.String,System.String)">
            <summary>
            Set a cookie on the machine.
            </summary>
            <param name="domain">The domain.</param>
            <param name="name">The cookie name.</param>
            <param name="data">The cookie data.</param>
            <returns>True/False whether the setting passed.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.DeleteCookie(System.String)">
            <summary>
            DeleteCookie using the domain name
            </summary>
            <param name="domain">The domain associate with the cookie to delete</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.DeleteCookie(System.Net.Cookie)">
            <summary>
            DeleteCookie a specific cookie based on its name and domain
            </summary>
            <param name="cookie">The cookies</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            Clear the cache for a specific category. (i.e history, temp files..etc)
            </summary>
            <param name="type">The category type to clear</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AttachEventHandler(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.EventHandler{ArtOfTest.WebAii.Javascript.JavascriptEventArgs})">
            <summary>
            Attaches an event handler to a Javascript event on an element
            </summary>
            <param name="element">The element to which we are attaching an event handler</param>
            <param name="eventType">The event we want to handle</param>
            <param name="listener">The event handler</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.RemoveEventHandler(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.EventHandler{ArtOfTest.WebAii.Javascript.JavascriptEventArgs})">
            <summary>
            Removes an event handler from a Javascript event on an element
            </summary>
            <param name="element">The element from which we want to remove an event handler</param>
            <param name="eventType">The event whose handler we want to remove</param>
            <param name="listener">The event handler we're removing</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.EnsureHttpIsPresentInUrl(System.String)">
            <summary>
            Checks for http:// or https:// suffixes and adds http:// if they are not present
            </summary>
            <param name="domain">Domain or url</param>
            <returns>A url containing the http:// suffix </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElements(System.Int32,ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Wait until all elements have been found. No chaining is used.
            </summary>
            <param name="waitTimeout">The timeout to wait for all to be found in milli-seconds.</param>
            <param name="paramsList">The find parameters list of the elements to wait for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElements(System.Int32,System.Boolean,ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Wait until all elements have been found. No chaining is used.
            </summary>
            <param name="waitTimeout">The timeout to wait for all to be found in milli-seconds.</param>
            <param name="paramsList">The find parameters list of the elements to wait for.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElements(System.Int32,ArtOfTest.WebAii.ObjectModel.TestRegion,System.Boolean,ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Wait until all elements have been found. No chaining is used.
            </summary>
            <param name="waitTimeout">The timeout to wait for all to be found in milli-seconds.</param>
            <param name="region">Test region to use a reference.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
            <param name="paramsList">The find parameters list of the elements to wait for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam[],System.Int32)">
            <summary>
            Wait until an element is present in the DOM
            </summary>
            <param name="chainedParams">The chained element FindParams.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam[],System.Int32,System.Boolean)">
            <summary>
            Wait until an element is present in the DOM
            </summary>
            <param name="chainedParams">The chained element FindParams.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.ObjectModel.TestRegion,System.Int32,System.Boolean)">
            <summary>
            Wait until an element within a region is present in the DOM.
            </summary>
            <param name="chainedParams">The chained element FindParams.</param>
            <param name="region">The test region to use to identify the target element.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam,System.Int32)">
            <summary>
            Wait until an element is present in the DOM
            </summary>
            <param name="param">The FindParam that specifies how to search for the element.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam,System.Int32,System.Boolean)">
            <summary>
            Wait until an element is present in the DOM
            </summary>
            <param name="param">The FindParam that specifies how to search for the element.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElement(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.TestRegion,System.Int32,System.Boolean)">
            <summary>
            Wait until an element within a region is present in the DOM.
            </summary>
            <param name="param">The FindPara of the target in reference to the region.</param>
            <param name="region">The test region to use to identify the target element.</param>
            <param name="waitTimeout">The timeout to wait for the element to be present.</param>
            <param name="invertCondition">True/False whether to invert the condition defined by the FindParam.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.InvokeScript(System.String)">
            <summary>
            Invokes a javascript function. This function performs a javascript eval()
            on the callString and returns and values from that call (if any).
            </summary>
            <param name="script">The call/script to invoke.</param>
            <example>
            string retValue = InvokeScript("myfunctioncall('hi', myvar);");
            </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.InvokeScript``1(System.String)">
            <summary>
            Invokes a javascript function and then uses the System.Web.Extensions.Serialization.JavaScriptSeralizer
            to deserialize the returned JSON string from the function call to the object type T
            </summary>
            <typeparam name="T">The object type to deserialize the JSON string to.</typeparam>
            <param name="script">The call/script to invoke.</param>
            <example>
            string retValue = InvokeScript("myfunctioncall(""hi"",myvar);");
            </example>
            <exception>InvalidDataContractException: T != JsonObject and T does not have a valid data contract</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.InvokeEvent(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Core.ScriptEventType)">
            <summary>
            Invoke an event on the target element.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.InvokeEvent(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Javascript.ScriptEvent)">
            <summary>
            Invoke an event on the target element
            </summary>
            <param name="element">The target element</param>
            <param name="eventObj">The event</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.Click(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Perform a click on the target element.
            </summary>
            <param name="targetElement">The target element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SetText(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Set the text of a textbox or textarea.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="text">The text to set</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SetText(ArtOfTest.WebAii.Controls.Control,System.String)">
            <summary>
            Set the text of an input or content editable control.
            </summary>
            <param name="targetControl">The target control.</param>
            <param name="text">The text to set</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.ScrollToVisible(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Core.ScrollToVisibleType)">
            <summary>
            Ensures that an item is visible in the browser. Scrolls it into view.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="scrollType">The scrolling into view type.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.ScrollToVisible(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Ensures that an item is visible in the browser. Scrolls it into view.
            Uses the ElementTopAtWindowTop.
            </summary>
            <param name="targetElement">The target element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.ScrollToVisible(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Core.ScrollToVisibleType,System.Drawing.Rectangle)">
            <summary>
            Ensures that a specified portion of an element is visible in the browser. Scrolls the whole element into view if
            possible, otherwise as much of the specified portion as possible.
            </summary>
            <param name="element">The target element</param>
            <param name="scrollType">Whether to align the element or portion with the top of the browser window or the bottom.</param>
            <param name="rectangle">The portion of the element which we are ensuring the visibility of.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SelectDropDown(ArtOfTest.WebAii.ObjectModel.Element,System.Int32)">
            <summary>
            Selects a drop down item from the drop down list using its index.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="itemIndex">The selected item index.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SelectDropDown(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.Boolean)">
            <summary>
            Selects a drop down item from the drop down list using the item's text or the
            items option value (if useItemValue = true).
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="text">The text of the item to select.</param>
            <param name="useValue">If true, the text is the value of the item not it's textual representation.</param>
            <remarks>
            This function performs a case-insensitive search for the itemText in the list
            of the drop down items.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.SelectDropDown(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Selects a drop down item from the drop down list using the item's text.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="itemText">The text of the item to select.</param>
            <remarks>
            This function performs a case-insensitive search for the itemText in the list
            of the drop down items.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.Check(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Sets the a checkbox or a radio button to a specific checked state.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="checkedState">True: to set the target to checked, False to set it to unchecked.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.GetComputedStyle(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Get the computed style for this element.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="style">The style to get.</param>
            <returns>The string value of the style.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AnnotateElement(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Visually annotates an element on the browser surface.
            </summary>
            <param name="targetElement">The target element to annotate.</param>
            <param name="message">The message to include.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AnnotateElement(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.Boolean)">
            <summary>
            Visually annotates an element on the browser surface.
            </summary>
            <param name="targetElement">The target element to annotate.</param>
            <param name="message">The message to include.</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AnnotateMessage(System.String)">
            <summary>
            Visually annotate a message on the browser surface.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AnnotateMessage(System.String,System.Boolean)">
            <summary>
            Visually annotate a message on the browser surface.
            </summary>
            <param name="message">The message.</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AddCustomSilverlightAssembly(System.String,System.IO.MemoryStream)">
            <summary>
            Adds the specified assembly to the list of assemblies that are injected into Silverlight apps when we're
            automating them.
            </summary>
            <param name="name">The name of the assembly, without the extension</param>
            <param name="stream">A stream containing the assembly binary</param>
            <remarks>This method is only supported currently for Internet Explorer</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.AnnotateElement(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.String,System.Boolean)">
            <summary>
            Visually annotate an element
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="actionName">The action name.</param>
            <param name="data">Any data associated with it.</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElementInternal(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.ObjectModel.TestRegion,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Wait internal.
            </summary>
            <param name="param">Single param, else null.</param>
            <param name="chainedParams">Chained params, else null.</param>
            <param name="region">Region, else null.</param>
            <param name="waitTimeout">Timeout to use.</param>
            <param name="invertCondition">True/False whether to invert the condition or not.</param>
            <param name="paramsAreIndependent">Whether the params collection is chained or not.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.ValidateTargetElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Validates the target element.
            </summary>
            <param name="targetElement">The target element to validate.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElementsThread(System.Object)">
            <summary>
            Waits for a list of parameters.
            </summary>
            <param name="threadInfo">find parameters info.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.WaitForElementThread(System.Object)">
            <summary>
            The wait thread used to wait for an element to be present or found.
            </summary>
            <param name="threadInfo">Thread info</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Actions.DoSelectDropDown(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Performs the select drop down action.
            </summary>
            <param name="targetElement">The target element.</param>
            <param name="data">The data to pass to the browser that provides information on how to do the select.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.FrameInfo">
            <summary>
            Information regarding a specific frame
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._index">
            <summary>
            frame index
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._name">
            <summary>
            frame name if available.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._id">
            <summary>
            frame id.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._testStudioTag">
            <summary>
            test studio tag.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._baseURL">
            <summary>
            The base URL portion of the src string
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._query">
            <summary>
            The query portion of the src string (if any)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._useQuery">
            <summary>
            Whether or not to include the query string when comparing the src string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._rectangle">
            <summary>
            The location of the frame
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._ownerBrowser">
            <summary>
            The owner browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FrameInfo._tagIndex">
            <summary>
            The tag index of the frame element
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.#ctor">
            <summary>
            Create a new FrameInfo object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Create a new FrameInfo object.
            </summary>
            <param name="id">The Frame's id.</param>
            <param name="name">The Frame's name.</param>
            <param name="src">The Frame's src.</param>
            <param name="index">The Frame's index.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new FrameInfo object.
            </summary>
            <param name="id">The Frame's id.</param>
            <param name="name">The Frame's name.</param>
            <param name="baseURL">The base URL of the frame's src attribute.</param>
            <param name="query">The query part of the frame's src attribute.</param>
            <param name="index">The Frame's index.</param>
            <param name="useQuery">Whether or not to compare the query part when comparing FrameInfo objects.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.#ctor(System.String,ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new frameinfo object from a string that originated from our BHO.
            </summary>
            <param name="frameInfoString">The encoded frame info string.</param>
            <param name="ownerBrowser">The owner browser of this frame.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Index">
            <summary>
            Get frame index.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Name">
            <summary>
            Get frame name.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Rectangle">
            <summary>
            The last rectangle value using GetRectangle();
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Id">
            <summary>
            Get frame id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.TestStudioTag">
            <summary>
            Get frame id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.BaseURL">
            <summary>
            The frame's src value. Used only if id/name is not set.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Src">
            <summary>
            The frame's src value. Used only if id/name is not set.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.GetSrc(System.Boolean)">
            <summary>
            Get the source with our without the query. 
            </summary>
            <param name="useQuery">whether to use the query or not.</param>
            <returns>The full source of the url</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.Query">
            <summary>
            The frame's query part of the src value. Used only if id/name is not set.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.UseQuery">
            <summary>
            Whether or not to include the query string when comparing the src string.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.UniqueId">
            <summary>
            Gets the unique id of the frame for that session.
            Note: This property is not garanteed to be the same between requests to the same page
            so it shouldn't be serialized as part of this frame's information.
            This is an IE specific property.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.TopmostBrowser">
            <summary>
            Gets the topmost Browser object for the containing web browser window.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FrameInfo.TagIndex">
            <summary>
            The tag index of this frame's element within its parent browser
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.GetIndexer(System.String@)">
            <summary>
            Get the set indexer on this FrameInfo
            </summary>
            <param name="frameFindParamParameter">Returns the index type being used to locate this IFrame.</param>
            <returns>The value of index used to locate this IFrame.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.GetRectangle">
            <summary>
            Returns this Frame's Rectangle in screen coordinates.
            </summary>
            <returns>The frame's rectangular screen coordinates.</returns>
            <exception cref="T:System.ArithmeticException">Thrown when we can't get the rectangle coordinates of a Frame from the browser.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.Equals(System.Object)">
            <summary>
            Determines if two FrameInfo objects are equal.
            </summary>
            <param name="obj">The object to comapre to.</param>
            <returns>True/False whether the two objects are equal.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.GetHashCode">
            <summary>
            Get hash code of this FrameInfo object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.ToString">
            <summary>
            String representation of the frame info.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.GetFriendlyName">
            <summary>
            Generates a friendly name for this frameinfo
            </summary>
            <returns>The friendly name of this IFrame.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.OnPropertyChanged(System.String)">
            <summary>
            Fire the OnPropertyChanged event
            </summary>
            <param name="propertyName">The property name that changed</param>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.FrameInfo.PropertyChanged">
            <summary>
            Occurs when a property on the FrameInfo object changes.
            </summary>        
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FrameInfo.IdMatchHelper(System.String,System.String)">
            <summary>
            Match id or name. Takes into account partial matching using '~'
            </summary>
            <param name="actual">The actual string</param>
            <param name="compare">The string to compare to</param>
            <returns>True/False whether they match or not.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.FramesCollection">
            <summary>
            Collection of frames (Browser objects)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.RefreshAllDomTrees">
            <summary>
            Refresh all dom trees in this frames collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.WaitAllUntilReady">
            <summary>
            Waits until all frames are ready.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FramesCollection.Item(System.String)">
            <summary>
            Get a frame using its name.
            </summary>
            <param name="name">The frame name. (prefix with '~' to indicate partial string)</param>
            <returns>A frame if matching name found, otherwise 'null'.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FramesCollection.Item(System.Int32)">
            <summary>
            Get the frame at a specific index.
            </summary>
            <param name="index">The frame index.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.FramesCollection.Item(ArtOfTest.WebAii.Core.FrameInfo)">
            <summary>
            Get the frame based on its FrameInfo.
            </summary>
            <param name="frameInfo">The frameinfo.</param>
            <returns>The Frame, else null.</returns>
            <remarks>
            If more than one frame in the FrameCollection matches the FrameInfo argument, we will return the frame that matches
            frameInfo.Index.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.GetFrame(ArtOfTest.WebAii.Core.FrameInfo)">
            <summary>
            Get the frame based on its FrameInfo, without refreshing the frame's DOM
            </summary>
            <param name="frameInfo"></param>
            <returns>The frame if found, else 'null'.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.ById(System.String)">
            <summary>
            Gets a frame using its id.
            </summary>
            <param name="frameid">The frame id to find. (prefix with '~' to indicate partial string)</param>
            <returns>The frame Browser object or else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.BySrc(System.String)">
            <summary>
            Gets a frame using its src
            </summary>
            <param name="src">The src value to search for. (prefix with '~' to indicate partial string)</param>
            <returns>The frame Browser object or else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
            <returns>This collection's enumerator</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.GetFramesAsStrings">
            <summary>
            Get a list of all frames in this collection.
            </summary>
            <returns>A description of all frames contained in this collection as a string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.FramesCollection.EnsureDomLoaded(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Makes sure that there is a dom loaded for this frame.
            </summary>
            <param name="browser">The browser object.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Manager">
            <summary>
            This class manages the life spans and instances of all browser objects in the framework.
            It also manages the communication pipeline between the framework and all browsers.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._currentManager">
            <summary>
            The current manager object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._globalMappingsOverride">
            <summary>
            The global mappings override.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager.CHECK_BROWSER_AVAILABLE_INTERVAL">
            <summary>
            The wait interval to check if the browser is available
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._log">
            <summary>
            Log object to use to log pass/failure info to
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._browserInstances">
            <summary>
            The browser instances connected to this browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._activeBrowser">
            <summary>
            The first browser instance
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._settings">
            <summary>
            This context's settings
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._desktop">
            <summary>
            Represents the desktop to use
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._disposed">
            <summary>
            Track whether dispose has been called.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._aspNetDevServer">
            <summary>
            The ASP.NET developer server process.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._aspNetServerUri">
            <summary>
            The ASP.NET server Uri
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._customGlobalAttributes">
            <summary>
            Global attributes set on an execution class.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._customMethodAttributes">
            <summary>
            Method attributes set on a execution method.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._attributesRetrieved">
            <summary>
            Whether the attributes have been retrieved or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._dialogMonitor">
            <summary>
            The dialog monitor object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._browsersMonitored">
            <summary>
            A hash table that dialog monitoring has been setup for.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._waiter">
            <summary>
            The wait object for the manager.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._elements">
            <summary>
            The elements accessor for FindParam attributes
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._proxyManager">
            <summary>
            The http proxy to sniff traffic
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._provisioner">
            <summary>
            Browser provisioner
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._jsEventHandlers">
            <summary>
            The collection of Javascript event handlers that the manager is aware of
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._errorStatus">
            <summary>
            This field is set when the manager is in an error state
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Manager._activeBrowserChanged">
            <summary>
            Delegate for ActiveBrowserChanged event.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Manager.BrowserAdded">
            <summary>
            These guys are used by the PipelineProfiler to get notification that a new browser has been added,
            so it can start listening to events that it generates (Before/AfterCommandExecuted)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.#ctor(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Create a new Manager. 
            </summary>
            <param name="settings">The settings object that specifies the settings 
            to initialize the framework with. These settings are propagated through 
            out the framework objects.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.#ctor(System.Boolean)">
            <summary>
            Create a new Manager.
            </summary>
            <param name="useConfig">If set to true, the manager will load the setting from
            the config. Else will use the default settings.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.Init(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Initializes this object using the passed in settings.
            </summary>
            <param name="settings">The settings to use</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.Start">
            <summary>
            Initialize the communication pipelines.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser">
            <summary>
            Launch a new browser using default settings. Waits for browser to connect.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Launch a new browser using the default setting and the sets the browser window style. 
            Waits for browser to connect.
            </summary>
            <param name="windowStyle">The window style to launch the browser in.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>
            Launch a new browser using the default setting and the sets the browser window style. 
            Waits for browser to connect.
            </summary>
            <param name="windowStyle">The window style to launch the browser in.</param>
            <param name="arguments">Arguments to pass to the browser. Only SilverlightApplications use this parameter.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(ArtOfTest.WebAii.Core.BrowserType)">
            <summary>
            Launch a new browser of the selected type and wait for it to connect.
            </summary>
            <param name="browserToLaunch">The browser type to launch.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(ArtOfTest.WebAii.Core.BrowserType,System.Boolean)">
            <summary>
            Launch a new browser of the specified BrowserType. 
            </summary>
            <param name="browserToLaunch">The browser type to launch.</param>
            <param name="waitForBrowserToConnect">Whether to wait for the browser to connect and be ready.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(ArtOfTest.WebAii.Core.BrowserType,System.Boolean,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Launch a new browser.
            </summary>
            <param name="browserToLaunch">The browser to launch.</param>
            <param name="waitForBrowserToConnect">True/False to wait for the browser to connect or not.</param>
            <param name="windowStyle">The window style to launch the browser in.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewBrowser(ArtOfTest.WebAii.Core.BrowserType,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>
            Launch a new browser.
            </summary>
            <param name="browserToLaunch">The browser to launch.</param>
            <param name="waitForBrowserToConnect">True/False to wait for the browser to connect or not.</param>
            <param name="windowStyle">The window style to launch the browser in.</param>        
            <param name="arguments">Arguments to pass to the browser. Only SilverlightApplications use this parameter.</param>        
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetNewBrowserTracking(System.Boolean)">
            <summary>
            Enable or disable new browser tracking. Use to track pop-up browser windows.
            When enabled, new pop-up browser windows will be added to the browsers[] collection.
            </summary>
            <param name="enable">True/false whether to enable/disable new browser tracking.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.WaitForNewBrowserConnect(System.String,System.Boolean,System.Int32)">
            <summary>
            Wait for a specific browser instance to connect using a timeout.
            </summary>
            <param name="url">The url to use to check the browser.</param>
            <param name="isPartial">Whether to check the url using partial compares.</param>
            <param name="timeout">The timeout for the wait.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.WaitForNewBrowserConnect(System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Wait for a specific browser instance to connect using a timeout.
            </summary>
            <param name="url">The url to use to check the browser.</param>
            <param name="isPartial">Whether to check the url using partial compares.</param>
            <param name="partialCaption">Partial caption of the browser.</param>
            <param name="timeout">The timeout for the wait.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.AddNewBrowser(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Add a new browser to collection.
            </summary>
            <param name="browser">New browser.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.RemoveBrowser(System.String)">
            <summary>
            Remove a browser from collection.
            </summary>
            <param name="clientId">The browser client ID.</param>
            <remarks>Calling Browser.Close eventually calls back into the manager and into this function (be extra careful about deadlocks).</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetupProxyManager">
            <summary>
            Initializes the HTTP proxy
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SupportsJs(ArtOfTest.WebAii.Core.BrowserType)">
            <summary>
            Check if java script is supported by browser type.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.End">
            <summary>
            Close and clean-up all browser instances.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.CheckForBrowserAvailable(System.Object)">
            <summary>
            Thread to check when a browser is ready
            </summary>
            <param name="indexToCheck">The index to check.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchAspNetDevServer">
            <summary>
            Launch the Asp.Net Dev Server
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.ErrorStatus">
            <summary>
            Set when the manager is in an error condition
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Http">
            <summary>
            Gets the HttpProxy instance if UseHttpProxy is set to true, else
            will return null.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Wait">
            <summary>
            Gets a wait object that can be used to wait on specific actions on elements/controls or custom predicate actions
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Elements">
            <summary>
            Gets the element finder to be used for finding elements defined by the FindParam attributes.
            This Elements object replaces all the Find.Elements since current FindParamAttributes are not
            frames and test region aware.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.DialogMonitor">
            <summary>
            Gets the DialogMonitor object that handles popup dialogs
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Desktop">
            <summary>
            Gets the Desktop object that can be used to invoke desktop input devices like Mouse, Keyboard
            events.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Browsers">
            <summary>
            Gets the array of browser instances connected to this instance of the Manager.
            This should be considered a one-time snapshot and long-term object references to it should be avoided.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.ActiveBrowser">
            <summary>
            Gets the last browser instance launched.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Settings">
            <summary>
            Gets the settings object that this Manager instance was initialized with.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Log">
            <summary>
            Gets the Log object.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Manager.ActiveBrowserChanged">
            <summary>
            Occurs when active browser is changed.
            After attachment this event will fire, using actual active browser.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.Dispose">
            <summary>
            Dispose of resources controlled by this object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.Dispose(System.Boolean)">
            <summary>
            Do the clean-up
            </summary>
            <param name="disposing">If disposing</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.WaitForBrowserToConnect(System.Int32)">
            <summary>
            Wait for a new browser to connect to server.
            </summary>
            <param name="browserIndexToWaitFor">The browser index we are waiting for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetRecycledManagerInstance(ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Method used by the designer to allow for RecycleBrowser to execute
            in VisualStudio's execution Adapter
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.OnClientDisconnected(System.String)">
            <summary>
            On client disconnected.
            </summary>
            <param name="clientId">ID of the client just disconnected.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.OnClientConnected(ArtOfTest.WebAii.Messaging.Process.ClientConnectParams,ArtOfTest.WebAii.Messaging.Process.IBrowserRemoted)">
            <summary>
            On client connected.
            </summary>
            <param name="e">ClientConnectedEventArgs.</param>
            <param name="remoted">The remoted instance the communicates with that browser</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetupDialogMonitoring">
            <summary>
            Setup dialog monitoring for a specific browser.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the list of custom attributes of a certain type set within this execution context.
            </summary>
            <param name="ofType">The type of the attributes to return.</param>
            <param name="includeGlobal">True/False whether to include the global attributes in this list.</param>
            <returns>The list of custom attributes ofType</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Get the custom list of attributes
            </summary>
            <typeparam name="T">The type of attribute to use.</typeparam>
            <param name="includeGlobal">Whether to include global attributes or not.</param>
            <returns>The list of attributes</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetGlobalCustomAttributes(System.Object[])">
            <summary>
            Set the global custom attributes to consider for this manager.
            </summary>
            <param name="customAttributes">The set of custom attributes that are global.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.SetMethodCustomAttributes(System.Object[])">
            <summary>
            The set of custom attributes that are specific to the executing method.
            </summary>
            <param name="customAttributes"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.DispatchJavascriptEvent(ArtOfTest.WebAii.Javascript.JavascriptEventMessage)">
            <summary>
            Dispatches a Javascript event to the handler that is listening for it
            </summary>
            <param name="message">Information about the Javascript event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.AttributeRetrieved">
            <summary>
            Gets or sets whether the custom attributes have been retrieved.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.AspNetServerUri">
            <summary>
            Get the AspNetServer Uri.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.JsEventHandlers">
            <summary>
            Gets the collection of Javascript event handlers
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.JsEventHandlersInverse">
            <summary>
            Gets the collection of Javascript event handlers, but queriable by event handler
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.Current">
            <summary>
            Gets the current active manager object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.RegisterMappingsOverride(ArtOfTest.WebAii.Core.MappingsCollection,System.Type)">
            <summary>
            Register a set of global mappings for a specific type.
            </summary>
            <param name="mappinsToOverride">The list of mappings to override for the control type</param>
            <param name="controlType">The type to override the mappings for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.ClearMappingsOverride(System.Type)">
            <summary>
            Clear the global override mappings for a specific type.
            </summary>
            <param name="controlType"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Manager.GlobalMappingsOverride">
            <summary>
            Get the global mappings override.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.MergeGlobalMappings(ArtOfTest.WebAii.Core.MappingsCollection,System.Type)">
            <summary>
            Merge specific set of mappings with the global overrides.
            </summary>
            <param name="mappingsToMerge"></param>
            <param name="type"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.LaunchNewApplication(System.String,System.String[])">
            <summary>
            Launch a new WPF Application for automation
            </summary>
            <param name="path">The fully qualified path to the WPF Application. This path can include environment varibales</param>
            <param name="args">Arguments to pass to the WPF Application</param>
            <returns>A WpfApplication for use with automation</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.ConfigureBrowser(ArtOfTest.WebAii.Core.BrowserType,System.String@)">
            <summary>
            Aplly browser settings, requered for automation to work correctly. 
            In order to aplly settings correctly all browseer instances of specified type must be closed.
            </summary>
            <param name="browser">The type of browser to configure.</param>
            <param name="error">Contains an error message in case the browser was not successfully calibrated.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.GetBrowserConfigurationStatus(ArtOfTest.WebAii.Core.BrowserType)">
            <summary>
            Get browser configureation status.
            </summary>
            <param name="browser">Browser type.</param>
            <returns>Browser configuration status.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Manager.UndoBrowserConfiguration(ArtOfTest.WebAii.Core.BrowserType,System.String@)">
            <summary>
            Restore browser to previous configuration before the calibration.
            </summary>
            <param name="browser">Browser type.</param>
            <param name="error">Contains an error message in case the browser was not successfully restored.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Desktop">
            <summary>
            Class representing the desktop input devices. Mouse and Keyboard.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._mouse">
            <summary>
            Mouse object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._keyboard">
            <summary>
            The keyboard object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._enabledAutoDomRefresh">
            <summary>
            Whether Auto dom refresh is enabled
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._validateMouseActionsWithinBrowserContent">
            <summary>
            whether to validate all moust actions are within the browser content window.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._targetHost">
            <summary>
            The target browser associated with this desktop object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._manager">
            <summary>
            The Manager that created this Desktop object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._annotator">
            <summary>
            Annotator for desktop actions without a browser / application host
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Desktop._lazyLock">
            <summary>
            Lazy initialization lock object
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Desktop.Annotator">
            <summary>
            Annotator that draws on the desktop
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Desktop.Manager">
            <summary>
            Gets the Manager that created this Desktop object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.#ctor">
            <summary>
            Create a new desktop object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.#ctor(ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create a new desktop object
            </summary>
            <param name="manager">The Manager that owns this desktop object</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Desktop.Mouse">
            <summary>
            Gets the mouse object that enables simulating real mouse events.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Desktop.KeyBoard">
            <summary>
            Gets the keyboard object that enables simulating real keyboard events.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Desktop.ValidateMouseActionsWithinBrowserContent">
            <summary>
            Gets/Sets whether to validate all mouse actions to ensure they are within the browser's content window.
            If this is set to true, any mouse action outside that region will throw an exception.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.EnableAutoDomRefresh(ArtOfTest.Common.IAutomationHost)">
            <summary>
            Enables the Desktop Mouse/Keyboard objects to 
            perform auto dom refreshes after Click/DragDrop/SendKey actions.
            </summary>
            <param name="targetBrowser">The target browser to perform refresh on.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.DisableAutoDomRefresh">
            <summary>
            Disables auto dom refresh for Mouse/Keyboard actions
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.AutoRefreshDomIfNeeded">
            <summary>
            Perform auto refresh dom if needed.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.NotifyMouseAction(System.Drawing.Point)">
            <summary>
            Notify mouse action
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Desktop.ValidateMouseLocationIfNeeded(System.Drawing.Point)">
            <summary>
            Validates if a mouse location falls within the browser window.
            </summary>
            <param name="point">The mouse point</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Find">
            <summary>
            Class provides quick search routines for finding an element(s) within a document.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Find.ReturnedNullOrEmpty">
            <summary>
            Invoked when one of the find methods returns null or an empty list of elements.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._browser">
            <summary>
            Browser associated with this search object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._lastSearchLog">
            <summary>
            Search log for the last find attempt. This log can help diagnose when
            find fails to locate an element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._searchRegion">
            <summary>
            The search scope. When this is set to a specific region, all search is done locale 
            to that region. All indices are calculated starting at zero from this region's element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._throwIfNullOrEmpty">
            <summary>
            Throws an exception if find returns null or an empty list. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._findReferenceType">
            <summary>
            The reference type of this find object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._searchRootElement">
            <summary>
            Element find root when reference type is FindReferenceType.Element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._throwIfNullorEmptyCachedValue">
            <summary>
            The catched value of throw if null or empty.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._ignoreFindAllControlMismatch">
            <summary>
            Ignores a type mismatch for a specific control. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._lastFindParamUsed">
            <summary>
            The last FindParam crafted by this Find object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Find._crawler">
            <summary>
            The tree crawler
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.LastFindParam">
            <summary>
            Gets the last FindParam used to search.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.LastSearchLog">
            <summary>
            Gets the search log for the last find attempt. This log can help diagnose when
            find fails to locate an element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.SearchRegion">
            <summary>
            Gets the search region for this Find object. When this is set to a specific region, all search is done locale 
            to that region. All indexes are calculated starting at zero from this region's element.
            If this property is null, then the Find object will perform all searches from the document
            root element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.AssociatedBrowser">
            <summary>
            Gets the browser object that is associated with this find object. 
            If this property is null, then the Find object is associated with a search region.
            </summary>
            <remarks>
            Either Find.SearchRegion or Find.AssociatedBrowser is null. Both can't be null and both can't be set.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.SearchRootElement">
            <summary>
            Gets/Sets the root element that all searches will be performed under.
            This element depended on the reference type. [Browser/TestRegion/Element].
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.IgnoreFindAllControlMismatch">
            <summary>
            Gets/Sets whether to ignore <![CDATA[ Find.Allxx<TControl>(...) ]]> elements
            that don't match the TControl specified. (i.e. the TControl type validation fails for
            that element). If false, the Find.Allxx method will throw an exception.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.ThrowIfNullOrEmpty">
            <summary>
            Gets/Sets whether to throw an exception if any of the find methods returns a null element or any of 
            the find all methods return empty list of elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Find.FindReferenceType">
            <summary>
            Gets the reference type that this Find object is using. (i.e. browser root, testregion ... etc)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Find object.
            </summary>
            <param name="associatedBrowser">The browser object to associate this Find object with.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.#ctor(ArtOfTest.WebAii.Core.Browser,System.Boolean)">
            <summary>
            Create a new Find object.
            </summary>
            <param name="associatedBrowser">The browser object to associate this Find object with.</param>
            <param name="throwIfNullOrEmpty">True/False whether to throw if any of the find methods returns null or empty list.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.#ctor(ArtOfTest.WebAii.ObjectModel.TestRegion)">
            <summary>
            Create a new Find object.
            </summary>
            <param name="searchRegion">The region to scope the search to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new Find object.
            </summary>
            <param name="rootFindElement">The root element to scope this find object to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromFile(System.String)">
            <summary>
            Finds all elements with FindParams defined in a file. 
            </summary>
            <param name="fileName">The filename where all the FindParams are defined.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromExpressionsFile(System.String)">
            <summary>
            Finds all elements with FindExpressions defined in a file. 
            </summary>
            <param name="fileName">The filename where all the FindParams are defined.</param>
            <returns>The collection of found elements in a dictionary with the key being the key defined in the file</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromXml(System.String)">
            <summary>
            Finds all elements with FindParams defined in the serialized xml string.
            Found elements can be accessed from Find.Elements
            </summary>
            <param name="xml">The xml string that describes the FindParams collection.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromExpressionsXml(System.String)">
            <summary>
            Finds all elements with FindExpressions defined in the serialized xml string.
            </summary>
            <param name="xml">The xml with the expressions defined.</param>
            <returns>The collection of found elements in a dictionary with the key being the key defined in the xml</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromCollection(ArtOfTest.WebAii.ObjectModel.FindParamCollection)">
            <summary>
            Finds all elements with the FindParams in the passed in collection.
            </summary>
            <param name="collection">The collection of all the FindParams</param>
            <remarks>If ThrowIfNullOrEmpty is true, this function will throw if an element
            is not found. If ThrowIfNullOrEmpty is false, this function will not add
            and element that we not found.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.FromCollection(ArtOfTest.WebAii.ObjectModel.FindExpressionCollection{ArtOfTest.WebAii.Core.HtmlFindExpression})">
            <summary>
            Finds all elements with the HtmlFindExpressions in the collection.
            </summary>
            <param name="collection">The HtmlFindExpressions</param>
            <returns>The elements found</returns>
            <remarks>If ThrowIfNullOrEmpty is true, this function will throw if an element
            is not found. If ThrowIfNullOrEmpty is false, this function will not add
            and element that we not found.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllControls``1">
            <summary>
            Gets an IEnmerable for TControl to be used for LINQ queries.
            This will return only elements that are convertable to TControl
            </summary>
            <typeparam name="TControl">The control type</typeparam>
            <returns>IEnumberable</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllElements">
            <summary>
            Gets a IEnumerable for all elements to be used for LINQ queries
            </summary>
            <returns>IEnumberable</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByCustom(System.Predicate{ArtOfTest.WebAii.ObjectModel.Element})">
            <summary>
            Return all elements that match the predicate
            </summary>
            <param name="predicate">The custom predicate that defines the element search</param>
            <returns>The list of elements that match the predicate, else an empty collection or an exception (depending on ThrowIfNullOrEmpty)</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByCustom``1(System.Predicate{``0})">
            <summary>
            Returns all controls that match the predicate and are convertable to TControl.
            </summary>
            <typeparam name="TControl">The control type to filter on.</typeparam>
            <param name="predicate">The predicate to use during the search.</param>
            <returns>A read only collection of elements matching the predicate and control type.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByTagName(System.String)">
            <summary>
            Returns a list of elements with a specific tag name.
            </summary>
            <param name="tagName">The tag name to search for.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByTagName``1(System.String)">
            <summary>
            Returns a list of elements with a specific tag name as a control collection.
            </summary>
            <typeparam name="TControl">The control type to find.</typeparam>
            <param name="tagName">The tag name.</param>
            <returns>The list of found controls.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByContent(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType)">
             <summary>
             Returns a list of elements that match the specified content.
             The content must start with:
             'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
             matches. If none are provided, the string will be matched using an exact match 'l:'.
             All searches are case-insensitive.
             <example>
             To find tags with TextContent of: 'foo bar'
             Example 1: ByContent("l:foo bar");
             Example 2: ByContent("p:foo");
             Example 3: ByContent("x:[*foo*]");
             </example>
             <remarks>
             There is a difference between FindContentType.InnerText and FindContentType.TextContent that is worth noting:
            
             Example: <div id="div1">Text1<div id="div2">Text2</div></div>
            
             InnerText for div1 : Text1Text2  {recursive}
             TextContent of div1 : Text1      {non-recursive}
            
             Default for ByContent is TextContent which is the most common usage.
             </remarks>
             </summary>
             <param name="content">The content to match</param>
             <param name="contentType">The content type to match.</param>
             <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByContent``1(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType)">
            <summary>
            <see cref="M:ArtOfTest.WebAii.Core.Find.AllByContent(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType)"/>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByContent(System.String)">
             <summary>
             Returns a list of elements that have TextContent that match the specified content
             The content must start with:
             'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
             matches. If none are provided, the string will be matched using an exact match 'l:'.
             All searches are case-insensitive.
             <example>
             To find tags with TextContent of: 'foo bar'
             Example 1: ByContent("l:foo bar");
             Example 2: ByContent("p:foo");
             Example 3: ByContent("x:[*foo*]");
             </example>
             <param name="textContent">The TextContent to match</param>
             <remarks>
             There is a difference between FindContentType.InnerText and FindContentType.TextContent that is worth noting:
            
             Example: <div id="div1">Text1<div id="div2">Text2</div></div>
            
             InnerText for div1 : Text1Text2  {recursive}
             TextContent of div1 : Text1      {non-recursive}
            
             Default for ByContent is TextContent which is the most common usage.
             </remarks>
             </summary>
             <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByContent``1(System.String)">
            <summary>
            <see cref="M:ArtOfTest.WebAii.Core.Find.AllByContent(System.String)"/>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByAttributes(System.String[])">
            <summary>
            Returns a list of elements that have attributes that match the NameValuePairs passed it 
            fully or partially.
            </summary>
            <param name="nameValuePairs">A list of name value pairs to match. For example:
            "bar=foo","class=myclass","src=~foo.gif","src=!bar". Use =~ for partial values or =! to exclude values.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByAttributes``1(System.String[])">
            <summary>
            Returns a list of elements that have attributes that match the NameValuePairs passed it 
            fully or partially.
            </summary>
            <param name="nameValuePairs">A list of name value pairs to match. For example:
            AllByAttributes("bar=foo","class=myclass","src=~foo.gif"). Use =~ for partial values.</param>
            <typeparam name="TControl">Control type to get.</typeparam>
            <returns>The list of found elements.</returns>
            <remarks>If </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByParam(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Returns a list of elements that match the specified FindParam.
            Note that this method does not support FindParam.Type=NodePathIndex.
            </summary>
            <param name="param">The FindParam to match.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByParam``1(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Returns a list of elements that match the specified FindParam.
            Note that this method does not support FindParam.Type=NodePathIndex.
            </summary>
            <param name="param">The FindParam to match.</param>
            <typeparam name="TControl">Control type to get.</typeparam>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByXPath(System.String)">
            <summary>
            Returns a list of elements that match the specified XPath. This function supports
            the System.Xml XPath syntax.
            </summary>
            <param name="xpath">The XPath string. XPath is case-sensitive.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByXPath``1(System.String)">
            <summary>
            Returns a list of elements that match the specified XPath. This function supports
            the System.Xml XPath syntax.
            </summary>
            <typeparam name="TControl">Control type to get.</typeparam>
            <param name="xpath">The XPath string. XPath is case-sensitive.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByCustom``1(System.Predicate{``0})">
            <summary>
            Get a control by using custom predicate. This function will try to eliminate any elements
            that are not convertable to TControl type.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="predicate">The predicate.</param>
            <returns>The first found control.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByCustom(System.Predicate{ArtOfTest.WebAii.ObjectModel.Element})">
            <summary>
            Return the element that matches the defined predicate.
            </summary>
            <param name="predicate">The custom predicate that defines the element search.</param>
            <returns>The element, else null.</returns>
            <exception cref="T:ArtOfTest.WebAii.Exceptions.FindException">Thrown if the element was not found and ThrowIfNullOrEmpty is set.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent(System.String)">
            <summary>
            Returns an element by searching its TextContent.
            The content must start with:
            'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
            matches. If none are provided, the string will be matched using an exact match 'l:'.
            All searches are case-insensitive.
            <example>
            To find tags with innerText content is: 'foo bar'
            Example 1: ByContent("l:foo bar");
            Example 2: ByContent("p:foo");
            Example 3: ByContent("x:[*foo*]");
            </example>
            </summary>
            <param name="content">The content to match</param>
            <returns>The found element. The function returns null if no element is found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent``1(System.String)">
            <summary>
            Same as ByContent(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="content">The content to match</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType)">
             <summary>
             Returns an element by searching its content with the options to pick the
             content type. (InnerText, InnerMarkup or OuterMarkup)
             The content must start with:
             'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
             matches. If none are provided, the string will be matched using an exact match 'l:'.
             All searches are case-insensitive.
             <example>
             Similar to Find.ByContent(string) with the option to 
             specify the content type:
             Example 1: ByContent("l:foo bar",FindContentType.InnerText);
             Example 2: ByContent("p:<![CDATA[<foo id="f" />]]>",FindContent.OuterMarkup);
             </example>
             <remarks>
             There is a difference between FindContentType.InnerText and FindContentType.TextContent that is worth noting:
            
             Example: <div id="div1">Text1<div id="div2">Text2</div></div>
            
             InnerText for div1 : Text1Text2  {recursive}
             TextContent of div1 : Text1      {non-recursive}
            
             Default for ByContent is TextContent which is the most common usage.
             </remarks>
             </summary>
             <param name="content">The content to match.</param>
             <param name="contentType">The content type to match.</param>
             <returns>The found element. The function returns null if no element is found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent``1(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType)">
            <summary>
            Same as ByContent(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="content">The content to match.</param>
            <param name="contentType">The content type to match.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType,System.String[])">
             <summary>
             Returns an element by searching its content with the options to pick the
             content type. (InnerText, InnerMarkup or OuterMarkup) in addition to a list
             of attributes.
             The content must start with:
             'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
             matches. If none are provided, the string will be matched using an exact match 'l:'.
             All searches are case-insensitive.
             <example>
             Similar to Find.ByContent(string) with the option to 
             specify the content type:
             Example 1: ByContent("l:foo bar",FindContentType.InnerText);
             Example 2: ByContent("p:<![CDATA[<foo id="f" />]]>",FindContent.OuterMarkup);
             </example>
             <remarks>
             There is a difference between FindContentType.InnerText and FindContentType.TextContent that is worth noting:
            
             Example: <div id="div1">Text1<div id="div2">Text2</div></div>
            
             InnerText for div1 : Text1Text2  {recursive}
             TextContent of div1 : Text1      {non-recursive}
            
             Default for ByContent is TextContent which is the most common usage.
             </remarks>
             </summary>
             <param name="content">The content to match.</param>
             <param name="contentType">The content type to match.</param>
             <param name="nameValuePairs">The attribute name/value pairs to apply.</param>
             <returns>The found element. The function returns null if no element is found</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByContent``1(System.String,ArtOfTest.WebAii.ObjectModel.FindContentType,System.String[])">
            <summary>
            Same as ByContent(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="content">The content to match.</param>
            <param name="contentType">The content type to match.</param>
            <param name="nameValuePairs">The attribute name/value pairs to apply.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByXPath(System.String)">
            <summary>
            Returns an element using an XPath. This function supports
            the System.Xml XPath syntax.
            </summary>
            <param name="xpath">The XPath string. XPath is case-sensitive.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByXPath``1(System.String)">
            <summary>
            Same as ByXPath(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="xpath">The XPath string. XPath is case-sensitive.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ById(System.String)">
            <summary>
            Returns an element by looking for its 'id' attribute value. 
            </summary>
            <param name="id">The id value for the element to find. All searches are case-insensitive. 
            Prefix the id with '~' for partial id searches.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ById``1(System.String)">
            <summary>
            Same as ById(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="id">The id value for the element to find. All searches are case-insensitive</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByName(System.String)">
            <summary>
            Returns an element by searching for its 'name' attribute value
            </summary>
            <param name="name">The name value for the element to find. All searches as case-insensitive</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByName``1(System.String)">
            <summary>
            Same as ByName(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">The control type to create.</typeparam>
            <param name="name">The name value for the element to find. All searches as case-insensitive</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByNodeIndexPath(System.String)">
            <summary>
            Returns an element by searching for it using a node index path. 
            <example>
            <code>
            <![CDATA[
            For example: 
            
            This call: ByNodeIndexPath("0/2/0/1") describes the <target></target> element in the below hierarchy:
            
            <referenceElement>
             (0)<foo> 
                    <bar> 
                    </bar>
                    <car> 
                    </car>
                 (2)<bus>
                     (0)<driver>
                            <cap>
                            </cap>
                         (1)<target>
                            </target>
                        </driver>
                    </bus>
                </foo>
            </referenceElement>
            
             ]]>
            </code>
            </example>
            </summary>
            <param name="nodeIndexPath">The node index path. This is a forward slash delimited list
            of tree node indexes that describe a specific path to a target element while ignoring the 
            actual element tags and simply describing the hierarchal relationship to that element.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByNodeIndexPath``1(System.String)">
            <summary>
            Same as ByNodexIndexPath(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">Control type to create.</typeparam>
            <param name="nodeIndexPath">Node index path identifying the target element to wrap.</param>
            <returns>A control of the specified type.</returns>
            <exception cref="T:System.NullReferenceException">Thrown no element at the node index path.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByTagIndex(System.String,System.Int32)">
            <summary>
            Returns an element by its tag name occrrence. 
            </summary>
            <param name="tagName">The tag name to find.</param>
            <param name="occurrenceIndex">The tag name index. This is a zero-base index.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByTagIndex``1(System.String,System.Int32)">
            <summary>
            Same as ByTagIndex(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">Control type to create.</typeparam>
            <param name="tagName">The tag name to find.</param>
            <param name="occurrenceIndex">The tag name index. This is a zero-base index.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByAttributes(System.String[])">
            <summary>
            Returns a an element that has attributes that match the NameValuePairs passed it.
            All matching is case-insensitive.
            </summary>
            <param name="nameValuePairs">A list of name value pairs to match. For example:
            "bar=foo","class=myclass","src=~foo.gif","src=!bar". Use =~ for partial values or =! to exclude values.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByAttributes``1(System.String[])">
            <summary>
            Same as ByAttributes(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">Control type to create.</typeparam>
            <param name="nameValuePairs">A list of name value pairs to match. For example:
            "bar=foo","class=myclass","src=~foo.gif","src=!bar". Use =~ for partial values or =! to exclude values.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Return an element using a FindParam
            </summary>
            <param name="param">The FindParam that describes how to find
            the target element.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam``1(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Same as ByParam(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">Control type to create.</typeparam>
            <param name="param">The FindParam that describes how to find
            the target element.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByExpression(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find all elements by <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/>.
            </summary>
            <param name="expression">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> to use during the find.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of <see cref="T:ArtOfTest.WebAii.ObjectModel.Element">Element's</see></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByExpression``1(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find all elements by HtmlFindExpression of type TControl.
            </summary>
            <typeparam name="TControl">The type of control to search for and return.</typeparam>
            <param name="expression">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> to use during the find.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of TControl elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByExpression(System.String[])">
            <summary>
            Find all elements by HTML find expression strings.
            </summary>
            <param name="expression">Array of HTML find expression strings.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByExpression``1(System.String[])">
            <summary>
            Find all elements by HTML find expression strings of type TControl.
            </summary>
            <typeparam name="TControl">The type of control to search for and return.</typeparam>
            <param name="expression">Array of HTML find expression strings.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of TControl elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByExpression``1(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find element by <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> of type TControl.
            </summary>
            <typeparam name="TControl">The type of control to search for and return.</typeparam>
            <param name="expression">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> to use during the find.</param>
            <returns>A TControl element if found or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByExpression``1(System.String[])">
            <summary>
            Find element by HTML find expression strings of type TControl.
            </summary>
            <typeparam name="TControl">The type of control to search for and return.</typeparam>
            <param name="expression">Array of HTML find expression strings.</param>
            <returns>A TControl element if found or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByExpression(System.String[])">
            <summary>
            Find element by HTML find expression strings.
            </summary>
            <param name="expression">Array of HTML find expression strings.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> if found or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByExpression(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find element by <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/>.
            </summary>
            <param name="expression">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> to use during the find.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> if found or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByExpression(ArtOfTest.WebAii.Core.HtmlFindExpression,System.Boolean)">
            <summary>
            Find <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> by <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/>.
            </summary>
            <param name="expression">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> to use during the find.</param>
            <param name="includeRoot">Whether or not to include the root element in the search.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> if found or null if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam(ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Returns an element using a chained identification. 
            </summary>
            <param name="chainedParams">An array of FindParams used to identify an element
            by piping the search result of each FindParam as the reference element 
            for the FindParam that follows.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam``1(ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Same as ByParam(). Returns a control type instead of element.
            </summary>
            <typeparam name="TControl">Control type to create.</typeparam>
            <param name="chainedParams">An array of FindParams used to identify an element
            by piping the search result of each FindParam as the reference element 
            for the FindParam that follows.</param>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.BuildFindParamFromIdOrName(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Build a FindParam object from an id or name.
            </summary>
            <param name="e">The element to use.</param>
            <returns>The FindParam object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.BuildFindClausesFromIdList(ArtOfTest.WebAii.ObjectModel.Element,System.Collections.Generic.List{System.String})">
            <summary>
            Build a FindExpression object from an id or name
            </summary>
            <param name="e">The element for which to build a FindExpression</param>
            <returns>A FindExpression identifying the element by its id or name attribute</returns>
            <exception cref="T:System.ArgumentException">Thrown when a FindExpression can't be built from Id or Name since both are empty.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByCustomInternal``1(System.Predicate{``0},ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            ByCustomInternal (Generic)
            </summary>
            <typeparam name="TControl">The control type to wrap the element in and return.</typeparam>
            <param name="predicate">The predicate to use during the search.</param>
            <param name="e">The element to wrap.</param>
            <returns>A control of the type TControl if found. 'null' if not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByCustomInternal``1(System.Predicate{``0},ArtOfTest.WebAii.ObjectModel.Element,System.Collections.Generic.List{``0})">
            <summary>
            AllByCustomInternal (Generic)
            </summary>
            <typeparam name="TControl"></typeparam>
            <param name="predicate"></param>
            <param name="e"></param>
            <param name="controls"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByCustomInternal(System.Predicate{ArtOfTest.WebAii.ObjectModel.Element},ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Search the Dom tree using a custom predicate
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="e">The element to start the search with.</param>
            <returns>The element, else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByCustomInternal(System.Predicate{ArtOfTest.WebAii.ObjectModel.Element},ArtOfTest.WebAii.ObjectModel.Element,System.Collections.Generic.List{ArtOfTest.WebAii.ObjectModel.Element})">
            <summary>
            Search the Dom Tree using a custom predicate.
            </summary>
            <param name="predicate"></param>
            <param name="e"></param>
            <param name="elements"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.GetStronglyTypedCollection``1(System.Collections.Generic.IList{ArtOfTest.WebAii.ObjectModel.Element},System.Boolean)">
            <summary>
            Gets a strongly-types collection of TControl type.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="elementsCollection">The elements collection.</param>
            <param name="ignoreMismatches">True/False whether to ignore mismatches or not.</param>
            <returns>The control collection.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.AllByParam(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Returns a list of elements that match the specified FindParam.
            Note that this method does not support FindParam.Type=NodePathIndex.
            </summary>
            <param name="param">The FindParam to match.</param>
            <param name="reference">The element that defines where to start the search. All references
            are calculated with this element as the root reference.</param>
            <returns>The list of found elements.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Return an element using a FindParam
            </summary>
            <param name="param">The FindParam that describes how to find
            the target element.</param>
            <param name="reference">The element that defines where to start the search. All references
            are calculated with this element as the root reference.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ByParam(ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Returns an element using a chained identification. 
            </summary>
            <param name="chainedParams">An array of FindParams used to identify an element
            by piping the search result of each FindParam as the reference element 
            for the FindParam that follows.</param>
            <param name="reference">The element that defines where to start the search. All references
            are calculated with this element as the root reference.</param>
            <returns>The found element. The function returns null if no element is found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.DisableThrowIfNullException">
            <summary>
            Sets ThrowIfNullOrEmpty to false and stores its current value to be restored later by ResetThrowIfNullException.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.ResetThrowIfNullException">
            <summary>
            Restores the ThrowIfNullOrEmpty value to its original value before calling DisableThrowIfNullException.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.SetSearchRootElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Sets the root search element. This is only valid when FindReferenceType=Element. Otherwise,
            this call will produce no effect.
            </summary>
            <param name="searchRootElement">The root element to set.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Find.BuildBestFitFindExpression(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Generates a HtmlFindExpression to be used to find the specified element.
            The function uses an algorithm optimized for most reliable search methods
            and will revert back to using the tagname index as a last resort
            </summary>
            <param name="element">The element to generate the find expression for.</param>
            <returns>The find expression to use to find the element. Can contain nested find expressions.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler">
             <summary>
             Settings object config section handler.
             Use this object to read a Settings config section in a .config file.
             <example>
             <code>
             You can persist the settings for your application/test cases in a config file.
             
             The following is a sample config file that holds certain settings. Any settings
             not specified in this section, their values will be set to the system defaults:
             
             <![CDATA[ 
             <?xml version="1.0" encoding="utf-8" ?>
                <configuration>
                    <configSections>
                        <section name="WebAii.Settings" type="ArtOfTest.WebAii.Core.SettingsConfigSectionHandler,ArtOfTest.WebAii"/>
                    </configSections>
             
                <WebAii.Settings
                    defaultBrowser="InternetExplorer"
                    logLocation="D:\Log\"
                    executionTimeout="30000"
                    clientReadyTimeout="60000"
                    localWebServer="None";
                    webAppPhysicalPath="c:\Inetpub\wwwroot\MyApplication"
                    enableScriptLogging="false"
                    queryEventLogErrorsOnExit="false"
                    enableUILessRequestViewing="false"
                    baseUrl="http://www.testsite.com/"
                    executionDelay="0"
                    annotateExecution="false"
                    annotationMode="All"
                    logAnnotations="false"
                    simulatedMouseMoveSpeed="0.3f"
                    waitCheckInterval="500"
                    aspNetDevServerPort="-1"
                    createLogFile="true"
                    killBrowserProcessOnClose="false"
                    recycleBrowser="false"
                    useHttpProxy="false"
                    enableSilverlight="false"
                    xMultiMgr="false"
                    silverlightConnectTimeout="60000"
                    elementWaitTimeout="15000"
                />
            
                </configuration>
             ]]>
             
             In your code, you can get these settings by using the SettingsConfigSectionHandler like this:
             
             SettingsConfigSectionHandler settingsSection = 
                         (SettingsConfigSectionHandler)ConfigurationManager.GetSection("WebAii.Settings");
             Settings mySettings = new Settings(settingsSection);
             
             You can then use mySettings to pass in to the Manager constructor.
             </code>
             </example>
             </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.CreateLogFile">
            <summary>
            Gets whether to create a log file on disk.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.AnnotationMode">
            <summary>
            Gets the annotation mode.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.LogAnnotations">
            <summary>
            Gets whether to log annotations to log file.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.LogLocation">
            <summary>
            Gets the log location where all logging by the framework will take place.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.UnexpectedDialogAction">
            <summary>
            Specifies the action to take when an unexpected dialog is encountered
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.DisableDialogMonitoring">
            <summary>
            Whether to disable handling of dialog windows. Disabling dialog handling can prevent some undesirable behavior triggered by bugs in the .NET UI Automation services.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.ExecutionTimeout">
            <summary>
            Gets the Execution timeout for commands.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.ClientReadyTimeout">
            <summary>
            Gets the client ready timeout.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.QueryEventLogErrorsOnExit">
            <summary>
            If true, will query the event log for any un expected client errors.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.ExecutionDelay">
            <summary>
            The execution delay set.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.AnnotateExecution">
            <summary>
            Whether to enable execution highlight.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.SimulatedMouseMoveSpeed">
            <summary>
            The simulated mouse move speed
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.WaitCheckInterval">
            <summary>
            The global wait.Forxx interval check.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.XMultiMgr">
            <summary>
            Enables WebAii 1.1 style connections to the browser.
            Added for backwards compatibility for VistaPrint doing parallel testing
            multiple managers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.SettingsConfigSectionHandler.ElementWaitTimeout">
            <summary>
            The global wait for elements timeout (msec) to be used during execution.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Settings">
            <summary>
             Class representing the settings to be used when initializing the framework.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.ObsoleteProperties">
            <summary>
            XmlSerializer won't deserialize properties marked as Obsolete
            So we'll keep a list here of all our obsolete properties, for use when encountering an UnknownElement during Deserialization
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WpfSettings._defaultApplicationPath">
            <summary>
            Hold the defalf wpf application path.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WpfSettings.DefaultApplicationPath">
            <summary>
            Gets/Sets the default application path to be used in WPF tests.
            Represents the default application path for the WPF tests. Once set each test will by default use that path 
            for recording and execution unless one unchecks the "Use default path" option in the WPF test configuration dialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WpfSettings.#ctor(System.String)">
            <summary>
            Create a new Settings.Wpf object.
            </summary>
            <param name="baseUrl">The default application path to use</param>            
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WpfSettings.#ctor(ArtOfTest.WebAii.Core.Settings.WpfSettings)">
            <summary>
            Create a clone of the passed in settings
            </summary>
            <param name="settingsToClone"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WpfSettings.#ctor(ArtOfTest.WebAii.Core.WpfSettingsConfigSectionHandler)">
            <summary>
            Create a new Settings object from a config section.
            </summary>
            <param name="sectionHandler">The config section handler that contains the settings.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WpfSettings.LocateAspNetWebServerExe(ArtOfTest.WebAii.Core.LocalWebServerType)">
            <summary>
            Find the location of the ASP.NET Dev Server (aka Cassini).
            </summary>
            <returns>If found, the path to the ASP.NET Dev Server. Else string.Empty.</returns>
            <exception cref="T:System.ApplicationException">Thrown when an error occurs enumerating the registry keys.</exception>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._baseWebAppBase">
            <summary>
            The base WebAii base. This property is set dynamically
            using the SetWebAppBase().
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._webAppPhysicalPath">
            <summary>
            When using ASP.NET Dev Server, this is the physical path to the application
            we are testing.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._defaultBrowser">
            <summary>
             Startup browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._enableScriptLogging">
            <summary>
            Whether to enable the ability to log directly from script.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._enableUILessRequestViewing">
            <summary>
            Whether to enable viewing of UI page requests.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._localWebServer">
            <summary>
            The type of local web server to use to server pages.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._baseUrl">
            <summary>
            The base url to use for all NavigateTo calls.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._baseUri">
            <summary>
            The initialized base uri object for the base Url
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._aspNetDevServerPort">
            <summary>
            The Asp.Net Development Server Port.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._aspNetDevServerPhysicalPath">
            <summary>
            The physical path to the aspnet dev server.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._killBrowserProcessOnClose">
            <summary>
            On exit will kill all browser processes.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._recycleBrowser">
            <summary>
            Whether to recycle the browser instance or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._useHttpProxy">
            <summary>
            Enable the http proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._enableSilverlight">
            <summary>
            Enable silverlight automation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._verboseHttpProxy">
            <summary>
            Enables verbose tracing output from the HTTP proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._silverlightConnectTimeout">
            <summary>
            Silverlight application load timeout.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._silverlightApplicationPath">
            <summary>
            The local or web path to initialize the silverlight app
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.WebSettings._profilerConfigurations">
            <summary>
            The profiler configurations to use in the event that this test list has profiling enabled.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.AspNetDevServerPhysicalPath">
            <summary>
            Gets the physical path
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.RecycleBrowser">
            <summary>
            When set to true, once instance of the browser will be launched and recycled through
            out the test bed and tests until Manager.Dispose is called.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.AspNetDevServerPort">
            <summary>
            Gets/Sets the AspNetDevServer (if used) port to use. If this is not set (-1) a random port will be
            generated each time the manager is created.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.LocalWebServer">
            <summary>
            Gets/Sets the local web server to use to serve pages. Default is None.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.EnableUILessRequestViewing">
            <summary>
            Gets/Sets whether or not to allow debugging of UILess page requests using a UI browser like IE. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.WebAppPhysicalPath">
            <summary>
            Gets/Sets the physical path to the application to test when running under
            the ASP.NET development server. Default is string.empty.
            <example>C:\Inetpub\wwwroot\myApp\</example>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.DefaultBrowser">
            <summary>
            Gets/Sets a supported default browser type (IE,FireFox ...etc). Default is InternetExplorer.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.Browser">
            <summary>
            Serves as a wrapper of the DefaultBrowser property.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.EnableScriptLogging">
            <summary>
            Gets/Sets whether or not to enable script logging. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.BaseUrl">
            <summary>
            Gets/Sets the base url to use for all NavigateTo commands.
            When set NavigateTo should use a relative url (i.e. "~/default.aspx"). Default is string.empty.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.KillBrowserProcessOnClose">
            <summary>
            Gets or sets whether to make sure the browser process is killed when closing the browser.
            Note: Firefox is a single process browser. If you are using multiple browser instances and this setting is on, it will kill
            all open instances of Firefox when you close one of the instances.
            Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.UseHttpProxy">
            <summary>
            Gets/Sets whether or not to use the built-in http proxy during automation. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.EnableSilverlight">
            <summary>
            Gets/Sets whether or not to enable Silverlight automation. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.VerboseHttpProxy">
            <summary>
            Gets/Sets whether the HTTP proxy produces lots of tracing output. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.SilverlightConnectTimeout">
            <summary>
            Gets/Sets the Silverlight Application load timeout
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.SilverlightApplicationPath">
            <summary>
            Gets/Sets the path from which to load a silverlight application
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.#ctor(System.String)">
            <summary>
            Create a new Settings.Web object.
            </summary>
            <param name="baseUrl">The baseUrl to use</param>            
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.#ctor(ArtOfTest.WebAii.Core.BrowserType)">
            <summary>
            Create a new Settings object.
            </summary>
            <param name="defaultBrowser">The default browser to use.</param>                        
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.#ctor(ArtOfTest.WebAii.Core.BrowserType,System.String)">
            <summary>
            Create a new Settings object.
            </summary>
            <param name="defaultBrowser">The default browser to use.</param>
            <param name="logLocation">The log location where to do the logging.</param>
            <param name="baseUrl">The baseUrl to use.</param>            
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.#ctor(ArtOfTest.WebAii.Core.Settings.WebSettings)">
            <summary>
            Create a clone of the passed in settings
            </summary>
            <param name="settingsToClone"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.#ctor(ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler)">
            <summary>
            Create a new Settings object from a config section.
            </summary>
            <param name="sectionHandler">The config section handler that contains the settings.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.SetWebAppPhysicalBase(System.String)">
            <summary>
            Set the WebApp Physical base to be used when
            using relative WebAppPhysicalBase.
            </summary>
            <param name="physicalBase">Physical app base</param>            
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.PersistToConfigSection(ArtOfTest.WebAii.Core.WebSettingsConfigSectionHandler)">
            <summary>
            Persist current Settings to a section handler.
            </summary>
            <param name="sectionHandler"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.ResolveRelativeProjectPath(System.String)">
            <summary>
            Given a relative path to the project root. Resolve the full path.
            </summary>
            <param name="path">The relative path.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.WebSettings.LocateAspNetWebServerExe(ArtOfTest.WebAii.Core.LocalWebServerType)">
            <summary>
            Find the location of the ASP.NET Dev Server (aka Cassini).
            </summary>
            <returns>If found, the path to the ASP.NET Dev Server. Else string.Empty.</returns>
            <exception cref="T:System.ApplicationException">Thrown when an error occurs enumerating the registry keys.</exception>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WebSettings.BaseUri">
            <summary>
            Gets the base Uri object for the baseUrl set in the settings. Else null.
            </summary>            
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Settings.Win32.HKEYS">
            <summary>
            All the root key contants you can use with RegOpenKeyEx
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Settings.Win32.KeySecurityAccessMode">
            <summary>
            All the security access modes you can use with RegOpenKeyEx
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Win32.RegOpenKeyEx(ArtOfTest.WebAii.Core.Settings.Win32.HKEYS,System.String,System.UInt32,ArtOfTest.WebAii.Core.Settings.Win32.KeySecurityAccessMode,System.UIntPtr@)">
            <summary>
            Open a registry key
            </summary>
            <param name="hKey">The starting registry key.</param>
            <param name="subKey">The subkey to open.</param>
            <param name="options">Must be 0.</param>
            <param name="sam">The security access mode.</param>
            <param name="phkResult">If successful, the opened subkey.</param>
            <returns>0 on success. Otherwise returns an error code defined in WINERROR.H.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Win32.RegEnumKey(System.UIntPtr,System.UInt32,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Enumerate through registry subkeys.
            </summary>
            <param name="hkey">The opened registry key to enumerate the subkeys of.</param>
            <param name="index">The zero based index of the subkey to return.</param>
            <param name="lpName">Where to store the subkey name.</param>
            <param name="lpcbSize">The size of the buffer for the subkey name.</param>
            <returns>0 on success. Otherwise returns an error code defined in WINERROR.H.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Settings.Win32.SYSTEM_INFO">
            <summary>
            The windows native SYSTEM_INFO structure marshaled into the managed code world.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings.Win32.PROCESSOR_ARCHITECTURE_INTEL">
            <summary>
            The processor architecture values returned in the SYSTEM_INFO structure.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Win32.GetNativeSystemInfo(ArtOfTest.WebAii.Core.Settings.Win32.SYSTEM_INFO@)">
            <summary>
            Fetch the system info from native Windows API call.
            </summary>
            <param name="lpSystemInfo"></param>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._webSettings">
            <summary>
            Encapsulates all web settings
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._wpfSettings">
            <summary>
            Encapsulates all wpf settings
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._clientReadyTimeout">
            <summary>
            Timeout used to wait for client to be ready after first launch
            and after execution a command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._executeCommandTimeout">
            <summary>
            The wait time between a command request and its response
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._logLocation">
            <summary>
            Location where all log files will exist
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._queryEventLogErrorsOnExit">
            <summary>
            Whether to query the event log for errors on exit.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._executionDelay">
            <summary>
            The execution delay to use
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._annotateExecution">
            <summary>
            True/False whether to highlight/annotate execution
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._simulateMouseMoveSpeed">
            <summary>
            The mouse move speed for Desktop.Mouse.Move()/DragDrop() operations.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._waitCheckInterval">
            <summary>
            The interval in msec. to use between checks for all the WaitForxx methods.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._annotationMode">
            <summary>
            The annotation mode when enabled
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._logAnnotations">
            <summary>
            Whether to log annotations to log file.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._createLogFile">
            <summary>
            Whether to create the log file or not on disk
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._useXMultiMgr">
            <summary>
            Causes WebAii to use version 1.1 connection method to the browser.
            Implemented for backward compatibility for VistaPrint. They managed
            to get parallel testing running... multiple managers.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._processorArchitecture">
            <summary>
            Which processor platform we're running on
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._unexpectedDialogAction">
            <summary>
            Specifies the action that the DialogMonitor should take when it encounters unexpected dialogs
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Settings._elementWaitTimeout">
            <summary>
            The wait timeout for all elements during execution
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Settings.Platform">
            <summary>
            The possible processor architectures
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.#ctor">
            <summary>
            Create a new Settings object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.#ctor(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Create a clone of the passed in settings
            </summary>
            <param name="settingsToClone"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.#ctor(ArtOfTest.WebAii.Core.SettingsConfigSectionHandler)">
            <summary>
            Create a new Settings object from a config section.
            </summary>
            <param name="sectionHandler">The config section handler that contains the settings.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.PersistToConfigSection(ArtOfTest.WebAii.Core.SettingsConfigSectionHandler)">
            <summary>
            Persist current Settings to a section handler.
            </summary>
            <param name="sectionHandler"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Validate">
            <summary>
            Validate the settings.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Reset">
             <summary>
             Resets all settings to the default system settings of the infrastructure.
             <example>
             The following are the system default settings:
            
             DefaultBrowser=InternetExplorer
             ClientReadyTimeout=30000
             ExecutionCommandTimeout=20000
             LogLocation='C:\WebAiiLog\'
             WebAppPhysicalPath=""
             EnableScriptLogging=false
             QueryEventLogErrorsOnExit=false
             LocalWebServer=LocalWebServerType.None
             EnableUILessRequestViewing=false
             BaseUrl=""
             ExecutionDelay=0
             AnnotateExecution=false
             SimulatedMouseMoveSpeed=0.3f
             waitCheckInterval=500
             aspNetDevServer=-1
             annotationMode=All
             logAnnotations=false
             createLogFile=true
             killBrowserProcessOnClose=false
             recycleBrowser=false
             enableSilverlight=false
             useHttpProxy=false
             verboseHttpProxy=false
             SilverlightConnectTimeout=60000msec
             </example>
             </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.Clone">
            <summary>
            Clone the existing settings
            </summary>
            <returns>The cloned settings</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.Current">
            <summary>
            The current settings object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.Web">
            <summary>
            Container for all web specific settings
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.Wpf">
            <summary>
            Container for all wpf specific settings
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.IsUserInteractiveMode">
            <summary>
            Gets whether the test is running in a user interactive mode
            or as non-user interactive.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.Is64BitOS">
            <summary>
            Whether or not we're a 32-bit app running on a 64 bit OS
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.CreateLogFile">
            <summary>
            Gets or sets whether or not to create a log file on disk.
            This value is read once at initialization time. Changing this value during test execution has no effect.
            Default is true
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.LogLocation">
            <summary>
            Gets/Sets the location where to perform all the logging. Default is C:\WebAiiLog\.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.QueryEventLogErrorsOnExit">
            <summary>
            Gets/Sets whether to query the event log on manager exit for
            any error logged from automation clients. Any errors will
            be logged to the test log. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.LogAnnotations">
            <summary>
            Gets/Sets whether or not to log annotations to the log file. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.SimulatedMouseMoveSpeed">
            <summary>
            Gets/Sets the simulated mouse move speed for Desktop.Mouse.Move()/DragDrop() operations in pixels/msec.
            [Typically between 0.1f - .5f] Default is 0.3f
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.WaitCheckInterval">
            <summary>
            Gets/Sets the interval in msec. to use between checks for all the WaitForxx methods. Default is 500 msec.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.ElementWaitTimeout">
            <summary>
            Gets/Sets the global wait on elements timeout that will be used during execution.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.ExecuteCommandTimeout">
            <summary>
            Gets/Sets The timeout to wait for a command request to execute. (msec.). Default is 30000 msec.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.ExecutionDelay">
            <summary>
            Gets/Sets an execution delay in between commands. This can help in observing test execution. Default is zero.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.AnnotateExecution">
            <summary>
            Gets/Sets whether to highlight/annotate the target elements that action is being executed against. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.AnnotationMode">
            <summary>
            Gets/Sets the annotation mode when annotation is enabled. Default is All.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.XMultiMgr">
            <summary>
            Gets/Sets whether or not to use WebAii 1.1 style connections. Default is false.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Settings.ClientReadyTimeout">
            <summary>
            Gets/Sets timeout used to wait for a client to be ready after initial launch
            and after executing a command. (msec.). Default is 20000 msec.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.IsTargetAspNetServer(System.String,ArtOfTest.WebAii.Core.LocalWebServerType)">
            <summary>
            Determine is the target AspNet Server is what we want.
            </summary>
            <param name="keyName">The server name found</param>
            <param name="server">The target</param>
            <returns>True/False whether or not they specified key has the right server name.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.SetSettings(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Set the internal static settings object.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Settings.GetPlatform">
            <summary>
            Returns the processor architecture the OS is running in.
            </summary>
            <returns>The processor architecture.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Log">
            <summary>
            Log support for the framework and test cases.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Log.LogWrite">
            <summary>
            This event is invoked everytime a WriteLine is invoked. External frameworks
            can attach to this event to capture logs from this framework to help unify their logging.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._capturedBitmaps">
            <summary>
            List of captured bitmaps
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._bitmapCounter">
            <summary>
            Bitmap counter
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._writer">
            <summary>
            IO text writer
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._fileName">
            <summary>
            Full file name where we are doing the logging to.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._logString">
            <summary>
            Buffer to hold current log text.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._logLocation">
            <summary>
            The log location on disk where were we are currently creating any logs.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log.disposed">
            <summary>
            Track whether dispose has been called.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Log._createLogFile">
            <summary>
            Whether to create a log file on disk or not.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a new Log object.
            </summary>
            <param name="logLocation">The log location where to create the log.</param>
            <param name="fileNamePrefix">The prefix to use for the log file name.</param>
            <param name="createLogFile">Whether or not a log file needs to be created.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.WriteLine(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Log information to the event log.
            </summary>
            <param name="type"></param>
            <param name="message"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.WriteLine(System.String)">
            <summary>
            Write a line to the log file.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.WriteLineInternal(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Write a line to the log file.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureDesktop">
            <summary>
            Captures the entire desktop to the log location.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureDesktop(System.String)">
            <summary>
            Captures the entire desktop to the log location.
            </summary>
            <param name="fileNamePrefix">File name prefix to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureDesktop(System.String,System.Boolean)">
            <summary>
            Captures the entire desktop to the log location.
            </summary>
            <param name="fileNamePrefix">File name prefix to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureBrowser(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Captures a visual snap shot of a specific browser instance and logs it to the log location.
            This function will also add the path to the image to the log file.
            </summary>
            <param name="browserToCapture">The browser instance to capture.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureBrowser(ArtOfTest.WebAii.Core.Browser,System.String)">
            <summary>
            Captures a visual snap shot of a specific browser instance and logs it to the log location.
            This function will also add the path to the image to the log file.
            </summary>
            <param name="browserToCapture">The browser instance to capture.</param>
            <param name="fileNamePrefix">The file name prefix to use on disk.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureBrowser(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean)">
            <summary>
            Captures a visual snap shot of a specific browser instance and logs it to the log location.
            This function will also add the path to the image to the log file.
            </summary>
            <param name="browserToCapture">The browser to capture.</param>
            <param name="fileNamePrefix">The file name prefix.</param>
            <param name="overrideFile">Override the file if exists or not.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.CaptureWindow(ArtOfTest.WebAii.Wpf.WpfWindow,System.String)">
            <summary>
            Captures a visual snap shot of a specific window instance.
            This function will also add the path to the image to the log file.
            </summary>
            <param name="windowToCapture">The window to capture.</param>
            <param name="fileNamePrefix">The file name prefix.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ArtOfTest.WebAii.Core.Log.CaptureWindow(ArtOfTest.WebAii.Wpf.WpfWindow,System.String,System.Boolean)" -->
        <member name="M:ArtOfTest.WebAii.Core.Log.SaveImageToDisk(System.Drawing.Bitmap,System.String,System.String,System.Boolean)">
            <summary>
            Save an image to the disk.
            </summary>
            <param name="image">The image</param>
            <param name="fileNamePrefix">the file prefix</param>
            <param name="msg">Any message to add to the log.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.OnLogWriteLine(ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs)">
            <summary>
            Invoke the LogWriteLine event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Log.FileName">
            <summary>
            Full file name where we are doing the logging to.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Log.LogLocation">
            <summary>
            The log location on disk where were we are currently creating any logs.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Log.Text">
            <summary>
            Current string of the log. This is an snap shot of what is currently in the log.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.Dispose(System.Boolean)">
            <summary>
            Clean up all resources
            </summary>
            <param name="disposing">Whether we are disposing or not.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Log.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Browser">
            <summary>
            Class represents a browser instance managed by the Manager. 
            This object exposes all the browser specific information and methods to automate
            the underlying browser that this instance represents.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Browser.BeforeCommandExecuted">
            <summary>
            Event occurs before a command is pushed to the browser.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Browser.AfterCommandExecuted">
            <summary>
            Event occurs after the command is executed and the response is available.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Browser.DomRefreshed">
            <summary>
            Event occurs after the DomTree is rebuilt (either after a command is executed or when RefreshDom is called)
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Core.Browser.Closing">
            <summary>
            Event occurs when the browser is about to close. [Browser.Close()] is called.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser.CLIENT_READY_CHECK_INTERVAL">
            <summary>
            This is the time interval in millisecond when checking if a client is ready
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser.URL_TOKEN">
            <summary>
            The URL token in the view source string.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser.TITLE_TOKEN">
            <summary>
            The token for indicating an un-initialized title.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._clientId">
            <summary>
            The instance Id of this browser object. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._title">
            <summary>
            Gets the page title if on exists. (content of title tags)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._browserType">
            <summary>
            The actual browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._version">
            <summary>
            The browser version.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._manager">
            <summary>
            The context object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._domTree">
            <summary>
            The current DOM tree that represents what's current displayed in the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._action">
            <summary>
            Action object used to invoked action on the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._hwnd">
            <summary>
            Window handle of the browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._commandTimeOut">
            <summary>
            The time out the browser will wait for a command to be processed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._autoDomRefresh">
            <summary>
            If set to true, all command requests will wait for documents to load
            and return the current the markup of the page in the DOMTree property.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._autoWaitUntilReady">
            <summary>
            Will wait until the browser is ready for the next command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._viewSource">
            <summary>
            The actual markup source of the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._browserWindow">
            <summary>
            The Win32 window representation of the browser window
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._find">
            <summary>
            Object used for finding elements in the DOM tree.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._url">
            <summary>
            The current page Url
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._frames">
            <summary>
            The frames collection contained in this browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._isFrame">
            <summary>
            Whether this browser object represents a frame object or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._frameInfo">
            <summary>
            If this is a frame, then this will contain the browser
            frame information like index and frame name if available.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._frameElement">
            <summary>
            If this is a frame, then this will contain the frame or iframe element in this frame's owner browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._isUILess">
            <summary>
            Whether this browser is UIless.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._cookies">
            <summary>
            The cookies manager for this browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._annotator">
            <summary>
            The annotator object associated with this browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._isIEDialog">
            <summary>
            If this instance is an IE Modal dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._domHashCode">
            <summary>
            The current DOM hash code. We will check this before re-parsing the DOM.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._readyWait">
            <summary>
            The wait object used to wait for events.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._remotedBrowser">
            <summary>
            The remoted browser instance for communication.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser.s_HashAlg">
            <summary>
            Hashing algorithm
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._desktop">
            <summary>
            Desktop that annotates its actions in this browser window
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._lazyLock">
            <summary>
            Lazy initialization lock
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Browser._creationTime">
            <summary>
            The UTC time this instance was instantiated.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.#ctor(System.String,ArtOfTest.WebAii.Core.BrowserType,System.String,ArtOfTest.WebAii.Core.Manager,System.IntPtr,System.Boolean,ArtOfTest.WebAii.Core.FrameInfo,System.Boolean,System.Boolean)">
            <summary>
            Create a new browser object.
            </summary>
            <param name="browserInstanceId">The browser instance unique id.</param>
            <param name="type">The browser type.</param>
            <param name="version">The browser version.</param>
            <param name="currentManager">The current manager object managing this instance.</param>
            <param name="hwnd">The hwnd of the actual browser that this instance represents</param>
            <param name="isFrame">Whether this browser instance represents a frame.</param>
            <param name="frameInfo">The current frame information.</param>
            <param name="isUILess">Whether the browser is UILess</param>
            <param name="isIEDialog">(IE Only) when the browser instance is an IE dialog.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.SetCommunicationPipe(ArtOfTest.WebAii.Messaging.Process.IBrowserRemoted)">
            <summary>
            Set the duplex communication pipe of this browser
            </summary>
            <param name="remotedBrowser">The remoted browser</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.QueryString">
            <summary>
            Gets a parsed name/value collection of the query string.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.IsIEDialog">
            <summary>
            Gets whether this instance is an IE dialog (Modal/Modeless)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Cookies">
            <summary>
            Gets the cookies manager associated with this browser that allows you
            to retrieve, delete and add cookies.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.IsUILess">
            <summary>
            Whether this browser is UI less browser. (i.e. a raw http request/response browser)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Url">
            <summary>
            Gets the current page URL. This property is refreshed when calling RefreshDOMTree().
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Window">
            <summary>
            Gets the Win32 window object representing the actual browser window.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.BrowserType">
            <summary>
            Gets the browser type (i.e. IE/FireFox ...etc)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Version">
            <summary>
            The browser version for this browser type.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.ViewSourceString">
            <summary>
            Gets the source of the page currently loaded in the browser.
            This is the string that the framework used to build the DOM.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.AutoWaitUntilReady">
            <summary>
            Gets/Sets whether to automatically wait until browser is ready after each browser command.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.AutoDomRefresh">
            <summary>
            Gets/Sets whether to automatically refresh the DOM tree after each browser command.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.CommandTimeOut">
            <summary>
            Gets/Sets the max wait time in milliseconds that the 
            browser will wait for a command to process
            before it times out.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.PageTitle">
            <summary>
            Gets the page title if one exists. (text content of the 'title' tags)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.ContentWindow">
            <summary>
            Gets the container window of the browser that contains the actual content of the page. 
            (Excludes the browser toolbars, buttons ...etc.)
            </summary>
            <remarks>
            For Firefox 4, the ContentWindow returns the same Window as the Window property.
            Firefox 4 does not have separate Win32 windows for its chrome and its content.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Find">
            <summary>
            Gets the Find objects used to provide a rich set of methods to help identify elements in 
            the Dom tree associated with this browser object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.DomTree">
            <summary>
            Gets the DOM Tree representation of the currently loaded document.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.IsUsable">
            <summary>
            Whether the browser is in a state that is usable for automation (we're connected to it and it's visible)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.IsConnected">
            <summary>
            Gets whether the browser is connected to manager of not.
            </summary>
            <remarks>
            This property performs a two way communication check between the manager and the actual browser.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Actions">
            <summary>
            Gets the Actions object that can be used to perform different actions against the loaded document in the browser.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Regions">
            <summary>
            Gets a dictionary of all identified test regions in the currently loaded document.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Frames">
            <summary>
            List of child frames contained in this instance
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.IsFrame">
            <summary>
            Gets whether this instance represents a frame or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.FrameInfo">
            <summary>
            Gets the frame information if IsFrame = true else will return null.
            FrameInfo contains frame index and frame name.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.ClientId">
            <summary>
            The unique ID for this browser that the manager identifies it with.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.NativeInstance">
            <summary>
            The native instance of this browser object (if available), otherwise null
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Manager">
            <summary>
            The manager of this browser object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Annotator">
            <summary>
            Gets the Annotator object associated with this browser.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.Desktop">
            <summary>
            Desktop object that draws its annotations in this browser
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.FrameElement">
            <summary>
            Gets the Element object for the frame element represented by this Browser object, if this Browser represents
            a frame.  If this Browser does not represent a frame, FrameElement is null.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.CreationTime">
            <summary>
            The UTC time this instance was instantiated.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ContainsText(System.String)">
            <summary>
            True/False whether the 'text' is contained within the page currently loaded. Not case sensitive.
            </summary>
            <param name="text">The text string. </param>
            <returns>True/False whether the text is contained.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GetSelectedText">
            <summary>
            Gets the text currently selected by the user in the browser window
            </summary>
            <returns>The selected text</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ContainsRectangle(System.Drawing.Rectangle)">
            <summary>
            True/False whether a specific rectangle falls within this browser/frame rendering region 
            </summary>
            <param name="rectangle">The rectangle to check.</param>
            <returns>True/False whether the rectangle is within the browser window.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ContainsPoint(System.Drawing.Point)">
            <summary>
            True/False whether a specific point falls within this browser/frame rendering region 
            </summary>
            <param name="point">The point to check.</param>
            <returns>True/False whether the point is within the browser window.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.Refresh">
            <summary>
            Simulates a browser Refresh.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GoBack">
            <summary>
            Simulates a go back browser action.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.Stop">
            <summary>
            Simulate a stop navigation browser action.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ToggleFullScreen">
            <summary>
            Toggle the browser in and out of Full Screen (F11)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GoForward">
            <summary>
            Simulates a go forward browser action.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.IsReady">
            <summary>
            Gets whether the browser is ready or not.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.NavigateTo(System.String,System.Boolean)">
            <summary>
            Navigate the browser to a specific url and then enable the script logging.
            </summary>
            <param name="url">The url to navigate to.</param>
            <param name="useDecodedUrl">Decode the url before navigate to it</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.NavigateTo(System.Uri,System.Boolean)">
            <summary>
            Navigate the browser to a specific url.
            </summary>
            <param name="uri">The uri object that describes the Url.</param>
            <param name="useDecodedUrl">Decode the url before navigate to it</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.InternalNavigateTo(System.Uri,System.Boolean)">
            <summary>
            Internal NavigateTo
            </summary>
            <param name="uri">The URI of the navigation.</param>
            <param name="useDecodedUrl">Decode the url before navigate to it</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Scroll this window by offset x horizontally and y vertically.
            </summary>
            <param name="x">The x offset.(negative for scroll left)</param>
            <param name="y">The y offset.(negative for scroll up)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ResizeContent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize the browser window content to the specified window rectangle.
            This function will handle the padding between the outer browser window and the content window.
            </summary>
            <param name="x">Desired x</param>
            <param name="y">Desired y</param>
            <param name="width">Desired width</param>
            <param name="height">Desired height</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ResizeContent(System.Drawing.Rectangle)">
            <summary>
            Resize the browser window content to the specified window rectangle.
            This function will handle the padding between the outer browser window and the content window.
            If the new rectangle will not fit within the bounds of the screen, this method will try to
            approximate the requested size within the bounds of the screen.
            </summary>
            <param name="rectangle">The desired rectangle for the content window</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.Close">
            <summary>
            Closes a browser window. 
            </summary>
            <remarks>
            This function will disconnect the browser from the manager first and then close its window.
            It will also perform a wait until the browser window is no longer visible. The time out for the 
            wait is the same as the ExecuteCommandTimeout.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.Close(System.Int32)">
            <summary>
            Closes a browser window with a custom wait to close timeout.
            </summary>
            <param name="waitToCloseTimeout">The timeout in milliseconds to wait for the browser to close.</param>
            <remarks>
            This function will disconnect the browser from the manager first and then close its window.
            It will also perform a wait until the browser window is no longer visible. The time out for the 
            wait is the same as the ExecuteCommandTimeout.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ExecuteCommand(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.Boolean,System.Boolean)">
            <summary>
            Executes a command against this browser instance.
            </summary>
            <param name="request">The command request to perform.</param>
            <param name="performDomRefresh">True/False whether to reference the DOM after the command.</param>
            <param name="waitUntilReady">True/False whether to wait for the browser to be ready after the command.</param>
            <returns>A response to the request.</returns>
            <remarks>
            If the request requires a specific response data, then the callers of this function should check the
            BrowserCommand.Response property for any responses from the browser.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ExecuteCommand(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Executes a command against this browser instance.
            </summary>
            <remarks>
            If the request requires a specific response data, then the callers of this function should check the
            BrowserCommand.Response property for any responses from the browser.
            This method uses the browser's AutoDOMRefresh and AutoWaitUntilReady values to configure whether
            the browser should refresh the DOM or wait until the browser is ready after the command is executed.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.RefreshDomTree">
            <summary>
            Force a referesh of the DOM tree from the current document.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForUrl(System.String,System.Boolean,System.Int32)">
            <summary>
            Wait for a specific url to be set. This can be used to wait for browser redirects
            on certain sites.
            </summary>
            <param name="url">The url to wait for.</param>
            <param name="isPartial">True/False whether to use partial comparison.</param>
            <param name="timeout">The timeout in milli-seconds to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitUntilReady">
            <summary>
            Waits for the browser until its ready
            </summary>
            <remarks>
            This method uses the Manager.Settings.ClientReadyTimeout as the timeout. 
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForFrame(ArtOfTest.WebAii.Core.FrameInfo)">
            <summary>
            Wait for a frame to exist. Uses the Settings.ClientReadyTimeout as the timeout
            </summary>
            <param name="frameInfo">The FrameInfo structure containing the frame details (id or name or src). Index is not needed.</param>
            /// <returns>The Browser object representing the frame, else will throw an exception.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForFrame(ArtOfTest.WebAii.Core.FrameInfo,System.Int32)">
            <summary>
            Wait for a frame to exist.
            </summary>
            <param name="frameInfo">The FrameInfo structure containing the frame details (id or name or src). Index is not needed.</param>
            <param name="timeout">The timeout to use for the wait.</param>
            <returns>The Browser object representing the frame, else will throw an exception.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForElement(System.Int32,System.String[])">
            <summary>
            Wait for an element to exist. If it exists, return the Element object, else will throw a Timeout Exception.
            </summary>
            <param name="findClauses">The Find Expression clauses</param>
            <param name="timeout">The timeout to use (msec)</param>
            <returns>The fully initialized found Element.</returns>
            <remarks>This method replaces the Actions.WaitForElement() and supports HtmlFindExpressions</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForElement(ArtOfTest.WebAii.Core.HtmlFindExpression,System.Int32,System.Boolean)">
            <summary>
            Wait for an element to exist. If it exists, return the Element object, else will throw a Timeout Exception.
            </summary>
            <param name="expression">The HtmlFindExpression</param>
            <param name="timeout">The timout to use. (msec)</param>
            <returns>The fully initialized found Element.</returns>
            <remarks>This method replaces the Actions.WaitForElement() and supports HtmlFindExpressions</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.WaitForAjax(System.Int32)">
            <summary>
            Wait for any active AJAX requests to complete.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.PrepareFrameForClosing">
            <summary>
            Used to disable the AutoRefreshDom and WaitUntilReady of a frame preparing it to be
            closed on next action and no longer polled by the framework.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.UpdateDomTree(System.String)">
            <summary>
            Parse and update the DomTree
            </summary>
            <param name="domString"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.UpdateTitle">
            <summary>
            Update the title of the page
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.BuildUrl(System.Uri,System.Boolean)">
            <summary>
            Build the url to use for Navigate. If relative, will try to resolve using the settings. base uri.
            </summary>
            <returns>The Url string to use to request the page.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ClearFrames">
            <summary>
            Clear the frames collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ClearCache(ArtOfTest.WebAii.Core.BrowserCacheType)">
            <summary>
            Clear the cache of a certain category.
            </summary>
            <param name="cacheType">The cache category</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.UpdateFrames(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Update the frames information.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ExecuteCommandInternal(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            The internal function that contains the guts of ExecuteCommand.
            </summary>
            <param name="request">The request.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.CheckReadyState(System.Object)">
            <summary>
            Thread used to wait for the browser to be in a ready state.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.CheckForBrowserUrl(System.Object)">
            <summary>
            Check for a specific url
            </summary>
            <param name="urlInfo"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.OnClosing">
            <summary>
            Invoked when the browser is about to close
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.OnBeforeExecuteCommand(ArtOfTest.WebAii.Messaging.Process.BrowserCommand@,System.String)">
            <summary>
            Invoke the BeforeExecuteCommand event.
            </summary>
            <param name="command">The command.</param>
            <param name="commandId">Command id.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.OnAfterExecuteCommand(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.String)">
            <summary>
            Invoke the AfterExecuteCommand event.
            </summary>
            <param name="command">The command.</param>
            <param name="commandId">Command id.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GenerateHash(System.String)">
            <summary>
            Generate a hash code for a given string.
            </summary>
            <param name="str">The string.</param>
            <returns>The hashcode as a string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.TranslateBrowserOffset(ArtOfTest.WebAii.Core.BrowserType,ArtOfTest.WebAii.Core.BrowserType,System.Drawing.Point)">
            <summary>
            Translates an offset from one browser to another. Useful because offset values recorded in Internet Explorer
            are typically two pixels different from offset values for the same relative point in other browsers.
            </summary>
            <param name="sourceBrowser">The BrowserType the offset was originally intended for</param>
            <param name="destinationBrowser">The BrowserType to translate the offset to</param>
            <param name="sourceOffset">The original offset value</param>
            <returns>A translated offset value. The offset is translated two pixels left and up when translating from Internet Explorer
            to any other browser, and translated two pixels down and right when translating from any other browser to Internet Explorer.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.ArtOfTest#Common#IAutomationHost#EnsureStateIsCurrent">
            <summary>
            Ensure the state of this host is current. This is the same as calling RefreshDomTree() but on the IAutomationHost.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.TechnologyType">
            <summary>
            Get the technology type
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.LocateInHost(System.String[])">
            <summary>
            Locate an element in the host using an expression.
            </summary>
            <param name="expression">Array of find expressions to use to locate the target element.</param>
            <returns>The target element if found. 'null' if not found.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.UniqueId">
            <summary>
            Gets a unique id that identifies this browser instance.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.StateHashCode">
            <summary>
            Get the state hash code.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GetHostRoot">
            <summary>
            Get the root element of the DomTree
            </summary>
            <returns>The root element of the DOM tree.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.GetChildHosts">
            <summary>
            Get all containing child hosts. For Browser, this will return a list of all Frames (if any) + any SilverlightApp instances
            </summary>
            <returns>The list of automation hosts contained in this browser instance</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.LocateAllInHost(System.String[])">
            <summary>
            Locates all elements contained in the browser's DOM matching the specified find expression.
            </summary>
            <param name="expression">Array of find expressions to use to locate the elements.</param>
            <returns>A list of elements matching the find expression.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Core.Browser.FriendlyName">
            <summary>
            Get a friendly name for this browser instance.
            </summary>
            <returns>A string representing the friendly name for this browser. Used for display in Elements Explorer.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Browser.Capture">
            <summary>
            Capture the image of this browser
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.Identification">
            <summary>
            Provides basic services to identify a certain element within a markup.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.Identification.PathSeparator">
            <summary>
            The path separator used to build the node index path
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindAllElements(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.String@)">
            <summary>
            Get all elements that match the criteria described in the FindParam.
            </summary>
            <param name="param">The FindParam</param>
            <param name="reference">The starting element for the search</param>
            <param name="ignoreTestRegionTags">Whether to ignore test region tags when doing the identification.</param>
            <param name="searchLog">The search log</param>
            <returns>A list of all elements that match the criteria defined in FindParam.</returns>
            <remarks>This function does not support NodeIndexPath identification.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindElement(ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.String@)">
            <summary>
            Similar to FindElement but this one uses a sequence of FindParams to reach the 
            element we want.
            </summary>
            <param name="chainedParams">The array of chained FindParams.</param>
            <param name="reference">The starting element for the search</param>
            <param name="ignoreTestRegionTags">Whether to ignore test region tags when doing the identification.</param>
            <param name="searchLog">The search log</param>
            <returns>The found element or null if the element is not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindElement(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.String@)">
            <summary>
            Given a FindParam and a reference, this function finds the element within the children of the element.
            according to the FindParam object.
            </summary>
            <param name="param">FindParam that describes the element to find.</param>
            <param name="reference">The starting element for the search</param>
            <param name="ignoreTestRegionTags">Whether to ignore test region tags when doing the identification.</param>
            <param name="searchLog">The search log</param>
            <returns>The found element or null if the element is not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GetContentParameters(ArtOfTest.WebAii.ObjectModel.FindParam,System.String@,System.Boolean@,System.Text.RegularExpressions.Regex@)">
            <summary>
            Helper function to get the FindParams for a content search.
            </summary>
            <param name="param">The parameter used.</param>
            <param name="value">The return value to use.</param>
            <param name="partial">The partial value to use.</param>
            <param name="regex">The regex if applicable, else null.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.HashElementTree(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            This function given an element builds a hashtable with all the element's children with the 
            key to the hash being the abs index of the element.
            </summary>
            <param name="element">The element.</param>
            <returns>The hash table.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.HashElementTreeRecursively(ArtOfTest.WebAii.ObjectModel.Element,System.Collections.Hashtable@)">
            <summary>
            Function used to build the hash table recursively.
            </summary>
            <param name="element">The element.</param>
            <param name="hash">The hash table.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindElementUsingTagNameOccurrence(ArtOfTest.WebAii.ObjectModel.Element,System.Int32,System.String)">
            <summary>
            Function finds an element using a TagName occurence.
            </summary>
            <param name="reference">The starting point of search or reference</param>
            <param name="occurrence">The occurence we are searching for</param>
            <param name="tagName">The tagName we are searching</param>
            <returns>Null if element is not found, else the element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindElementUsingContent(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.FindParam,System.Boolean,System.Text.RegularExpressions.Regex,System.String,ArtOfTest.WebAii.ObjectModel.Element@)">
            <summary>
            Function finds an element using its content.
            </summary>
            <param name="reference">The reference element to use.</param>
            <param name="param">The FindParam to use.</param>
            <param name="value">The value to use.</param>
            <param name="partial">Whether to use partial identification or not</param>
            <param name="regex">Regex to use if any is provided, else null.</param>
            <param name="foundElement">The found element or else null.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindTagNameRecursivelyUsingAttributesOnly(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element@)">
            <summary>
            Searchs tags using attributes and partial attributes only
            </summary>
            <param name="reference">Reference element.</param>
            <param name="param">FindParam to use.</param>
            <param name="foundElement">The found element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindTagNameRecursively(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.Int32,System.Int32@,ArtOfTest.WebAii.ObjectModel.Element@)">
            <summary>
            Finds a TagName recursively using its occurence
            </summary>
            <param name="reference">The reference element.</param>
            <param name="tagName">The name to search for</param>
            <param name="occurence">The occurence</param>
            <param name="currentOccurence">Current occurence</param>
            <param name="foundElement">Null or found element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.FindElementNodeIndexPath(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.Boolean,ArtOfTest.WebAii.ObjectModel.Element[]@)">
            <summary>
            Given a path and reference, tries to locate the element.
            If not, will return null with the MatchedPathElements that it got through until it wasn't able to go 
            any furthur
            </summary>
            <param name="reference">The Reference Element</param>
            <param name="path">The Path</param>
            <param name="ignoreTestRegionTags">True/False whether to ignore test region tags or not.</param>
            <param name="matchedPathElements">The matched element along the path</param>
            <returns>The element that was found or null</returns>
            <remarks>If the function returns null, you can check the MatchedPathElements to find out how far it got and where it failed</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.HasMatchingAttributes(ArtOfTest.WebAii.ObjectModel.Element,System.Collections.ObjectModel.Collection{ArtOfTest.WebAii.ObjectModel.iAttribute},System.Collections.ObjectModel.Collection{ArtOfTest.WebAii.ObjectModel.iAttribute},System.Collections.ObjectModel.Collection{ArtOfTest.WebAii.ObjectModel.iAttribute})">
            <summary>
            Determines whether a tag matches the attributes and partial attributes collections.
            </summary>
            <param name="tag">The tag to verify.</param>
            <param name="attributes">The attributes to check.</param>
            <param name="partialAttributes">The partial attributes to check.</param>
            <param name="excludedAttribute">List of attributes that must not be present.</param>
            <returns>True/False whether the attributes match or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.MatchTagName(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Tests whether or not two tags match, ignoring case.
            </summary>
            <param name="tag">The element.</param>
            <param name="tagName">The tag.</param>
            <returns>True/False depending on tags match or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.DoesMatchContent(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.FindContentType,System.Boolean,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns true/false whether a tag matches the specific content type and the expression
            </summary>
            <param name="element">The tag to check.</param>
            <param name="contentType">The content type to use.</param>
            <param name="partial">Whether to use partial find or not.</param>
            <param name="regex">The regex to use when doing regex finds. Else null.</param>
            <param name="value">The value to check against.</param>
            <returns>True/False whether the content matches or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GenericFindAllElements(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,ArtOfTest.WebAii.ObjectModel.FindParam,System.Boolean,System.Text.RegularExpressions.Regex,System.String,System.Collections.Generic.List{ArtOfTest.WebAii.ObjectModel.Element}@)">
            <summary>
            Generic find all routines
            </summary>
            <param name="reference">The reference element.</param>
            <param name="attributesOnly">Whether the find is using attributes only.</param>
            <param name="param">The FindParam.</param>
            <param name="partial">whether we are using partial find for attributes</param>
            <param name="regex">The regex to use</param>
            <param name="value">The value of content</param>
            <param name="foundElements">The list of found elements that match.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.ValidateReferenceElement(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Validate a reference used for search.
            </summary>
            <param name="reference">The element to validate.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GetXmlString(System.String,System.Xml.XmlNode)">
            <summary>
            Writes an xml node to the search log
            </summary>
            <param name="header">The header to use to wrap the text with.</param>
            <param name="node">The XmlNode to get the string for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GetNodeAsXmlString(System.Boolean,System.Xml.XmlNode)">
            <summary>
            Given an XmlNode, will write it out as a string.
            </summary>
            <param name="indent">Whether to indent the string or not.</param>
            <param name="node">The node.</param>
            <returns>The xml string representation.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GetXml(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.Boolean)">
            <summary>
            Given an element, return its valid XML representation
            </summary>
            <param name="reference">The reference element.</param>
            <param name="allChildNodes">Whether to include all child nodes of the element.</param>
            <param name="ignoreTestRegionTags">Whether to ignore the test regions or not.</param>
            <returns>The valid XMLDocument, else will throw an exception</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.ValidateIdentificationParameter(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Validates a FindParam.
            </summary>
            <param name="param">The parameter to validate.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.GetTagNameOccurrence(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Get the tag name occurence between Target and Reference
            </summary>
            <param name="Target">Target Element</param>
            <param name="Reference">Reference Element</param>
            <returns>The count of elements</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.Identification.CountTagOccurrence(ArtOfTest.WebAii.ObjectModel.Element,System.String,System.Int32)">
            <summary>
            Counts a Tag Occurence recursively from a StartTag to an Ending Tag Index
            </summary>
            <param name="StartTag">The start tag element</param>
            <param name="TagName">The tag name to count</param>
            <param name="EndTagIndex">The ending tag marker</param>
            <returns>Returns the occurence count including the StartTag (if it matches TagName)</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.TreeBuilder">
            <summary>
            This class builds the a strongly-typed 
            markup elements tree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.TreeBuilder.#ctor">
            <summary>
            Creates a new Dom tree builder.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Core.TreeBuilder.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new Dom tree builder with browser being null.
            </summary>
            <remarks>When using this constructor all Element objects will have their OwnerBrowser properties to null
            Also Element.Refresh will throw a null exception. 
            This contructor is meant to be used by the designer only.</remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.UnexpectedDialogAction">
            <summary>
            Specifies the action that the DialogMonitor should take when it encounters unexpected dialogs
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.TagMarker">
            <summary>
            Used by the Parser to identify if the current tag we are parsing is a begin
            tag or an end tag or neither (i.e. a comment)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.TagMarker.BeginTag">
            <summary>
            A begin tag
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.TagMarker.EndTag">
            <summary>
            An end tag
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.TagMarker.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.ScrollToVisibleType">
            <summary>
            Used to configure what the default scroll to visible behavior is.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScrollToVisibleType.ElementTopAtWindowTop">
            <summary>
            Scrolls the element so that top of the element is visible at the top of the window. [Default]
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScrollToVisibleType.ElementBottomAtWindowBottom">
            <summary>
            Scrolls the element so that the bottom of the element is visible at the bottom of the window
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.LocalWebServerType">
            <summary>
            Type of local web servers available for tests.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LocalWebServerType.None">
            <summary>
            No local web server is set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LocalWebServerType.AspNetDevelopmentServer">
            <summary>
            Requests are processed using ASP.NET Development Server. (aka Cassini)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LocalWebServerType.AspNetDevelopmentServer40">
            <summary>
            The .Net 4.0 version of the ASP.NET Development Server.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.BrowserType">
            <summary>
            The browser type. (i.e. firefox, internet explorer ...etc).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.NotSet">
            <summary>
            Browser type is not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.InternetExplorer">
            <summary>
            Internet explorer browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.FireFox">
            <summary>
            FireFox browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.AspNetHost">
            <summary>
            ASP.NET InProc Host that acts as a browser and request processor. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.Designer">
            <summary>
            Internally used for the UI Designer
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.Safari">
            <summary>
            Safari browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.SilverlightOutOfBrowser">
            <summary>
            SLLauncher.exe running Silverlight apps
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.Chrome">
            <summary>
            Google Chrome
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.NativeApp">
            <summary>
            Native Windows application
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserType.MicrosoftEdge">
            <summary>
            Microsoft Edge
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.BrowserExecutionType">
            <summary>
            The browser execution type. (i.e. firefox, internet explorer ...etc).
            The real browser type users can choose from.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.NotSet">
            <summary>
            Browser type is not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.InternetExplorer">
            <summary>
            Internet explorer browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.FireFox">
            <summary>
            FireFox browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.Safari">
            <summary>
            Safari browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.AspNetHost">
            <summary>
            ASP.NET InProc Host that acts as a browser and request processor. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.SilverlightOutOfBrowser">
            <summary>
            SLLauncher.exe running Silverlight apps
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.Chrome">
            <summary>
            Google Chrome
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserExecutionType.MicrosoftEdge">
            <summary>
            Microsoft Edge browser type.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.MouseWheelTurnDirection">
            <summary>
            The mouse wheel turn directions.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseWheelTurnDirection.Backward">
            <summary>
            Turn backwards.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseWheelTurnDirection.Forward">
            <summary>
            Turn forward.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.MouseClickType">
            <summary>
            The different types of mouse events to perform.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.LeftClick">
            <summary>
            A left mouse button click.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.RightClick">
            <summary>
            A right mouse button click.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.MiddleClick">
            <summary>
            A middle mouse button click.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.LeftDoubleClick">
            <summary>
            A left mouse button double-click.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.LeftDown">
            <summary>
            A single left mouse button down.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.LeftUp">
            <summary>
            A single left mouse button up.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.RightDown">
            <summary>
            A single right mouse button down.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.RightUp">
            <summary>
            A single right mouse button up.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.MiddleDown">
            <summary>
            A single middle mouse button down.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.MiddleUp">
            <summary>
            A single middle mouse button up.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.MouseClickType.Wheel">
            <summary>
            A mouse wheel move.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.ScriptEventType">
            <summary>
            Type of script events that can be invoked on an html element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnLoad">
            <summary>
            onload event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnUnload">
            <summary>
            onunload event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnChange">
            <summary>
            onchange event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnSubmit">
            <summary>
            onsubmit event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnReset">
            <summary>
            onreset event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnSelect">
            <summary>
            onselect event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnBlur">
            <summary>
            onblur event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnFocus">
            <summary>
            onblur event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnKeyDown">
            <summary>
            onkeydown event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnKeyPress">
            <summary>
            onkeypress event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnKeyUp">
            <summary>
            onkeyup event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnClick">
            <summary>
            onclick event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnDblClick">
            <summary>
            ondblclick event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnMouseDown">
            <summary>
            onmousedown event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnMouseMove">
            <summary>
            onmousemove event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnMouseOut">
            <summary>
            onmouseout event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnMouseOver">
            <summary>
            onmouseover event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnMouseUp">
            <summary>
            onmouseup event.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ScriptEventType.OnInput">
            <summary>
            oninput event.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.FindReferenceType">
            <summary>
            Defines which reference type the Find object is using.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FindReferenceType.Document">
            <summary>
            The reference element is root Dom tree element of the parent browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FindReferenceType.TestRegion">
            <summary>
            The reference element is a TestRegion
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.FindReferenceType.Element">
            <summary>
            The reference element is an generic element.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.LogType">
            <summary>
            The types of logging available in WebAii.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LogType.Information">
            <summary>
            Logs information to the testcase log.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LogType.Error">
            <summary>
            Logs information to the testcase log and fails the test.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LogType.Trace">
            <summary>
            Logs information to the testcase log and the System.Diagnostics.Trace
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.LogType.EventLog">
            <summary>
            Logs information directly to the Application event log.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.ElementSyncMethod">
            <summary>
            The different type of element-dom synchronization
            supported by the framework and the SyncManager.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementSyncMethod.OnRefresh">
            <summary>
            The element will synchronize with the latest Dom only
            when the element.Refresh(true) is explicitly called.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementSyncMethod.OnNextCommand">
            <summary>
            Will synchronize when the next command is executed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.ElementSyncMethod.Always">
            <summary>
            This element will always ensure it is in-sync with the 
            latest Dom any time any action is performed on it
            or information is retrieved from it.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.AnnotationMode">
            <summary>
            The different annotation modes
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.AnnotationMode.All">
            <summary>
            All annotations (native and custom) will be displayed 
            when annotation is enabled
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.AnnotationMode.NativeOnly">
            <summary>
            Only the native annotations will be displayed
            when annotation is enabled
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.AnnotationMode.CustomOnly">
            <summary>
            Only the custom annotations will be displayed 
            when annotation is enabled
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Core.BrowserCacheType">
            <summary>
            The different common categories of browser caching.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserCacheType.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserCacheType.TempFilesCache">
            <summary>
            Temporary internet files cached locally.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Core.BrowserCacheType.History">
            <summary>
            Browsing history for user profile.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JavascriptScripts">
            <summary>
            A class containing common JavaScript scripts as strings
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptScripts.INVOKE_EVENT_SCRIPT">
            <summary>
            A script to invoke events with JavaScript. Accepts the following string.format parameters: TargetDocument, eventObjJson, eventType, eventName, target.TagName, target.OccurrenceIndex
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JavascriptEventArgs">
            <summary>
            Provides data to the Javascript event handler
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._type">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._modifiers">
            <summary>
            The modifier keys that were active during the event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._screenX">
            <summary>
            The horizontal cursor position in screen coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._screenY">
            <summary>
            The vertical cursor position in screen coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._clientX">
            <summary>
            The horizontal cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._clientY">
            <summary>
            The vertical cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._keyCode">
            <summary>
            Unicode (or something) value of the key that was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventArgs._charCode">
            <summary>
            Unicode value of a printable character that was entered
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.CharCode">
            <summary>
            Gets the Unicode value of a printable character that was entered
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.ClientX">
            <summary>
            Gets the horizontal cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.ClientY">
            <summary>
            Gets the vertical cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.KeyCode">
            <summary>
            Gets the Unicode (or something) value of the key that was pressed
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.ModifierKeys">
            <summary>
            Gets the modifier keys that were active during the event
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.ScreenX">
            <summary>
            Gets the horizontal cursor position in screen coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.ScreenY">
            <summary>
            Gets the vertical cursor position in screen coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventArgs.Type">
            <summary>
            Gets the type of the event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JavascriptEventMessage">
            <summary>
            Contains the data associated with a Javascript event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._type">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._guid">
            <summary>
            A Guid identifying the event handler that will process this event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._modifiers">
            <summary>
            The modifier keys that were active during the event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._screenX">
            <summary>
            The horizontal cursor position in screen coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._screenY">
            <summary>
            The vertical cursor position in screen coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._clientX">
            <summary>
            The horizontal cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._clientY">
            <summary>
            The vertical cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._keyCode">
            <summary>
            The Unicode (or something) value of the key that was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.JavascriptEventMessage._charCode">
            <summary>
            The Unicode value of a printable character that was entered
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.#ctor">
            <summary>
            Default constructor; required for DataContract
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.#ctor(System.String,System.String)">
            <summary>
            Creates a new JavascriptEventMessage for an event of the specified type
            </summary>
            <param name="guid">A Guid identifying the event handler for this event</param>
            <param name="type">The event's type</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.CharCode">
            <summary>
            Gets / Sets the Unicode value of a printable character that was entered
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.ClientX">
            <summary>
            Gets / Sets the horizontal cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.ClientY">
            <summary>
            Gets / Sets the vertical cursor position in browser-relative coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.GuidString">
            <summary>
            Gets / Sets the string representation of the Guid identifying the handler for this event
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.Guid">
            <summary>
            Gets the Guid identifying the handler for this event
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.KeyCode">
            <summary>
            Gets / Sets the Unicode (or something) value of the key that was pressed
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.ModifierKeys">
            <summary>
            Gets / Sets the modifier keys that were active during the event
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.ScreenX">
            <summary>
            Gets / Sets the horizontal cursor position in screen coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.ScreenY">
            <summary>
            Gets / Sets the vertical cursor position in screen coordinates
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JavascriptEventMessage.Type">
            <summary>
            Gets / Sets the type of the event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.ScriptEvent">
            <summary>
            The WebAii representation of a Javascript event object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ScriptEvent._canBubble">
            <summary>
            Specifies whether or not this event should bubble
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ScriptEvent._cancelable">
            <summary>
            Specifies whether or not this event is cancelable
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ScriptEvent._type">
            <summary>
            The type of the event
            TODO Just use a string internally, and let the user specify with ScriptEventType for standard event types
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.ScriptEvent.#ctor">
            <summary>
            Initializes a new ScriptEvent object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.ScriptEvent.#ctor(System.String)">
            <summary>
            Creates a ScriptEvent with the given type and other properties set to default values
            </summary>
            <param name="type">The type of the event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.ScriptEvent.CanBubble">
            <summary>
            Gets / Sets whether this event can bubble
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.ScriptEvent.IsCancelable">
            <summary>
            Gets / Sets whether this event can be cancelled
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.ScriptEvent.Type">
            <summary>
            The type of this event, for standard event types.
            TODO Make it so we can define custom event types
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.CustomScriptEventBase">
            <summary>
            Base class for our clients to create custom Javascript events from.  Subclasses should implement their properties or whatever to set
            key-value pairs in the internal dictionary, the contents of which will be used to create the Javascript object passed to the event
            handler in the browser.
            TODO We probably want to change the dictionary to hold javascript objects instead of strings
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.CustomScriptEventBase.Internal">
            <summary>
            Gets / Sets the list of custom fields.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.CustomScriptEventBase.Item(System.String)">
            <summary>
            Gets / Sets the value at the specified key.
            </summary>
            <param name="key">The key to get the value of.</param>
            <returns>A value.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.ScriptUIEvent">
            <summary>
            Class representing a scriptable UI event. Used as the base class for MouseEvent and KeyEvent.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ScriptUIEvent._modifiers">
            <summary>
            A bitmask containing the modifier keys that are held down during the event
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.ScriptUIEvent.#ctor">
            <summary>
            Initializes a new ScriptUIEvent object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.ScriptUIEvent.#ctor(System.String)">
            <summary>
            Creates a UI event of the given type, with other parameters set to default values
            </summary>
            <param name="type">The type of the event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.ScriptUIEvent.ModifierKeys">
            <summary>
            Gets / Sets the modifier keys bitmask
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.MouseEvent">
            <summary>
            Class representing a scriptable mouse event that can be sent to a browser window.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseEvent._button">
            <summary>
            Which mouse button(s) was/were pressed, following the IE model:
            _button is a bit mask, where
            0x01: left mouse button
            0x02: right mouse button
            0x04: middle mouse button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseEvent._relatedTarget">
            <summary>
            A client-side locator for the related target for mouseover / mouseout / mouseenter / mouseexit events
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseEvent._screenX">
            <summary>
            The horizontal cursor position in number of pixels in from the left of the screen, for mouse events
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseEvent._screenY">
            <summary>
            The vertical position in number of pixels down from the top of the screen, for mouse events
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.MouseEvent.#ctor">
            <summary>
            Initializes a new MouseEvent object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.MouseEvent.#ctor(System.String)">
            <summary>
            Creates a mouse event of the given type, with other parameters set to default values
            </summary>
            <param name="type">The type of the event</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.MouseEvent.SetRelatedTarget(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Set the related target for this event to an element, with a locator based on the tag name / tag index
            </summary>
            <param name="e">The related target element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.MouseEvent.SetRelatedTarget(System.String)">
            <summary>
            Set the related target for this event to an HtmlControl, using the control's ClientSideLocator.
            </summary>
            <param name="locator">The related target control.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.MouseEvent.Button">
            <summary>
            Gets / Sets the mouse button of this event.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.MouseEvent.ScreenX">
            <summary>
            Gets / Sets the horizontal position of the cursor for mouse events
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.MouseEvent.ScreenY">
            <summary>
            Gets / Sets the vertical position of the cursor for mouse events
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.MouseEvent.RelatedTargetLocator">
            <summary>
            Gets / Sets the related target control
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.KeyEvent">
            <summary>
            Class representing a scriptable key event that can be sent to a browser window.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.KeyEvent._keyCode">
            <summary>
            The Unicode character code for the key this event is about
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.KeyEvent.#ctor">
            <summary>
            Initializes a new KeyEvent object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.KeyEvent.#ctor(System.String)">
            <summary>
            Initializes a new KeyEvent object.
            </summary>
            <param name="type">The type of key event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.KeyEvent.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new KeyEvent object.
            </summary>
            <param name="type">The type of key event.</param>
            <param name="key">The keycode for the key event.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.KeyEvent.KeyCode">
            <summary>
            Gets / Sets the character code for this event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.Utils">
            <summary>
            All utility methods used by Javascript classes.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.Utils.EscapeString(System.String)">
            <summary>
            Add escape characters to the Javascript input string so that it can be evaluated correctly (it is evaluated twice internally so it must be double escaped).
            </summary>
            <param name="s">The Javascript string to add escape characters to.</param>
            <returns>A new string with all backslashes, backspaces, newlines, double quotes, single quotes, carriage returns, tabs escaped properly for evaluation.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JsonObject">
            <summary>
            A dictionary containing JavaScript Object Notation (JSON) objects used in the Actions.InvokeScript function.
            </summary>
            <remarks>See http://www.json.org/ for more information.</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JsonObject.Item(System.String)">
            <summary>
            Gets / sets the JSON value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get / set</param>
            <value>A JsonBaseType at the specified index</value>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JsonObject.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor that accepts an Xmlreader which contains the information needed to construct this JSON object.
            </summary>
            <param name="reader">The XmlReader to read during construction.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JsonArray">
            <summary>
            An array of JSON objects, which can be of many types.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JsonArray.Item(System.Int32)">
            <summary>
            Gets / sets the JSON element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set. </param>
            <value>The JsonBaseType at the specified index.</value>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JsonCollection">
            <summary>
            A collection of JSON objects.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.JsonBaseType">
            <summary>
            Boxes a single JSON value which could be an array, a string, an int, a double, or a bool.
            </summary>
            <remarks>See http://www.json.org/ for more information.</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JsonBaseType.InternalValue">
            <summary>
            Gets / sets the value of this JSON object.
            </summary>
            <value>A generic <see cref="T:System.Object"/></value>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JsonBaseType.Item(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="key">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Javascript.JsonBaseType.Item(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JsonBaseType.op_Implicit(ArtOfTest.WebAii.Javascript.JsonBaseType)~System.Int32">
            <summary>
            Implicitly converts this JSON object to an int.
            </summary>
            <param name="type">The JSON object to convert.</param>
            <returns>The int value contained in the JSON object.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the JSON object does not contain an int.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JsonBaseType.op_Implicit(ArtOfTest.WebAii.Javascript.JsonBaseType)~System.Double">
            <summary>
            Implicitly converts this JSON object to a double.
            </summary>
            <param name="type">The JSON object to convert.</param>
            <returns>The double value contained in the JSON object.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the JSON object does not contain a double.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JsonBaseType.op_Implicit(ArtOfTest.WebAii.Javascript.JsonBaseType)~System.Boolean">
            <summary>
            Implicitly converts this JSON object to a bool.
            </summary>
            <param name="type">The JSON object to convert.</param>
            <returns>The bool value contained in the JSON object.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the JSON object does not contain a bool.</exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Javascript.JsonBaseType.op_Implicit(ArtOfTest.WebAii.Javascript.JsonBaseType)~System.String">
            <summary>
            Implicitly converts this JSON object to a string.
            </summary>
            <param name="type">The JSON object to convert.</param>
            <returns>The string value contained in the JSON object.</returns>
            <exception cref="T:System.InvalidCastException">Thrown when the JSON object does not contain a string.</exception>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.MouseButton">
            <summary>
            Mouse buttons used by Javascript mouse events. This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseButton.None">
            <summary>
            No mouse button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseButton.Left">
            <summary>
            The left mouse button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseButton.Right">
            <summary>
            The right mouse button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.MouseButton.Middle">
            <summary>
            The middle mouse button
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Javascript.ModifierKeys">
            <summary>
            Specifies the set of modifier keys. This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.None">
            <summary>
            No modifier keys were pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.Alt">
            <summary>
            An Alt key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.Control">
            <summary>
            The Ctrl key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.Shift">
            <summary>
            A shift key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.Meta">
            <summary>
            The meta key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.LeftAlt">
            <summary>
            The left alt key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.LeftControl">
            <summary>
            The left ctrl key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.LeftShift">
            <summary>
            The left shift key was pressed
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Javascript.ModifierKeys.LeftMeta">
            <summary>
            The left meta key was pressed
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.CloseWebDriver">
            <summary>
            Close the WebDriver
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.FindFreePort">
            <summary>
            Finds a random, free port to be listened on.
            </summary>
            <returns>A random, free port to be listened on.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.GetElement(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Get element by TagName and index
            </summary>
            <param name="cmd">BrowserCommand contains the info for the searched element</param>
            <returns>EdgeElement</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.CookieFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a Dictionary to a Cookie.
            </summary>
            <param name="rawCookie">The Dictionary object containing the cookie parameters.</param>
            <returns>A Cookie object with the proper parameters set.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessInformationCommands(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Process Information Requests commands
            </summary>
            <param name="request">The request</param>
            <returns>The command response</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessActionCommands(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Processes command requests.
            </summary>
            <param name="request">The request</param>
            <returns>Response</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessNavigateTo(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Navigate to url 
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessClick(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Click on element
            </summary>
            <remarks>
            If the click causes a new page to load, this 
            method will attempt to block until the page is loaded.
            </remarks>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessCheck(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Check checkbox/radio button command 
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessSelectDropDown(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Preccess the selection of an item from an HTML select dropdown.
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessScrollToVisible(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Scroll an element to a visible position at the top/bottom of the browser window
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessScrollBy(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Scroll the browser window using coordinates
            </summary>
            <param name="command">Command which contains the scrolling coordinates</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessSetText(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Set text to element
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessInvokeJSFunction(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.Boolean)">
            <summary>
            Process the InvokeFunction command
            </summary>
            <param name="functionCall">JavaScript code to execute.</param>
            <param name="returnJson">Whether to return a JSON string.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.SetErrorResponse(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,ArtOfTest.WebAii.BrowserSpecialized.MicrosoftEdge.Response)">
            <summary>
            Set the response error state and if possible provides an error message
            </summary>
            <param name="command">Current browser command</param>
            <param name="response">The Edge response</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessInvokeEvent(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Process the InvokeEvent Action command
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessSetCookie(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Process the SetCookie Action command
            </summary>
            <param name="command">Command to process</param>
            <returns>String of bool result</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessClearCookies(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Process the ClearCookies Action command
            </summary>
            <param name="command">Command to process</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ClearSingleCookie(System.String)">
            <summary>
            Clear a single cookie
            </summary>
            <param name="cookieName">The name of the cookie to clear</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.WebDriverCommandProcessor.ProcessSwitchTab(ArtOfTest.WebAii.Messaging.Process.BrowserCommand)">
            <summary>
            Switch active tab
            </summary>
            <param name="command">Command to process.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams">
            <summary>
            ClientConnectedEventArgs
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._clientId">
            <summary>
            client id that connected
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._type">
            <summary>
            The browser type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._version">
            <summary>
            The browser version
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._hwnd">
            <summary>
            The hwnd of the browser that connected
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._isUILess">
            <summary>
            Whether client is UIless or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._isDialog">
            <summary>
            Whether the client is a browser dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._pageTitle">
            <summary>
            The title of the page, to help us find the HWND
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams._appLocation">
            <summary>
            Application location for desktop connected apps
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.#ctor(System.String,ArtOfTest.WebAii.Core.BrowserType,System.String,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Create a new ClientConnectedEventArgs.
            </summary>
            <param name="clientID">The client id that connected.</param>
            <param name="type">The browser type that connected.</param>
            <param name="version">The browser version that connected.</param>
            <param name="hwnd">The browser hwnd that connected.</param>
            <param name="isUILess">Whether this client is a UILess or not.</param>
            <param name="isDialog">Whether the client is a dialog. Used for IE's modal/modeless dialogs.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.IsDialog">
            <summary>
            Whether the client is a dialog
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.IsUILess">
            <summary>
            Whether this client is UI less.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.IntHwnd">
            <summary>
            Gets / Sets the window handle as an int.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.Hwnd">
            <summary>
            Get the hwnd of the browser or application window for this client as an IntPtr.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.ClientId">
            <summary>
            Gets the client unique id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.BrowserType">
            <summary>
            Gets the browser type of this client.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.Version">
            <summary>
            Gets the browser version of this client.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ClientConnectParams.Pid">
            <summary>
            The process id number of the client application
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.ReportNewWindowCommand">
            <summary>
            This command is used to report the creation of a new WPF window from the WPF extension to the Manager
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner">
            <summary>
            Object used by the manager to provision browser processes for connecting
            to the Manager
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.PROVISIONING_SERVICE_NAMEPIPE">
            <summary>
            The name of the provisioning pipe
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner._provisioningThread">
            <summary>
            Provisioning thread
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner._running">
            <summary>
            Flag whether the provising thead should continue or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner._manager">
            <summary>
            The manager owner
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner._waitForProvisionerPipe">
            <summary>
            Signals when the provisioning pipe is created.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner._computedPipeName">
            <summary>
            The actual provisioning pipe name created.
            Used to set the RemoteUrl environment variable.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.#ctor(ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create the provisioner
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.StartService">
            <summary>
            Start the provisioning service
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.EndService">
            <summary>
            End the provisining service
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.ServiceThread">
            <summary>
            The provisioning service thread.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserProvisioner.ProvisionBrowser(System.IO.Pipes.PipeStream)">
            <summary>
            Provision a browser to be connected to the
            Manager for automation.
            </summary>
            <param name="pipe">The open pipe with the client.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient">
            <summary>
            Use the IBrowserRemotedClient interface to define the connection to the remote client of a browser.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.BrowserRequest">
            <summary>
            Event handler for browser requests.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.ClientId">
            <summary>
            Gets the client ID.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.Settings">
            <summary>
            Gets the active Settings object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.IsConnected">
            <summary>
            Gets whether or not the remote browser is connected.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.DoProvision">
            <summary>
            Provisions the remote browser client for communication with the manager.
            </summary>
            <returns>True/False whether the client is provisioned.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.Disconnect">
            <summary>
            Disconnects the remote browser client from the manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.LogMessage(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Logs a message to the tests logger.
            </summary>
            <param name="type">The type of message to log.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.DispatchJavascriptEvent(ArtOfTest.WebAii.Javascript.JavascriptEventMessage)">
            <summary>
            Dispatch a JavaScript event to the framework.
            </summary>
            <param name="eventMessage"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.Connect(ArtOfTest.WebAii.Core.BrowserType,System.String,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Connects the remote browser to the Manager.
            </summary>
            <param name="type">The browser type to connect.</param>
            <param name="version">The version of the browser.</param>
            <param name="hwnd">The native Win32 handle of the browser.</param>
            <param name="isUILess">Whether or not to make a UI-less connection.</param>
            <param name="isDialog">Whether or not the remote browser client is a dialog.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.IBrowserRemotedClient.ProcessResponse(ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs)">
            <summary>
            Called by the remote browser client to process a response to a browser request.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.PipeCommand`1">
            <summary>
            A generic class to define custom commands.
            </summary>
            <typeparam name="T">The command type.</typeparam>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommand`1.#ctor(`0)">
            <summary>
            Initializes a new PipeCommand object.
            </summary>
            <param name="command">The command to initialize it with.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.PipeCommand`1.Command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.LogMessageCommand">
            <summary>
            A log message command.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.LogMessageCommand.#ctor(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Constructs a new LogMessageCommand object.
            </summary>
            <param name="logType">The log type for this message (information, error, trace, eventlog)</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.LogMessageCommand.LogType">
            <summary>
            Gets / Sets the message log type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.LogMessageCommand.Message">
            <summary>
            Gets / Sets the message to be logged.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.CustomAssemblyInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.CustomAssemblyInfo.#ctor(System.String,System.IO.MemoryStream)">
            <summary>
            For internal use only.
            </summary>
            <param name="name"></param>
            <param name="assem"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.CustomAssemblyInfo.AssemblyName">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.CustomAssemblyInfo.Data">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.JavaScriptEventCommand">
            <summary>
            A class to handle Javascript event commands.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.JavaScriptEventCommand.#ctor(ArtOfTest.WebAii.Javascript.JavascriptEventMessage)">
            <summary>
            Initializes a new JavaScriptEventCommand object.
            </summary>
            <param name="cmd">The command to initialize it with.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.PipeCommand">
            <summary>
            All command sent over NamedPipes should inherit from this base class
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommand.ToBinary">
            <summary>
            Serialize this object to a byte array.
            </summary>
            <returns>This PipeCommand as a byte array suitable for sending over a pipe connection.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommand.FromBinary``1(System.Byte[])">
            <summary>
            Deserialize a command to a strongly typed object T
            </summary>
            <typeparam name="T">The type of the command</typeparam>
            <param name="bytes">The binary that contains the deserialize command.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.PipeCommunication">
            <summary>
            Static methods used for NamedPipe communications.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.PipeCommunication.CommandPipeName">
            <summary>
            The command pipe name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.PipeCommunication.AsyncPipeName">
            <summary>
            The async pipe name.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommunication.WriteCommandToPipe(ArtOfTest.WebAii.Messaging.Process.PipeCommand,System.IO.Pipes.PipeStream,System.Boolean)">
            <summary>
            Write a command to a specific named pipe.
            </summary>
            <param name="command">The command</param>
            <param name="pipe">The pipe to use</param>
            <param name="waitForDrain">Whether to wait for the pipe to be drained.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommunication.ReadCommandFromPipe``1(System.IO.Pipes.PipeStream)">
            <summary>
            Reads a command from the pipe stream as a command object.
            </summary>
            <typeparam name="T">The type of the command</typeparam>
            <param name="pipe">The pipe to use.</param>
            <returns>The command</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.PipeCommunication.SyncPipeRead(System.IO.Pipes.PipeStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Synchronous pipe read. 
            </summary>        
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor">
            <summary>
            Describes a simple property to set or get in addition to its value and type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor._name">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor._value">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor._propertyType">
            <summary>
            Property type
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.#ctor(System.String,System.Object)">
            <summary>
            Create a new property descriptor
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Create a new property descriptor
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="type">The property type.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.PropertyType">
            <summary>
            Gets property type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.Value">
            <summary>
            Gets the value of this property
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.Name">
            <summary>
            Get the name of this property
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.Serialize">
            <summary>
            Serializes this descriptor to a JSON string.
            </summary>
            <returns>The string representation of this property</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.SimplePropertyDescriptor.ConvertValueType(System.String,System.Type)">
            <summary>
            Converts a value to the desired type.
            </summary>
            <param name="value">The value.</param>
            <param name="desiredType">The desired type.</param>
            <returns>The converted value as the desired type.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient">
            <summary>
            This class represents a client that the browser will create
            to talk to the automation infrastructure and respond to its requests.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.BrowserRequest">
            <summary>
            Occurs when a browser request is issued.
            Browser clients subscribe to this event and execute the command in 
            their respective browser. Once the requested command is complete, the
            client should call the ProcessResponse() method. 
            </summary>
            <remarks>Event handlers should block until the command is proceed. They should 
            not return immediately. Otherwise we will deadlock.</remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._commandPipe">
            <summary>
            Pipe used for communicating browser commands with this client.
            This is pipe executes commands sync.ly. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._asyncPipe">
            <summary>
            Pipe used for async communication from the client
            back to the server. JavaScript logging/JavaScript event syncing
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._clientID">
            <summary>
            The client current ID if connected
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._serverInstanceId">
            <summary>
            The server instance id 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._settings">
            <summary>
            The settings object used by the testcase
            This object is passed to the client during the
            initial client hand-shaking.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._isProcessing">
            <summary>
            Whether we are processing commands from the server.
            Setting this to false will kill the processing thread.
            This flag is typically set to false when the client is shutting down.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient._listenerThread">
            <summary>
            The listener thread.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.#ctor">
            <summary>
            Create a new BrowserRemoteClient object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.DoProvision">
            <summary>
            Will attempt to provision this client, else will return
            false.
            </summary>
            <returns>True/False whether the client is provisioned.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.Disconnect">
            <summary>
            Disconnect this client from Manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.ProcessResponse(ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs)">
            <summary>
            Process a response to the Manager.
            </summary>
            <param name="e">The response.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.Connect(ArtOfTest.WebAii.Core.BrowserType,System.String,System.IntPtr,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Connect this client to the Manager.
            </summary>
            <param name="type">The type of the browser being connected.</param>
            <param name="version">The version of the browser being connected.</param>
            <param name="hwnd">The hwnd of the browser window being connected.</param>
            <param name="isUILess">Whether this client is UI less or not.</param>
            <param name="isDialog">Whether the browser client is a dialog (Used for IE modal/modeless dialogs).</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.DispatchJavascriptEvent(ArtOfTest.WebAii.Javascript.JavascriptEventMessage)">
            <summary>
            Dispatches a Javascript event to WebAii
            </summary>
            <param name="eventMessage">Message containing information about the event</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.LogMessage(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Log a message to the centralized logging location.
            </summary>
            <param name="type">The log type to use.</param>
            <param name="message">The message</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.ProcessBrowserRequest(System.Object,ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs)">
            <summary>
            This is called from the listener thread when a command is available 
            for processing.
            </summary>
            <param name="sender">sender</param>
            <param name="e">event args</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.CreateNamedPipes">
            <summary>
            Create the Named Piped for this client.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.CreateListener">
            <summary>
            Create the listener thread.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.ListenThreadEntry(System.Object)">
            <summary>
            <![CDATA[The command listener & processor]]>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.Settings">
            <summary>
            Get the testcase execution settings as pushed by the
            server.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.ClientId">
            <summary>
            Gets this client's unique id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoteClient.IsConnected">
            <summary>
            Gets whether this client is connected or not to the Manager.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted">
            <summary>
            This object is the remoted object used to communicate with the browser process
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._commandServerPipe">
            <summary>
            The command server pipe that all clients connect to.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._asyncServerPipe">
            <summary>
            The async pipe that all clients connect to.
            Currently used for: 1) Logging from the client 2) Invoking JavaScript events
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._isListening">
            <summary>
            Whether the async pipe is listening to commands from the client
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._asyncListenerThread">
            <summary>
            The async thread that listens on the async pipe.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._manager">
            <summary>
            Owner manager
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._serverInstanceId">
            <summary>
            A unique instance Id for this remoted server
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted._clientParams">
            <summary>
            The browser client id
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.#ctor(ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create a new remoted object.
            </summary>
            <param name="manager">The manager object that owns this remoted server.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.InstanceId">
            <summary>
            Gets this instance's id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.IsConnected">
            <summary>
            Gets whether pipe is connected.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.Manager">
            <summary>
            The owner manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.CreateNamedPipes">
            <summary>
            Create the Named Piped for this client.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.AsyncListenerThreadEntry">
            <summary>
            Async pipe listener
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.LogMessage(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Logs a message to the central log controlled by the Manager.
            </summary>
            <param name="type">The type of the log.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.DispatchJavascriptEvent(ArtOfTest.WebAii.Javascript.JavascriptEventMessage)">
            <summary>
            Dispatches a Javascript event to the handler that is listening for it
            </summary>
            <param name="message">Information about the Javascript event to dispatch</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.Start">
            <summary>
            Start this remote object and intialize its remote channels and make it available to remote processes
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.End(System.Int32)">
            <summary>
            Close and clean up this remoted communication.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.HandshakeAndConnect">
            <summary>
            HandshakeAndConnect this client.
            </summary>
            <returns>The client connection parameters.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserRemoted.ProcessBrowserRequest(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.String)">
            <summary>
            Process a browser request.
            </summary>
            <param name="command">The command to process.</param>
            <param name="requestId">The request id.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage">
            <summary>
            Class represents an identification of an element within a document.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage._tagName">
            <summary>
            The tag name of the element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage._occurrence">
            <summary>
            The occurence index of this tag name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage._xamlElementName">
            <summary>
            Xaml Element name to access if _targetType = SilverLight
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.#ctor(System.String,System.Int32)">
            <summary>
            Create a new ElementIdMessage to identify a specific element
            </summary>
            <param name="tagName">The tag name.</param>
            <param name="occurrenceIndex">The occurence index of this tag name.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.XamlElementName">
            <summary>
            Gets/Sets the xaml Element name when TargetType=Silverlight
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.TagName">
            <summary>
            Gets the tag name of the element we are targeting.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.OccurrenceIndex">
            <summary>
            Gets the tag occurrence index of the element we are targeting. Zero based index.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.ToString">
            <summary>
            String representation of an ElementIdMessage
            </summary>
            <returns>String representation of this ElementIdMessage.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.ElementIdMessage.Create(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Translate the Element into a ElementIdMessage that the browser can interpret.
            </summary>
            <param name="element">The Element.</param>
            <returns>The ElementIdMessage that represents this element</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserCommand">
            <summary>
            Represents a command that we will pass back and forth between the browser and client to perform 
            actions and return information from the browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._type">
            <summary>
            The command general type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._infoType">
            <summary>
            If Information command type, define the sub type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._actionType">
            <summary>
            The action type of the command.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._response">
            <summary>
            The respone, if the command contains a response from the browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._data">
            <summary>
            General data used when requesting an action or information
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._target">
            <summary>
            Identify the target element for this command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._inError">
            <summary>
            Whether the command contains an error state that occurred.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._clientId">
            <summary>
            The client that owns this request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._hasFrames">
            <summary>
            Whether the document has frames or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._framesInfo">
            <summary>
            The string names if HasFrames=true;
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._targetFrameIndex">
            <summary>
            Execute the command against a target frame.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._targetFrameId">
            <summary>
            Guid of target frame. Chrome and Safari don't guarantee stable frame indexes.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._ieDialog">
            <summary>
            This is an IE only property
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._blob">
            <summary>
            Contains binary data
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._requestId">
            <summary>
            Nonce uniquely identifying this command instance
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommand._cookies">
            <summary>
            Used when getting the cookies in IE and MS Edge.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.#ctor">
            <summary>
            Empty constructor required for serialization
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.#ctor(ArtOfTest.WebAii.Messaging.Process.BrowserCommandType,ArtOfTest.WebAii.Messaging.Process.BrowserInformationType,ArtOfTest.WebAii.Messaging.Process.BrowserActionType,System.String,ArtOfTest.WebAii.Messaging.Process.ElementIdMessage)">
            <summary>
            Create a new BrowserCommand object.
            </summary>
            <param name="type">The type of the command (Action or Information).</param>
            <param name="information">If Information, the type of information you are asking for.</param>
            <param name="action">If Action, the type of action you are asking for.</param>
            <param name="data">Data associated with the Request (mostly).</param>
            <param name="target">The target element for this command.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.IsDialog">
            <summary>
            Gets/Sets whether this command is coming from a Modal dialog.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.TargetFrameIndex">
            <summary>
            The target frame index to execute the command
            against. Else -1, the command will be executed against
            the main browser window document.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.TargetFrameId">
            <summary>
            Unique identifier of the target frame. Internal use only.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.HasFrames">
            <summary>
            Whether the current document has frames or not.
            This value is set when the Info.DocumentMarkup
            command is executed.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.CommandType">
            <summary>
            Gets/Sets the Command type for this command.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.InformationType">
            <summary>
            Gets/Sets the type of information the command is requesting.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.ActionType">
            <summary>
            Gets/Sets the type of action the command is requesting.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Data">
            <summary>
            Gets/Sets any additional data needed to help process the command. (i.e. Text for SetText)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Blob">
            <summary>
            Gets / Sets binary data for the command
            </summary>
            <remarks>Not DataMember because we don't use it for Silverlight</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Response">
            <summary>
            Gets/Sets the response of the command from the browser.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Target">
            <summary>
            Gets/Sets the target element for this command.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.FramesInfo">
            <summary>
            Gets/Sets the frames information of any sub frames
            if HasFrames is true.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.InError">
            <summary>
            Gets/Sets the state of error for this command.
            If InError is true, Response string contains the error message.
            Otherwise, Response contains the expected response.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.ClientId">
            <summary>
            Gets/Sets the id of the client that this command originated from.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.RequestId">
            <summary>
            Gets or sets the unique identifier of this command
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Cookies">
            <summary>
            Used when getting the cookies in MS Edge.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.Create(ArtOfTest.WebAii.ObjectModel.Element,ArtOfTest.WebAii.Messaging.Process.BrowserCommandType)">
            <summary>
            Create an empty command to be used.
            </summary>
            <param name="targetElement">The target element for this command.</param>
            <param name="type">The type of the command.</param>
            <returns>An initialized BrowserCommand object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Process.BrowserCommand.ToString">
            <summary>
            String representation of a BrowserCommand.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType">
            <summary>
            Type of command category to be requested by the browser 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType.NotSet">
            <summary>
            Command type not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType.Information">
            <summary>
            Command type is to gather information from the browser but not execution any action.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType.Action">
            <summary>
            Command type is to execute an action like clicking a button or setting some text.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType.Silverlight">
            <summary>
            This is a Silverlight command
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserCommandType.Channel">
            <summary>
            This is a command for the communication channel
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserActionType">
            <summary>
            Defines the supported sub types of the BrowserCommandType.Action
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.NotSet">
            <summary>
            Type not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.Click">
            <summary>
            Invoke a click from within the browser Dom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.SetText">
            <summary>
            Set the text from within the browser Dom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.SelectDropDown">
            <summary>
            Select an item in a drop down list from within the browser Dom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.Check">
            <summary>
            Check (a checkbox/radio buttong) from within the browser Dom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.ScrollToVisible">
            <summary>
            Scroll the browser until an item is visible.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.NavigateTo">
            <summary>
            Navigate the browser to a specific url.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.InvokeEvent">
            <summary>
            Invoke a script event on an element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.InvokeJsFunction">
            <summary>
            Invoke a script function.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.Refresh">
            <summary>
            Cause a reload for the loaded document.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.GoBack">
            <summary>
            Causes the browser to go back.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.GoForward">
            <summary>
            Causes the browser to go forward.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.LoadString">
            <summary>
            Load a string into the browser document.
            Supported only for IE.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.GetProperty">
            <summary>
            Get a property
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.SetProperty">
            <summary>
            Set a property
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.InvokeMethod">
            <summary>
            Invoke a method
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.SetCookie">
            <summary>
            Set a cookie
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.IEConnectDialog">
            <summary>
            IE (Only) connect a modal/modeless dialog to manager.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.ScrollBy">
            <summary>
            Control the horizonal/vertical browser/frame scroll bars.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.Stop">
            <summary>
            Stop the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.ClearHistory">
            <summary>
            Clear the browser history
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.ClearFilesCache">
            <summary>
            Clear the browser file cache
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.FFSetProxy">
            <summary>
            Set the proxy inside Firefox
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.ClearCookies">
            <summary>
            Clear the browser cookies
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.InvokeJsFunctionReturnJSON">
            <summary>
            Invoke a Javascript function and get a JSON-encoded return value
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.AttachEventHandler">
            <summary>
            Attach a .NET event handler to a Javascript event on an HTML control
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.RemoveEventHandler">
            <summary>
            Detach a .NET event handler from a Javascript event on an HTML control
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.EnableMimeFilter">
            <summary>
            Start the MIME filter (IE only)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.DisableMimeFilter">
            <summary>
            Stop the MIME filter (IE only)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.AddCustomSilverlightAssembly">
            <summary>
            Add a custom Silverlight assembly to be injected into incoming Silverlight apps
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.CloseWindow">
            <summary>
            Closes a browser window or tab
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.GetFramePadding">
            <summary>
            Get the paddding offset of a frame using jquery
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserActionType.SwitchTab">
            <summary>
            When we have a new tab openned switch to it
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType">
            <summary>
            Defines the supported sub types of BrowserCommandType.Information
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.NotSet">
            <summary>
            Type not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.ElementRectangle">
            <summary>
            Return the rectangle information for a specific element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.FrameRectangle">
            <summary>
            Returns the rectangle of a frame.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.DocumentMarkup">
            <summary>
            Returns the current loaded document markup.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.IsReady">
            <summary>
            Returns whether the browser document is ready or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.Cookies">
            <summary>
            Returns the list of cookies
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.ComputedStyle">
            <summary>
            Get the computed style
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.FFCachePath">
            <summary>
            Firefox cache file path
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.FFProfilePath">
            <summary>
            Firefox user profile path
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Process.BrowserInformationType.InformationBar">
            <summary>
            The information bar
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Process.EdgeTimeoutType">
            <summary>
            Defines the timeout types supported in MicrosoftEdge 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpTrafficEvent.CalculateTotalHttpTime(System.Collections.Generic.IEnumerable{ArtOfTest.WebAii.Messaging.Http.HttpTrafficEvent},System.DateTime,System.DateTime)">
            <summary>
            For a given step, calculate the amount of time where a webserver was actively working on a response
            </summary>
            <param name="trafficData"></param>
            <param name="stepStart"></param>
            <param name="stepEnd"></param>
            <param name="allowTrafficStartingBeforeStep"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.Interfaces.IWcfHttpRequestResult">
            <summary>
            Indicates a class contains data from a REST call response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.WcfHttpRawRequestResponse.StatusText">
            <summary>
            Indicates result of call
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.WcfHttpRawRequestResponse.Exception">
            <summary>
            Contains exception thrown during call; empty otherwise
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.WcfHttpRawRequestResponse.Result">
            <summary>
            The result of the REST call
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager">
            <summary>
            Class used to manage the HTTP proxy agent.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._manager">
            <summary>
            The owning Manager object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._listenAddress">
            <summary>
            The local IP address to listen for client connections on
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._listenPort">
            <summary>
            The port to listen for client connections on
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._running">
            <summary>
            Whether the proxy is running or not
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._controlPipe">
            <summary>
            The pipe used to send messages to the proxy process
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._eventPipe">
            <summary>
            The pipe used to receive messages from the proxy process
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._proxyProcess">
            <summary>
            The HTTP proxy process
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._beforeRequestListeners">
            <summary>
            Collection of event listeners subscribed to the proxy's BeforeRequest events
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._beforeResponseListeners">
            <summary>
            Collection of event listeners subscribed to the proxy's BeforeResponse events
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._eventHandlerInstallAcked">
            <summary>
            Signal used to synchronize with the proxy process during event handler installation
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager._eventHandlerInstallLock">
            <summary>
            Synchronization object for event handler installation
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.#ctor(ArtOfTest.WebAii.Core.Manager,System.Int32)">
            <summary>
            Creates a new HttpProxyManager that listens for connections on the given port number and any local address
            </summary>
            <param name="manager">The owning Manager object</param>
            <param name="port">The port to listen on</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.#ctor(ArtOfTest.WebAii.Core.Manager,System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new HttpProxyManager that listens for connections on the given address and port
            </summary>
            <param name="manager">The owning Manager object</param>
            <param name="address">The local address to listen on</param>
            <param name="port">The port to listen on</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.AddBeforeRequestListener(ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo)">
            <summary>
            Adds an event handler to the proxy's BeforeRequest event.  The handler will be called when an HTTP request has been received
            from the web browser, but before it has been sent to the downstream server.
            </summary>
            <param name="info">ListenerInfo object describing the subscription</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.AddBeforeResponseListener(ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo)">
            <summary>
            Subscribes an event handler to the proxy's BeforeResponse event.  The handler will be called when an HTTP response has been received
            from a server, but before it has been sent to the web browser.
            </summary>
            <param name="info">ListenerInfo object describing the subscription</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.RemoveBeforeResponseListener(ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo)">
            <summary>
            Unsubscribes an event handler from the proxy's BeforeResponse event
            </summary>
            <param name="info">A ListenerInfo object describing the event handler.  Use the same ListenerInfo object that was used to subscribe
                               to the event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.RemoveBeforeRequestListener(ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo)">
            <summary>
            Removes an event handler from the collection of handlers subscribed to the proxy's BeforeRequest event
            </summary>
            <param name="info">ListenerInfo object describing the event handler.  Use the same ListenerInfo object that was used to subscribe
                               to the event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.Start(System.Boolean)">
            <summary>
            Starts the proxy listening for client connections
            <param name="silverlightInjection">Whether or not we should use the proxy to inject our SL extension</param>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.Stop">
            <summary>
            Stops the proxy from doing its thing.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.StartProfiling">
            <summary>
            Tell the proxy to start recording http traffic
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.StopProfiling">
            <summary>
            Tell the proxy to stop profiling
            </summary>
            <returns>And return a list of http traffic</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.EventListenerThread(System.Object)">
            <summary>
            Listens for events from the proxy coming over the event pipe and fires them to WebAii-side subscribers
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpProxyManager.IsRunning">
            <summary>
            Gets whether or not the proxy is running.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpResponse">
            <summary>
            Class wrapper of an HTTP response.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse.IdCounter">
            <summary>
            Used to generate ID numbers for responses, for debugging purposes
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._id">
            <summary>
            ID number of the response, to aid debugging
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._requestMethod">
            <summary>
            The HTTP method of the request that caused this response
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._httpVersionString">
            <summary>
            HTTP version string from the server
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._request">
            <summary>
            The request object that caused this response
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._statusCode">
            <summary>
            The HTTP status code received from the server
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._statusString">
            <summary>
            The HTTP status string from the server
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._headers">
            <summary>
            Stores the HTTP headers for this response
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._content">
            <summary>
            Stores the content of this response
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpResponse._guid">
            <summary>
            Unique identifier for this response
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.#ctor(System.Byte[],ArtOfTest.WebAii.Messaging.Http.HttpRequest)">
            <summary>
            Create a HTTP response object from a byte buffer containing the network data of the response
            </summary>
            <param name="buffer">The data received over the network that contains the HTTP response</param>
            <param name="request">The request that caused the response</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.#ctor(System.Int32,ArtOfTest.WebAii.Messaging.Http.HttpRequest)">
            <summary>
            Create a response object containing an error message
            </summary>
            <param name="errorCode">The HTTP status code of the error</param>
            <param name="request">The request that caused the error</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.#ctor(ArtOfTest.WebAii.Messaging.Http.HttpResponse)">
            <summary>
            Copy constructor
            </summary>
            <param name="toCopy">The HttpResponse object to create a new copy of</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.#ctor">
            <summary>
            Internal use only. Required for serialization.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.BuildResponseForErrorCode(System.Int32)">
            <summary>
            Populates this response object based on an HTTP status code
            </summary>
            <param name="errorCode">The status code</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.CleanUpConnectionOptions">
            <summary>
            Strips out any headers matching the tokens listed in the Connection header, and removes all tokens from the Connection header.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Initialize(System.Boolean)">
            <summary>
            Populates the response object based on the buffer passed to the constructor
            </summary>
            <param name="connectionClosed"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ToByteArray">
            <summary>
            Serializes this response object to a byte array that can be sent to the browser by the proxy
            </summary>
            <returns>This response in a byte array.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.AddHeader(System.String,System.String)">
            <summary>
            Adds a new header to this response's headers.  If there is already a header by the same name, the value specified in thie call is added
            to the list of values for the header.
            </summary>
            <param name="name">The header's name</param>
            <param name="value">The value for the header</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.AppendHeader(System.String,System.String)">
            <summary>
            Adds a new header to this response's headers.  If there is already a header by the same name, the value specified in thie call is added
            to the list of values for the header.
            </summary>
            <param name="name">The header's name</param>
            <param name="value">The value for the header</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Clear">
            <summary>
            Clears all headers and content output from the current response
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ClearContent">
            <summary>
            Clears the content buffer for the current response
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ClearHeaders">
            <summary>
            Clears all headers from the current response
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ToString(System.Boolean)">
            <summary>
            Converts this HttpResponse to a string representation.
            </summary>
            <param name="printHeaders">Whether or not to include the HTTP headers in the converted string.</param>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ToString">
            <summary>
            Gets the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Content">
            <summary>
            Gets or sets the message body.  To remove the body from a message, set Content to null.
            </summary>
            <remarks>
            <para>Sets the Content-Length header field to the length of the new message body.</para>
            <para>Removes any existing Transfer-Encoding header.  If you want to add a message body that is transfer-encoded, you must set the
            transfer coding for the body after assigning to the message's Content property.</para>
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Guid">
            <summary>
            Gets the unique identifier for this request object
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.HttpVersion">
            <summary>
            Gets the HTTP version string the server used for this response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.ID">
            <summary>
            Gets the ID number of this response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.IsImage">
            <summary>
            Gets whether this response contains an image (according to its content-type header)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.IsXml">
            <summary>
            Gets whether this response contains an XML document (according to its content-type header)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.MimeType">
            <summary>
            Gets an array containing all the values specified as MIME types for the content of this response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Request">
            <summary>
            Gets the request object that caused this response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Headers">
            <summary>
            Gets / Sets the response headers
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.StatusCode">
            <summary>
            Gets / Sets the HTTP status code for this response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.StatusDescription">
            <summary>
            Gets / Sets the status description string (e.g. "OK", "Not Found") for this response.
            Note: Legacy content could include the preceding status code (e.g. "200 OK", "404 Not Found").
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.FiddlerId">
            <summary>
            Fiddler sequence number for this response. We can use it to associate requests with their responses
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponse.Timestamp">
            <summary>
            The time at which this response was received from the server
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpRequest">
            <summary>
            Used to create and manipulate an HTTP request.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest.IdCounter">
            <summary>
            Used to generate ID numbers for requests, which are used to aid with debugging
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._method">
            <summary>
            HTTP method of the request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._requestUri">
            <summary>
            URI of the request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._httpVersionString">
            <summary>
            HTTP version string of the request, passed to us by the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._headers">
            <summary>
            The request's headers
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._content">
            <summary>
            The request's content, if any
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.HttpRequest._response">
            <summary>
            Usually null.  This may hold an error response from the proxy.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.#ctor(System.Byte[])">
            <summary>
            Create a new HttpRequest object from the given network data
            </summary>
            <param name="buffer">A buffer containing the network data that will be parsed to generate an HttpRequest object</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.#ctor">
            <summary>
            Creates an empty HttpRequest object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.CleanUpConnectionOptions">
            <summary>
            Strips out any headers matching the tokens listed in the Connection header, and removes all tokens from the Connection header except
            for 'close'.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Initialize">
            <summary>
            Initializes this HttpRequest object from the network data passed to its constructor
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.ToByteArray">
            <summary>Rebuilds the HTTP query</summary>
            <returns>A byte array representing the rebuilt HTTP query string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.GetBodyTextEncoding">
            <summary>
            Returns the TextEncoding used to encode the body to bytes.
            </summary>
            <returns>Encoding declared by Content-Type's charset, or default of UTF8</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.ToString(System.Boolean)">
            <summary>
            Converts this HTTP request object to a string representation.
            </summary>
            <param name="PrintHeaders">Set to true to have the HTTP request header information to be included.</param>
            <returns>A string representation of this header request.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpRequest.ToString">
            <summary>
            Converts this HTTP request object to a string representation. HTTP request header information will not be included.
            </summary>
            <returns>A string representation of this header request.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Response">
            <summary>
            Gets / Sets the response to this request.  If a response is set, the request will not be sent to the server.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.DecodedBody">
            <summary>
            Returns a string representing the body; HTTP chunking and (known) compression types are removed,
            and the text encoding specified by the content is used.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Content">
            <summary>
            Gets / Sets the content of this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Guid">
            <summary>
            Gets the unique identifier of this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.HasCloseConnectionOption">
            <summary>
            Gets whether this request specifies that the connection be closed after a response to it is received
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Headers">
            <summary>
            Gets / Sets the headers for this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.HttpMethod">
            <summary>
            Gets / Sets the HTTP method of this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.HttpVersion">
            <summary>
            Gets / Sets the HTTP version string of this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.RequestUri">
            <summary>
            Gets / Sets the URI of this request.
            </summary>
            <remarks>
            The URI should not contain the server to which the request is directed.  It should only contain the path on the server of the requested
            resource.  The server's IP address or DNS name should be stored in the 'Host' header.  For example, to request the page
            'http://www.example.com/directory/file.html', the URI string should be "/directory/file.html" and the Host header should be
            "www.example.com".
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.ID">
            <summary>
            Gets the ID number of this request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.Timestamp">
            <summary>
            The time at which this request was sent to the server
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequest.OriginatingProgram">
            <summary>
            The filename of the program that originated this request
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ListenerInfo">
            <summary>
            Base class used by RequestListenerInfo and ResponseListenerInfo
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ListenerInfo._eventType">
            <summary>
            The type of event that the listener is listening for
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ListenerInfo._uriFilter">
            <summary>
            A wildcards string to filter request URIs on
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ListenerInfo._guid">
            <summary>
            Unique identifier of the event handler (automatically generated)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.#ctor(ArtOfTest.WebAii.Messaging.Http.ProxyEventType)">
            <summary>
            Creates a new ListenerInfo of the specified type and generates a new guid for it
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.MatchesUri(System.String)">
            <summary>
            Determines whether this listener's filter matches a given URI
            </summary>
            <param name="uri">The URI to check this listener's filter against</param>
            <returns>True if the filter matches, false if it doesn't</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.Guid">
            <summary>
            Gets the guid of the event handler wrapped by this ListenerInfo object
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.EventType">
            <summary>
            Gets the type of event that this listener is subscribed to
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.UriFilter">
            <summary>
            Gets / Sets the wildcard string used to filter request URIs before firing this listener's handler delegate
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.Equals(System.Object)">
            <summary>
            Determines whether this ListenerInfo object describes the same event handler delegate as another
            </summary>
            <param name="obj">The object to compare this one to</param>
            <returns>True if the objects are equivalent enough for our purposes (tracking them in the lists of listeners subscribed to proxy events)</returns>
            <remarks>
            Two listeners are considered equivalent if they have the same guid for their event handler, are listening to the same type of event,
            and have the same wildcard filter for request URIs.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ListenerInfo.GetHashCode">
            <summary>
            Calculates and returns the hashcode for this object.
            </summary>
            <returns>The calculated hashcode.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo">
            <summary>
            Wraps a listener for BeforeRequest events from the proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo._handler">
            <summary>
            The event handler delegate
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo.#ctor(ArtOfTest.WebAii.Messaging.Http.HttpRequestHandler)">
            <summary>
            Creates a new listener info object wrapping the given event handler delegate
            </summary>
            <param name="handler">The event handler delegate</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo.#ctor(System.Guid,System.String)">
            <summary>
            Creates a RequestListenerInfo object with the provided guid and URI filter.  For use internally by the proxy.
            </summary>
            <param name="guid">The guid of the WebAii-side event handler</param>
            <param name="uriFilter">Wildcard string to filter request URIs of interest</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.RequestListenerInfo.Handler">
            <summary>
            Gets the event handler delegate wrapped by this listener object
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo">
            <summary>
            Wraps a listener for BeforeResponse events from the proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo._handler">
            <summary>
            The event handler delegate
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo.#ctor(ArtOfTest.WebAii.Messaging.Http.HttpResponseHandler)">
            <summary>
            Creates a new listener info object wrapping the given event handler delegate
            </summary>
            <param name="handler">The event handler delegate</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo.#ctor(System.Guid,System.String)">
            <summary>
            Creates a ResponseListenerInfo object with the provided guid and URI filter.  For use internally by the proxy.
            </summary>
            <param name="guid">The guid of the WebAii-side event handler</param>
            <param name="uriFilter">Wildcard string to filter request URIs of interest</param>
            <remarks>Responses are filtered based on the URI requested by the originating request.</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ResponseListenerInfo.Handler">
            <summary>
            Gets the event handler delegate wrapped by this listener info object
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ProxyCommand">
            <summary>
            Base class for commands from WebAii to the HTTP proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ProxyCommand._type">
            <summary>
            The type of command
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ProxyCommand.#ctor">
            <summary>
            Creates a new command object that doesn't cause any action by the proxy
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ProxyCommand.#ctor(ArtOfTest.WebAii.Messaging.Http.ProxyCommandType)">
            <summary>
            Creates a new command object of the specified type
            </summary>
            <param name="type">The type of command</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ProxyCommand.Type">
            <summary>
            Gets / Sets the type of command
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand">
            <summary>
            The ProxyEventHandlerCommand is used for installing and removing event handlers from the BeforeRequest and BeforeResponse proxy
            events.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand._handlerGuid">
            <summary>
            The unique identifier for the event handler delegate on the WebAii side
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand._uriFilter">
            <summary>
            A wildcard string to compare against request URIs.  The event will only fire if the wildcard string matches the request URI.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand.#ctor(ArtOfTest.WebAii.Messaging.Http.ProxyCommandType,System.Guid,System.String)">
            <summary>
            Initializes a new ProxyEventHandlerCommand object with a command type, event handler ID and Uri filter specified.
            </summary>
            <param name="type">The type of command.  Only attach and remove event handler commands are valid.</param>
            <param name="handlerGuid">The guid of the event handler on the WebAii side.</param>
            <param name="uriFilter">The Uri filter for the event handler.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand.HandlerGuid">
            <summary>
            Gets the guid for the event handler this command references.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ProxyEventHandlerCommand.UriFilter">
            <summary>
            Gets the string that is used to filter for a URI match
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ResumePendingRequestCommand">
            <summary>
            Instructs the proxy to resume a pending request that is paused waiting for the request object to be passed back from WebAii
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ResumePendingRequestCommand._request">
            <summary>
            The request, after it's been processed by WebAii-side event handlers
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ResumePendingRequestCommand.#ctor(ArtOfTest.WebAii.Messaging.Http.HttpRequest)">
            <summary>
            Creates a new ResumePendingRequestCommand
            </summary>
            <param name="request">The request object, with any modifications made by WebAii-side event handlers</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ResumePendingRequestCommand.Request">
            <summary>
            Gets the processed request object
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.StopProfilingCommand">
            <summary>
            Instructs the proxy to resume a pending request that is paused waiting for the request object to be passed back from WebAii
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.StopProfilingCommand._dataQ">
            <summary>
            Listing of all the traffic that transpired between calls to StartProfiling and StopProfiling
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.StopProfilingCommand.#ctor">
            <summary>
            Creates a new StartProfilingCommand
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.StopProfilingCommand.DataQ">
            <summary>
            Listing of all the traffic that transpired between calls to StartProfiling and StopProfiling
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ResumePendingResponseCommand">
            <summary>
            Instructs the proxy to resume a pending response that is paused waiting for the response object to be passed back from WebAii
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ResumePendingResponseCommand._response">
            <summary>
            The response, after processing by WebAii-side event handlers
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ResumePendingResponseCommand.#ctor(ArtOfTest.WebAii.Messaging.Http.HttpResponse)">
            <summary>
            Creates a new ResumePendingResponseCommand, to pass the specified response back to the proxy
            </summary>
            <param name="response">The response, after it has been processed by WebAii-side event handlers</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ResumePendingResponseCommand.Response">
            <summary>
            Gets the response object wrapped by this command
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ProxyEvent">
            <summary>
            Objects of this class represent events in the proxy.  This class is used for passing those events from the proxy to WebAii after WebAii
            has attached to an event in the proxy.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ProxyEvent._type">
            <summary>
            The type of this event
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.ProxyEvent._handlerGuids">
            <summary>
            The unique identifiers of all handlers subscribed to this event
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.ProxyEvent.#ctor(System.Collections.Generic.List{System.Guid})">
            <summary>
            Creates a new ProxyEvent object
            </summary>
            <param name="handlerGuids">The list of unique identifiers of the event handlers that are subscribed to this event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ProxyEvent.Type">
            <summary>
            Gets this event's type
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.ProxyEvent.HandlerGuids">
            <summary>
            Gets the unique identifier for the handler of this event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.BeforeRequestEvent">
            <summary>
            Wraps a BeforeRequest event from the proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.BeforeRequestEvent._request">
            <summary>
            The request object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.BeforeRequestEvent.#ctor(System.Collections.Generic.List{System.Guid},ArtOfTest.WebAii.Messaging.Http.HttpRequest)">
            <summary>
            Creates a new BeforeRequestEvent object, to be processed by the specified list of event listeners
            </summary>
            <param name="handlerGuids">List of guids of event listeners that are interested in this event</param>
            <param name="request">The request object that caused this event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.BeforeRequestEvent.Request">
            <summary>
            Gets / Sets the request object for this event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.BeforeResponseEvent">
            <summary>
            Wraps a BeforeResponse event from the proxy
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Messaging.Http.BeforeResponseEvent._response">
            <summary>
            The response object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.BeforeResponseEvent.#ctor(System.Collections.Generic.List{System.Guid},ArtOfTest.WebAii.Messaging.Http.HttpResponse)">
            <summary>
            Creates a new BeforeResponseEvent object, to be processed by the specified list of event listeners
            </summary>
            <param name="handlerGuids">List of guids of event listeners that are interested in this event</param>
            <param name="response">The response object that caused this event</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.BeforeResponseEvent.Response">
            <summary>
            Gets / Sets the response object for this event
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpRequestHandler">
            <summary>
            Event handler delegate for the HTTP proxy's BeforeRequest events
            </summary>
            <param name="sender">The HttpProxyManager</param>
            <param name="args">EventArgs object containing the request from the browser before it has been sent to the downstream web server</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpResponseHandler">
            <summary>
            Event handler delegate for the HTTP proxy's BeforeResponse events
            </summary>
            <param name="sender">The HttpProxyManager</param>
            <param name="args">EventArgs object containing the response from the web server before it has been sent to the downstream browser</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpRequestEventArgs">
            <summary>
            EventArgs subclass that wraps an HTTP request, and possibly the related response
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpRequestEventArgs.Request">
            <summary>
            Gets the HttpRequest object that caused the event to fire
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.HttpResponseEventArgs">
            <summary>
            EventArgs subclass that wraps an HTTP response and the related request
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.HttpResponseEventArgs.Response">
            <summary>
            Gets the HttpResponse object that caused the event to fire
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ProxyCommandType">
            <summary>
            List of HttpProxy command types.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.ProxyEventType">
            <summary>
            List of HttpProxy event types.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.Constants">
            <summary>
            List of pipe name strings
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.Diags">
            <summary>
            Provides some simple utility functions for program diagnostics.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.Diags.LineNumber">
            <summary>
            The current line number in the calling source file
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Messaging.Http.Diags.Filename">
            <summary>
            The calling source file's filename
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpParser.ReadLine(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads a line of text from a buffer and returns it as a string.  Also returns the offset in the buffer following the line.
            </summary>
            <param name="buffer">The buffer to examine for a HTTP response message.</param>
            <param name="offset">The offset in the buffer that is the start of the HTTP response message.</param>
            <param name="length">The amount of data in the buffer to examine for a HTTP response message.</param>
            <param name="newOffset">The offset in the buffer of the byte following the line returned. If a complete line cannot be read, newOffset = offset.</param>
            <returns>The string read, or null if a complete line is not present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpParser.DetectEncodedBodyLength(System.Byte[],System.String,System.Int64)">
            <summary>
            Compute the raw number of bytes in a chunked message body.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.HttpParser.ParseHeaders(System.Byte[],System.Int32,System.Collections.Specialized.NameValueCollection,System.Int32@)">
            <summary>
            Parse the request buffer and add all name/value headers to the headers collection.
            Note that parsing is a bit complicated because we wish to support the obscure "continuation headers" format
            in which a header's value may "wrap" to the next line.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Messaging.Http.StringExtensions">
            <summary>
            Contains an extension method for the System.String class that lets us do filename-style wildcard matching.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Messaging.Http.StringExtensions.EqualsWildcardMatch(System.String,System.String)">
            <summary>
            Performs case-insensitive wildcard matching of strings.  Algorithm stolen from Dr. Dobb's Journal.
            </summary>
            <param name="tame">The non-wildcard string to compare</param>
            <param name="wild">The wildcard string</param>
            <returns>True if there's a match, false otherwise.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.InvalidDocumentException">
            <summary>
            There was a problem accessing an mshtml document object
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.LogErrorException">
            <summary>
            This exception indicates that a log error call has been made to hault
            the execution of the tests by throwing a LogErrorException.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.LogErrorException.#ctor(System.String)">
            <summary>
            Create this exception
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.LogErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Contructor.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Context Info.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.LogErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            GetObjectData - Serialization
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Context Info.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.ErrorData.FindError">
            <summary>
            Class represents a Find error information. This class encapsulates all the information
            regarding a Find object call that caused one of the Find methods to return null or
            an empty list.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ErrorData.FindError._parameterUsed">
            <summary>
            Parameter used for the search.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ErrorData.FindError._chainedParametersUsed">
            <summary>
            Chained parameters used for the search.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ErrorData.FindError._expressionUsed">
            <summary>
            The FindExpression used for the search
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ErrorData.FindError._reference">
            <summary>
            The reference element used for the search.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ErrorData.FindError._searchLog">
            <summary>
            The search log.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.#ctor(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Create new FindError object.
            </summary>
            <param name="parameterUsed">The id parameter used to perform the find.</param>
            <param name="reference">The reference element passed in.</param>
            <param name="searchLog">The search log returned by identification.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.#ctor(ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Create new FindError object.
            </summary>
            <param name="chainedParametersUsed">The chained id parameters used to perform the find.</param>
            <param name="reference">The reference element passed in.</param>
            <param name="searchLog">The search log returned by identification.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.#ctor(ArtOfTest.Common.IFindExpression,ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Create a new FindError object
            </summary>
            <param name="expressionUsed">The FindExpression used to perform the find</param>
            <param name="reference">The reference element passed in</param>
            <param name="searchLog">The search log returned by identification</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.IsChained">
            <summary>
            Gets whether this is a chained parameter error or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.ParameterUsed">
            <summary>
            Gets the FindParam used for the search. If IsChained != null, then this will return null.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.ExpressionUsed">
            <summary>
            Gets the FindExpression used for the search
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.ChainedParametersUsed">
            <summary>
            Gets the chained parameters used for the search. If isChained == null, then this will return null.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.Reference">
            <summary>
            Gets the reference element used for the search.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.SearchLog">
            <summary>
            Gets the search log returned by the identification routines.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ErrorData.FindError.ToString">
            <summary>
            String representation of a FindError object
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.ExecuteCommandException">
            <summary>
            Execute command exception. Occurs when a command fails to execute.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ExecuteCommandException._message">
            <summary>
            The exception message
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.ExecuteCommandException._command">
            <summary>
            Command 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.Command">
            <summary>
            Gets the command that caused the exception.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.Message">
            <summary>
            Gets the ExecuteCommandException message.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.#ctor(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.Exception)">
            <summary>
            Create a new ExecuteCommandException.
            </summary>
            <param name="command">The command that caused the exception.</param>
            <param name="innerException">The inner exception (if any).</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new ExecuteCommandException object.
            </summary>
            <param name="info">The data needed to serialize or deserialize an object.</param>
            <param name="context">The source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a ExecuteCommandException object;
            </summary>
            <param name="info">The data needed to serialize or deserialize an object.</param>
            <param name="context">The source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.ExecuteCommandException.Initialize">
            <summary>
            Initialize the exception message
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.FindException">
            <summary>
            Find exception. Thrown when Find returns null or an empty list
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.FindException._message">
            <summary>
            The exception message
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Exceptions.FindException._errorData">
            <summary>
            Find error info
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.FindException.FindErrorData">
            <summary>
            Extended information on the Find error that occurred.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Exceptions.FindException.Message">
            <summary>
            The FindException message.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.FindException.#ctor(ArtOfTest.WebAii.Exceptions.ErrorData.FindError,System.Exception)">
            <summary>
            Create a new FindException.
            </summary>
            <param name="findErrorData">Extended information on the find exception.</param>
            <param name="innerException">The innerException (if any).</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.FindException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new generic FindException.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Any inner exceptions.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.FindException.#ctor(System.String)">
            <summary>
            Create a new generic FindException.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.FindException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new generic FindException.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.FindException.Initialize">
            <summary>
            Initialize the exception message
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.UnsupportedNonInteractiveOperationException">
            <summary>
            This exception is thrown when an automation test tries to perform
            a operation that is deemed invalid in non-interactive mode like
            trying to use the keyboard or click the mouse.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.UnsupportedNonInteractiveOperationException.#ctor(System.String)">
            <summary>
            Create this exception.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.UnsupportedNonInteractiveOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Create this exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">InnerException.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.UnsupportedNonInteractiveOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            UnsupportedNonInteractiveOperationException - Serialization.
            </summary>
            <param name="info">Serialization Info.</param>
            <param name="context">Context Info.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Exceptions.UnsupportedBrowserOperationException">
            <summary>
            Exception for operations that are not supported by a certain type of browser.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Exceptions.UnsupportedBrowserOperationException.#ctor(ArtOfTest.WebAii.Core.BrowserType,System.String)">
            <summary>
            Create this exception
            </summary>
            <param name="browserType">The browser type.</param>
            <param name="operationName">The unsupported operation.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.TestPath">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnableTestPath
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.ProjectPath">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnableProjectPath
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.OutputPath">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnableOutputPath
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.ResultFilename">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnableResultFilename
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.SettingsPath">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnableSettingsPath
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.PerformanceResultsPath">
            <summary>
            Wrapper around IRunnableGUITestBuilder.RunnablePerformanceResultsPath
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestMetadata.RemoteStorageUri">
            <summary>
            Remote vs Local (null) storage uri
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Execution.Interfaces.IRunnerTestFinder.EnsureSubTestExistsByPath(System.String,System.String)">
            <summary>
            Validates test existence at the absolute/relative path
            </summary>
            <param name="deploymentPath"></param>
            <param name="originalTestPath"></param>
            <returns>The absolute path of the test file, or blank if not valid.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.jQuery.jQueryExtension">
            <summary>
            This class extends the legacy Find class and BaseText clss and adds jQuery capability.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQueryExtension.jQuery(ArtOfTest.WebAii.Core.Find)">
            <summary>
            Creates and returns a new jQuery object for the Find object.
            </summary>
            <param name="find">The Find object to create the jQuery for.</param>
            <returns>A jQuery object initialized for the Find object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQueryExtension.jQuery(ArtOfTest.WebAii.TestTemplates.BaseTest)">
            <summary>
            Returns the jQuery object associated with the BaseTest object.
            </summary>
            <param name="baseTest">The BaseTest object to get the jQuery object from.</param>
            <returns>A jQuery object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQueryExtension.TojQuery(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Start a jQuery expression from this element.
            </summary>
            <param name="e">The element</param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.jQuery.FindExtension">
            <summary>
            Internally used to offer scoped Find object on elements.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.jQuery.jQuery">
            <summary>
            Provide jQuery selector syntax support. Version 1.3 - http://docs.jquery.com/Selectors
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.jQuery.jQuery._queryBase">
            <summary>
            The internal query that maintains current state.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.#ctor(System.Collections.Generic.IList{ArtOfTest.WebAii.ObjectModel.Element})">
            <summary>
            Create a new jQuery passing it the base list
            </summary>
            <param name="queryBase"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.id(System.String)">
            <summary>
            Matches a single element with the given id attribute.
            </summary>
            <param name="id">An ID to search for, specified via the id attribute of an element</param>
            <returns>The first matched element else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.id``1(System.String)">
            <summary>
            Matches a single element with the given id attribute.
            </summary>
            <typeparam name="TControl">The control type</typeparam>
            <param name="id">The control id</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.tag(System.String)">
            <summary>
            Matches all elements with the given tag name.
            </summary>
            <param name="element">The tag name to match</param>
            <returns>The query match.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.classes(System.String[])">
            <summary>
            Matches all elements with the given class or classes.
            </summary>
            <param name="classes">1 to n classes to match on the query</param>
            <returns>The query match</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.all">
            <summary>
            Matches all elements. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.all``1">
            <summary>
            Matches all elements as a strongly typed control.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.descendant">
            <summary>
            Matches all descendant elements. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.child">
            <summary>
            Matches all child elements only. 'parent > child', http://docs.jquery.com/Selectors/child#parentchild
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.next">
            <summary>
            Matches all next elements. 'prev + next', The immediate next sibling. http://docs.jquery.com/Selectors/next#prevnext
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.siblings">
            <summary>
            Matches all sibling elements. 'prev ~ siblings', All next sibling elements. http://docs.jquery.com/Selectors/siblings#prevsiblings    
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.first">
            <summary>
            Matches the first selected element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.first``1">
            <summary>
            Matches the first selected element.
            </summary>
            <typeparam name="TControl"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.last">
            <summary>
            Matches the last selected element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.last``1">
            <summary>
            Matches the last selected element.
            </summary>
            <typeparam name="TControl"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.even">
            <summary>
            Matches even elements, zero-indexed. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.odd">
            <summary>
            Matches odd elements, zero-indexed. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.eq(System.Int32)">
            <summary>
            Matches a specific index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.gt(System.Int32)">
            <summary>
            Matches index greated than
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.lt(System.Int32)">
            <summary>
            Matches index less than.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.header">
            <summary>
            Matches all header elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.contains(System.String)">
            <summary>
            Matches all elements that contain specific text.  It's case sensitive.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.empty">
            <summary>
            Matches all elements that have no children (including text nodes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.parent">
            <summary>
            Matches all elements that are parents - they have child elements, including text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.attributes(System.String[])">
            <summary>
            Filter based on the attributes.
            </summary>
            <param name="attributeFilters"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.firstChild">
            <summary>
            Matches all elements that are the first child of their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.lastChild">
            <summary>
            Matches all elements that are the last child of their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.onlyChild">
            <summary>
            Matches all elements that are the only child of their parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.input">
            <summary>
            Filter on all 'input' elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.text">
            <summary>
            Filter on all input type=text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.password">
            <summary>
            Filter on all input type=password
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.radio">
            <summary>
            Filter on all input type=radio
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.checkbox">
            <summary>
            Filter on all input type=checkbox
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.submit">
            <summary>
            Filter on all input type=submit
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.image">
            <summary>
            Filter on all input type=image
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.reset">
            <summary>
            Filter on all input type=reset
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.button">
            <summary>
            Filter on all input type=button
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.file">
            <summary>
            Filter on all input type=file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.ConvertToExpressionAttribute(System.String[])">
            <summary>
            Convert a list of attribute filters to a FindExpression attribute filters notation.
            </summary>
            <param name="jattributeFilters"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.jQuery.jQuery.ConvertClause(System.String)">
            <summary>
            Convert an attribute from a jquery selector attribute to a WebAii FindClause attribute filter.
            </summary>
            <param name="clause"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.jQuery.ElementComparer">
            <summary>
            ElementComparer.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.jQuery.jQueryControl">
            <summary>
            jQuery wrapper of the HtmlControl. 
            see http://api.jquery.com/
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.jQuery.jQueryControl.val">
            <summary>
            Get the current value of the first element
            </summary>        
        </member>
        <member name="P:ArtOfTest.WebAii.jQuery.jQueryControl.length">
            <summary>
            The number of elements in the jQuery object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Network.NetworkBrowser">
            <summary>
            Provides a mechanism for supplying a list of all PC names in the local network.
            This collection of PC names is used in the <see cref="!:ListNetworkComputers.frmMain">
            form </see>
            <br></br>
            This class makes use of a DllImport instruction. The purpose of which is as follows:
            When a DllImport declaration is made in managed code (C#) it is a call to a legacy
            unmanaged code module, normally a C++ Dynamic Link Library. These C++ Dll's are
            usually part of the operating system API, or some other vendors API, and must be 
            used to carry out operations that are not native within the managed code C# framework. 
            This is fairly normal within the windows world. The only thing that needs careful consideration
            is the construction of the correct type of STRUCTS, object pointers, and attribute markers,
            which all contribute to making the link between managed (C#) and unmanaged code (C++)
            more seamless
            <br></br>
            This class makes use of the following Dll calls
            <list type="bullet">
            <item>
            <description> Netapi32.dll : NetServerEnum, The NetServerEnum function lists all servers
            of the specified type that are visible in a domain. For example, an application can call 
            NetServerEnum to list all domain controllers only or all SQL servers only.
            You can combine bit masks to list several types. For example, a value of 0x00000003 
            combines the bit masks for SV_TYPE_WORKSTATION (0x00000001) and SV_TYPE_SERVER (0x00000002).
            </description>
            </item>
            <item>
            <description> Netapi32.dll : NetApiBufferFree, The NetApiBufferFree function frees 
            the memory that the NetApiBufferAllocate function allocates. Call NetApiBufferFree 
            to free the memory that other network management functions return.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Network.NetworkBrowser.#ctor">
            <summary>
            Constructor, simply creates a new NetworkBrowser object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Network.NetworkBrowser.getNetworkComputers">
            <summary>
            Uses the DllImport : NetServerEnum with all its required parameters
            (see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/netserverenum.asp
            for full details or method signature) to retrieve a list of domain SV_TYPE_WORKSTATION
            and SV_TYPE_SERVER PC's
            </summary>
            <returns>Arraylist that represents all the SV_TYPE_WORKSTATION and SV_TYPE_SERVER
            PC's in the Domain</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1">
            <summary>
            Class to manage a collection of FindParam objects.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1._returnNullIfNotFound">
            <summary>
            Returns null if the element is not found, else will throw.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.#ctor">
            <summary>
            Create a new FindExpressionCollection that also be serialized.
            </summary>
            
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.ReturnNullIfNotFound">
            <summary>
            Gets/Sets whether to throw or return null if a FindExpressions is not found.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.Add(System.String,`0)">
            <summary>
            Add a new FindExpression item.
            </summary>
            <param name="key">The key.</param>
            <param name="param">The FindExpression object.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.Item(System.String)">
            <summary>
            Access a FindExpression using its key.
            </summary>
            <param name="key">The key.</param>
            <returns>The FindExpression object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.Save(System.String)">
            <summary>
            Serialized and saves the current collection to a file. 
            You can later load that file using FindParamCollection.Load().
            </summary>
            <param name="fileName">The file name to save to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.ToXml">
            <summary>
            Serialize and return the current FindParamCollection as a string.
            You can later use that string to create a FindParamCollection using the .Load().
            </summary>
            <returns>The serialized Xml that represents this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.GetSchema">
            <summary>
            Return the schema used for serialization.
            <remarks>Currently we are returning null</remarks>
            </summary>
            <returns>The schema</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialized from the xmlReader and initialize the object
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object to the XmlWriter
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.LoadFromXml(System.String)">
            <summary>
            Load a FindParamCollection from an xml persisted string.
            </summary>
            <param name="xml">The string string.</param>
            <returns>The FindParamCollection object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.LoadFromFile(System.String)">
            <summary>
            Load a FindParamCollection from a file.
            </summary>
            <param name="fileName">The file name to load the xml from.</param>
            <returns>The FindParamCollection object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindExpressionCollection`1.InternalLoad(System.IO.TextReader)">
            <summary>
            Create the object from a reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The object.</returns>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.HtmlTreeBuilder._testRegions">
            <summary>
            Auto Detected Automation Regions
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.HtmlTreeBuilder.StartTagCloses(System.String,System.String)">
            <summary>
            Determines whether to close an open tag with an optional closing tag based on the new tag we're parsing
            </summary>
            <param name="startTag">The start tag we've just started parsing</param>
            <param name="stackTag">The optional-closing tag on top of the stack</param>
            <returns>True/False whether or not this startTag automatically closes the the currently open tag.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindParamConstraint">
            <summary>
            Offers addition contraints for a FindParam to allow for a more flexible use in HtmlControls
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParamConstraint._level">
            <summary>
            The level of the hierarchy the contraint should be applied on
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParamConstraint._familyConstraint">
            <summary>
            The FindParam contraint definition.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamConstraint.#ctor(System.Int32,ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Create a FindParam contraint
            </summary>
            <param name="level">The level of the contraint (negative:parent,positive:children)</param>
            <param name="constraint">The constraint definition</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParamConstraint.Level">
            <summary>
            Gets the level constraint. 
            Negative level indicates parent hierarchy. (i.e. -1 first parent).
            Positive level indicates child hierarchy. (i.e. 1 first child).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParamConstraint.Definition">
            <summary>
            Gets the contraint definition
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.CookiesManager">
            <summary>
            Class representing all cookie operations on the current browser machine.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.CookiesManager._ownerBrowser">
            <summary>
            The owner browser associated with this cookie manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.#ctor(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new cookies manager.
            </summary>
            <param name="ownerBrowser">The owner browser.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.GetCookies(System.String)">
            <summary>
            Gets all cookies for a specific url
            </summary>
            <param name="url">The url to get the cookies for (i.e. http://www.google.com) </param>
            <returns>The collection of cookies stored on this machine for the associated browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.GetCookies(System.Uri)">
            <summary>
            Gets all cookies for a specific uri
            </summary>
            <param name="uri">The url to get the cookies for (i.e. http://www.google.com) </param>
            <returns>The collection of cookies stored on this machine for the associated browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.SetCookie(System.Net.Cookie)">
            <summary>
            Set a new cookie or modify an existing one. 
            This methods will only consider the following cookie properties (Name, Value, Domain, Path and Expires)
            </summary>
            <param name="cookie">The cookie to set on the machine for current browser.</param>
            <returns>True/False whether the setting passed or failed.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.DeleteCookie(System.Net.Cookie)">
            <summary>
            Delete a cookie from the machine.
            </summary>
            <param name="cookie">The cookie to delete. The cookie must have a name and domain</param>
            <returns>True/False whether the cookie deletion passed or failed.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.DeleteCookie(System.String)">
            <summary>
            DeleteCookie using the domain name
            </summary>
            <param name="domain">The url or domain associated with the cookie to delete.</param>
            <example>DeleteCookie("mail.google.com") or DeleteCookie("facebook.com")</example>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.GetCookieData(System.Net.Cookie)">
            <summary>
            Gets the raw string of the cookie given a cookie object.
            </summary>
            <param name="cookie">The cookie object.</param>
            <returns>The cookie string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.CookiesManager.BuildCookieContainer(System.Uri,System.String)">
            <summary>
            Given a cookie string, build the strongly typed CookieCollection.
            </summary>
            <param name="url">Thr url</param>
            <param name="cookieHeaders">The cookie string.</param>
            <returns>The CookieContainer object to get the CookieCollection from.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindParamCollection">
            <summary>
            Class to manage a collection of FindParam objects.
            </summary>
        </member>
        <member name="E:ArtOfTest.WebAii.ObjectModel.FindParamCollection.ItemAdded">
            <summary>
            Occurs when a new items is added to this collection.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParamCollection._returnNullIfNotFound">
            <summary>
            Returns null if the element is not found, else will throw.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.#ctor">
            <summary>
            Create a new FindParam collection that also be serialized.
            </summary>
            
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParamCollection.ReturnNullIfNotFound">
            <summary>
            Gets/Sets whether to throw or return null if a FindParam is not found.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.ToArray">
            <summary>
            Get an array of FindParam objects contained in this collection.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.Add(System.String,ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Add a new FindParam item.
            </summary>
            <param name="key">The key.</param>
            <param name="param">The FindParam object.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParamCollection.Item(System.String)">
            <summary>
            Access a FindParam using its key.
            </summary>
            <param name="key">The key.</param>
            <returns>The FindParam object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.Save(System.String)">
            <summary>
            Serialized and saves the current collection to a file. 
            You can later load that file using FindParamCollection.Load().
            </summary>
            <param name="fileName">The file name to save to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.ToXml">
            <summary>
            Serialize and return the current FindParamCollection as a string.
            You can later use that string to create a FindParamCollection using the .Load().
            </summary>
            <returns>The serialized Xml that represents this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.GetSchema">
            <summary>
            Return the schema used for serialization.
            <remarks>Currently we are returning null</remarks>
            </summary>
            <returns>The schema</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialized from the xmlReader and initialize the object
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize this object to the XmlWriter
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.LoadFromXml(System.String)">
            <summary>
            Load a FindParamCollection from an xml persisted string.
            </summary>
            <param name="xml">The string string.</param>
            <returns>The FindParamCollection object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.LoadFromFile(System.String)">
            <summary>
            Load a FindParamCollection from a file.
            </summary>
            <param name="fileName">The file name to load the xml from.</param>
            <returns>The FindParamCollection object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.InternalLoad(System.IO.TextReader)">
            <summary>
            Create the object from a reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.OnItemAdded(ArtOfTest.WebAii.EventsArgs.FindParamCollectionItemAddedEventArgs)">
            <summary>
            Trigger the ItemAdded event.
            </summary>
            <param name="item">The event argument.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new FindParamCollection. Serialization Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.TestRegionCollection">
            <summary>
            A keyed TestRegion collection.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegionCollection._returnNullIfNotFound">
            <summary>
            Returns null if the region is not found, else will throw.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.#ctor">
            <summary>
            Create a new collection
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.Contains(System.String)">
            <summary>
            Check if a TestRegion is in this collection.
            </summary>
            <param name="key">The key to check</param>
            <returns>True/False whether the items is in the collection.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.Remove(System.String)">
            <summary>
            Remove an item from the collection.
            </summary>
            <param name="key">The key of the TestRegion to remove.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.GetKeyForItem(ArtOfTest.WebAii.ObjectModel.TestRegion)">
            <summary>
            Get the key for an item.
            </summary>
            <param name="item">The item to get the key for.</param>
            <returns>The key.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.Item(System.String)">
            <summary>
            Get a testregion by id. Case-insensitive.
            </summary>
            <param name="id">The testregion id.</param>
            <returns>The testregion.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegionCollection.ReturnNullIfNotFound">
            <summary>
            Gets/Sets whether to throw or return null if a region is not found.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.TestRegion">
            <summary>
            Class representing a TestRegion Object defined in the document as:
            <![CDATA[
            <testregion id="foo"> ... </testregion>
            
            or
            
            <!--testregion id="foo"--> ... <!--/testregion>
            ]]>
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._element">
            <summary>
            The element of the region
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._id">
            <summary>
            The region id.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._immediateSubRegions">
            <summary>
            Immediate sub regions of this region.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._allSubRegions">
            <summary>
            All subregions of this region
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._parent">
            <summary>
            The parent test region
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._find">
            <summary>
            The find object associated with this region.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._parentRegionInitialized">
            <summary>
            Whether the parent region is initialized or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._childRegionsInitialized">
            <summary>
            Whether the sub regions are initialized or not.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.TestRegion._allChildlRegionsInitialized">
            <summary>
            Whether all the sub regions are initialized or not.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.#ctor(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new Test Region and initialize it.
            </summary>
            <param name="regionElement">The region element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.Refresh">
            <summary>
            Refresh this test region.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.Refresh(System.Boolean)">
            <summary>
            Refresh the test region.
            </summary>
            <param name="forceDomTreeRefresh">Whether to update the complete DOM before trying to refresh the
            region element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.ContainsElement(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Checks if a certain element is contained in this region or not.
            </summary>
            <param name="element">The element to check.</param>
            <param name="verifyDirectChildrenOnly">Check only the direct children of this region.
            If false, this method will check all sub regions too.</param>
            <returns>True/False whether the element is contained or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.Initialize">
            <summary>
            Initialize the internals of this object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.FindSubRegions(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean)">
            <summary>
            Find all sub region of this test region.
            </summary>
            <param name="rootSearch">The root element to start the search at.</param>
            <param name="allChildren">Whether to find all sub regions regardless of the nesting level.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.GetContainerRegion(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            This static methods can test whether an element falls within a Test Region. If it 
            does, it will return the region that contains it. If the Element passed in is a test region
            then the function will return that element's test region. Otherwise will return null.
            </summary>
            <param name="element">The element to find its container test region.</param>
            <returns>The testregion found or null.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.Find">
            <summary>
            Gets the Find object associated with this test region. 
            All searchs from this object will be scoped to this region.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.Parent">
            <summary>
            Gets the parent Region that this region is within. Else will return null.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.AllChildRegions">
            <summary>
            Gets a list of all sub regions contained in this region regardless of their
            depth relative to this region. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.ChildRegions">
            <summary>
            Gets a list of all direct sub regions of this region.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.Id">
            <summary>
            Gets the region id.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.TestRegion.Element">
            <summary>
            Gets the element object that represents this region in the Dom tree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.Equals(System.Object)">
            <summary>
            Defined how two TestRegions should be compared.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True/False whether the two objects are equal.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.TestRegion.GetHashCode">
            <summary>
            Get the hash code for this testregion.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.iAttribute">
            <summary>
            This class represents a markup attribute (foo="bar").
            The iAttribute object contains a starting 'i' to distinguish it from System.Attribute.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute.DoubleQuote">
            <summary>
            Double Quote "
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute.SingleQuote">
            <summary>
            Single Quote '
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._name">
            <summary>
            The name of the attribute
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._value">
            <summary>
            The value of the attribute
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._rawValue">
            <summary>
            The raw value of the attribute with quotes..etc
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._isSingular">
            <summary>
            Is the attribute singular. (i.e. nowrap, not valid XHTML but exists in today's pages)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._beginQuote">
            <summary>
            Begin Quote used. (i.e "|'|Nothing)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._endQuote">
            <summary>
            End Quote used. (i.e. "|'|Nothing)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._type">
            <summary>
            Attribute type (i.e. Style/Event or Others)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.iAttribute._styles">
            <summary>
            The styles if the attribute type is (Style)
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.#ctor">
            <summary>
            Create a new attribute. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new attribute.
            </summary>
            <param name="name">Name of the attribute.</param>
            <param name="value">Value of the attribute.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.Name">
            <summary>
            Gets/Sets the name of this attribute.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.Value">
            <summary>
            Gets/Sets the value of this attribute.
            <remarks>The value will be trimmed from any beginning or ending quotes. If you need the raw value
            use the RawValue property.</remarks>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.IsSingular">
            <summary>
            Gets/Sets whether the attribute is singluar.
            <example>
            <code>
            The nowrap attribute is a singluar attribute in <![CDATA[ <foo id="myfoo" nowrap /> ]]>.
            </code>
            </example>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.BeginQuote">
            <summary>
            Gets/Sets the begin quote type of the attribute.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.EndQuote">
            <summary>
            Gets/Sets the end quote type of the attribute
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.AttributeType">
            <summary>
            Gets the attribute type (i.e. Style/Event/Other).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.Styles">
            <summary>
            The Styles collection if AttributeType = Style.
            <example>
            
            The following element <![CDATA[ <foo style="height:1px;width:2px;" /> ]]>, will
            contain a NameValueCollection that consists of two items:
            
            The first : name=height,value=1px
            The second : name=width,value=2px
            
            </example>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.RawValue">
            <summary>
            The raw value of the attribute including any quotes.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.iAttribute.DecodedValue">
            <summary>
            The value of the attribute after converting any HTML entities to normal characters
            e.g. <![CDATA[&amp; -> &]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.InitializeTypeObjects">
            <summary>
            Initialize the rest of the internal objects
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.GetQuoteType(System.Char)">
            <summary>
            Given a character returns the quote type
            </summary>
            <param name="c">The quote character to identify.</param>
            <returns>The type of quote.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.PopulateStylesCollection">
            <summary>
            Initialize the styles if it is a style property
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.ToString">
            <summary>
            A string representation of the attribute.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.ContainsPartialAttributeValue(ArtOfTest.WebAii.ObjectModel.iAttribute,System.StringComparison)">
            <summary>
            Determines whether a partial attribute value is contained in this attribute value
            Also makes sure the attribute name is correct.
            </summary>
            <param name="partialAttributeToCompare">The partial attribute to compare.</param>
            <param name="comparison">Type of comparison to perform.</param>
            <returns>True/False whether this attribute contains the parital attribute value passed in.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.Equals(ArtOfTest.WebAii.ObjectModel.iAttribute,System.StringComparison,System.Boolean)">
            <summary>
            Determines equality between two attributes
            </summary>
            <param name="obj">The object to compare.</param>
            <param name="comparison">The type of comparsion to perform.</param>
            <param name="matchQuotes">Whether to match the begin/end quotes or just the value.</param>
            <returns>True/False whether they are the same.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.GetAttributeList(System.String[])">
            <summary>
            Quick shortcut to get a list of attributes. Pass in the name/value pairs as a semi-colon delimited list.
            <example>
            For example: GetAttributeList("id=foo","checked=true") 
            
            Note: Any string that don't contain a pair will be ignored. Don't include an type of quotes.
            </example>
            </summary>
            <param name="nameValuePairs">The name value pairs.</param>
            <returns>The list of attributes.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.iAttribute.OnPropertyChanged(System.String)">
            <summary>
            Fire the property changed event.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="E:ArtOfTest.WebAii.ObjectModel.iAttribute.PropertyChanged">
            <summary>
            Occurs when a property changes on this iAttribute object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.Element">
            <summary>
            Represents an element in the Document Object Model (DOM) tree.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._data">
            <summary>
            Any custom data associated with this element object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._tagName">
            <summary>
            The tag name of the element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._content">
            <summary>
            full content of this element tag
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._isSelfClosing">
            <summary>
            Whether the element is self closing or not
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._isBeginTag">
            <summary>
            Whether the element is the beginning of a tag or not
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._isEndTag">
            <summary>
            Whether the element is the end of a tag.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._parsedType">
            <summary>
            The parsing type of the element. Set by the parser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._absoluteTagIndex">
            <summary>
            Absolute tag index of the element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._tagNameIndex">
            <summary>
            TagName index
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._absoluteSiblingTagIndex">
            <summary>
            The absolute sibling count of this element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._cachedElement">
            <summary>
            The parsedElement cached as part of the actual element
            This way we don't need to initialize all the values (only on demand for performance)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._nameAttrValue">
            <summary>
            The value of the 'name' attribute if available
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._IdAttrValue">
            <summary>
            The value of the 'id' attribute if available
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._styleClassNameValue">
            <summary>
            The cssclass name 'cssclass' if available
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._children">
            <summary>
            List of child element of this node
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._childNodes">
            <summary>
            All of this element's children including any comments/textliterals
            This field is used when getting innerText, innerMarkups
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._parent">
            <summary>
            The parent element of this node
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._type">
            <summary>
            The element ty[e
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._attributes">
            <summary>
            The list of attributes for this element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._matchingClosingTag">
            <summary>
            The matching closing tag for this element if applicable
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._nameValueSet">
            <summary>
            Internal flags used to mark that certain data is parsed. This way
            we always only parse an item once
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._internalSiblingCounter">
            <summary>
            Internal sibiling counter
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._inputElementType">
            <summary>
            If the element is an Input, this will be set to the input type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._browser">
            <summary>
            The browser object that owns this element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._findObjectUsed">
            <summary>
            The find object that was used to find this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._findParamsUsed">
            <summary>
            The FindParam object used to locate this element using the Find object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._findExprUsed">
            <summary>
            The FindExpression object used to locate this element using the Find object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._wait">
            <summary>
            The wait object for this element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element.i_state">
            <summary>
            The current state of this element;
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._depth">
            <summary>
            Depth,
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._uniqueHashCode">
            <summary>
            This element's hash code;
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Element._host">
            <summary>
            The automation host to use;
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(System.String,System.Int32)">
            <summary>
            Create a light proxy Element object. (Used Internaly for performance)
            </summary>
            <param name="tagName">The tagName</param>
            <param name="tagIndex">The tagIndex</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(ArtOfTest.Common.ParsedElement,ArtOfTest.Common.IAutomationHost)">
            <summary>
            Create an element using an automation host.
            </summary>
            <param name="parsedElement">The parsed element.</param>
            <param name="host">The automation host</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(ArtOfTest.Common.ParsedElement,ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a new element hosted in a browser and within a plugin
            </summary>
            <param name="parsedElement">The parsed element.</param>
            <param name="browser">The browser object associated with this element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.Core.Find,ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Initialize an element proxy.
            The only property off this element that you can use is
            Wait.Exist() or Wait.ExistsNot()
            </summary>
            <param name="findParam">The FindParam array</param>
            <param name="findObj">The Find object to use</param>
            <param name="ownerBrowser">Owner browser</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(ArtOfTest.WebAii.Core.HtmlFindExpression,ArtOfTest.WebAii.Core.Find,ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Initialize an element proxy.
            The onlyl property off this element that you can use is Wait.Exist() or Wait.ExistsNot()
            </summary>
            <param name="findExpr">A FindExpression identifying this element</param>
            <param name="findObj">The Find object to use</param>
            <param name="ownerBrowser">Owner browser</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.#ctor(ArtOfTest.WebAii.ObjectModel.FindParam,ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Initialize an element proxy.
            The only property off this element that you can use is
            Wait.Exist() or Wait.ExistsNot()
            </summary>
            <param name="findParam">The FindParam array</param>
            <param name="ownerBrowser">Owner browser</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetNextSibling">
            <summary>
            Get the next sibling of this node. If this node is the last sibling, will return null.
            </summary>
            <returns>The next sibiling.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetPreviousSibling">
            <summary>
            Get the previous sibiling of this node. If this node is the first sibling, will return null.
            </summary>
            <returns>The previous sibling</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetValue``1(System.String,``0)">
            <summary>
            Set a property to a value on this element.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetValue``1(System.String,``0,System.Boolean)">
            <summary>
            Set a property to a value on this element.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The value.</param>
            <param name="isJsWrappedObject">True/False whether you are accessing an extended wrapperd JS object. [Needed for Firefox only]</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetValue``1(System.String)">
            <summary>
            Get a property value on this element.
            </summary>
            <typeparam name="T">The type of the property to return.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The property value returned as type T.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetValue``1(System.String,``0)">
            <summary>
            Get a property value on this element.
            </summary>
            <typeparam name="T">The type of the property to return.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="defaultValue">The return value, if the property has no value (is null or the empty string)</param>
            <returns>The property value returned as type T.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetValue``1(System.String,System.Boolean)">
            <summary>
            Get a property value on this element.
            </summary>
            <typeparam name="T">The type of the property  to return</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="isJsWrappedObject">True/False whether you are accessing an extended wrapperd JS object. [Needed for Firefox only]</param>
            <returns>The property value returned as type T.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetValue``1(System.String,System.Boolean,``0)">
            <summary>
            Get a property value on this element.
            </summary>
            <typeparam name="T">The type of the property  to return</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="isJsWrappedObject">True/False whether you are accessing an extended wrapped JS object. [Needed for Firefox only]</param>
            <param name="defaultValue">The return value, if the property has no value (is null or the empty string)</param>
            <returns>The property value returned as type T.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.Refresh(System.Boolean)">
            <summary>
            Using the FindParamsUsed and the TestRegionIdUsed to find this element
            last, this methods will attempt to re-find this element in the new DOM
            tree.
            </summary>
            <param name="forceDomTreeRefresh">Force a Browser/Plugin refresh before attempting to refine this element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.Refresh">
            <summary>
            Using the FindParamsUsed and the TestRegionIdUsed to find this element
            last, this methods will attempt to re-find this element in the new DOM
            tree.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetRectangle">
            <summary>
            Gets the element rectangle. (X,Y) and width, height as it appears on browser and screen.
            Takes into account any scrolling.
            </summary>
            <returns>The rectangle object of this element.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.AddChild(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Add a child element to this element.
            </summary>
            <param name="child">The child to add.</param>
            <remarks>
            This method will only add elements of ParsingType=Markup to the Children collection.
            ChildNodes collection will contain a complete list of elements of all types.
            (i.e. Comment,TextLiteral ...etc).
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.ContainsAttribute(ArtOfTest.WebAii.ObjectModel.iAttribute,System.Boolean,System.StringComparison,System.Boolean)">
            <summary>
            Whether a certain attribute is contained in this element
            </summary>
            <param name="attribute">The attribute to compare.</param>
            <param name="usePartialAttributeValue">Whether to use partinal values of the attribute values.</param>
            <param name="comparison">Comparison type.</param>
            <param name="matchQuotes">Whether to match the quotes or not. This only applied when UsePartialAttributeValue is false.</param>
            <returns>True/False Whether the attribute is contained or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.ContainsAttribute(System.String)">
            <summary>
            True/False whether this element contains a specific attribute name.
            </summary>
            <param name="attributeName">The attribute name to check for.</param>
            <returns>True/False on the attribute existence.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.IsFrame">
            <summary>
            Gets whether this element represents an iframe or frame
            </summary>
            <returns>Return the FrameInfo of the frame if is a frame, else will return null</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.IsFrame(System.Boolean,System.Boolean)">
            <summary>
            Gets whether this element represents an iframe or frame
            </summary>
            <param name="makeAbsolute">Whether to force the FrameInfo's Src to be an absolute URI</param>
            <param name="stripFinalBrowserSegment">
            When used in conjunction with makeAbsolute, this will strip the final path segment from the
            owning browser's URL before concatenating the frame's src.
            </param>
            <returns>Return the FrameInfo of the frame if is a frame, else will return null</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetAttribute(System.String)">
            <summary>
            Find a specific attribute by name and returns it. (case-insensitive)
            </summary>
            <param name="name">The name of the attribute to get.</param>
            <returns>The attribute or null if the attribute was not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetAttribute(System.String,System.Boolean)">
            <summary>
            Finds a specific attribute name in the Element list of attributes and returns
            its object
            </summary>
            <param name="name">The name of the attribute to find.</param>
            <param name="ignoreCase">Ignore case when searching.</param>
            <returns>The attribute object or null if the attribute is not found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetAttributeValueOrEmpty(System.String)">
            <summary>
            Gets the value of the attribute or a String.Empty if attribute does not exist.
            </summary>
            <param name="attrName">The attribute to get.</param>
            <returns>String.Empty if not found, else the attribute name.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.As``1">
            <summary>
            Returns this elements as a strongly-typed control of type TControl.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <returns>The control object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.Focus">
            <summary>
            Give this element keyboard focus
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsScript">
            <summary>
            Gets whether the element is a script or not. Used by TreeBuider.
            Given that at parsing time we need to figure out if this element is script,
            we do not want to rely on ElementType since it will cause a perf hit given
            that it needs to parse the full element attributes
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.ToXml(System.Boolean,System.Boolean)">
            <summary>
            Returns an xml document with each element having the namespace
            set to its absolute index
            </summary>
            <param name="allChildNodes">Use the ChildNodes property, otherwise use the Children property.</param>
            <param name="ignoreTestRegionTags">True/False whether to ignore test regions in the XML.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing this element and all of its child nodes.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.ToXml(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an xml document representation of the DOM element
            </summary>
            <param name="allChildNodes">Use the ChildNodes property, otherwise use the Children property.</param>
            <param name="ignoreTestRegionTags">True/False whether to ignore test regions in the XML.</param>
            <param name="emitAbsIndex">Whether to emit the __absIndex attribute.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing this element and all of its child nodes.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetFindProperties(ArtOfTest.WebAii.ObjectModel.FindParam[],ArtOfTest.WebAii.Core.Find)">
            <summary>
            Sets the find properties that found this element using the Find object.
            </summary>
            <param name="findParams">The FindParam used.</param>
            <param name="findObject">The FindObject user.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetFindProperties(ArtOfTest.WebAii.ObjectModel.FindParam[])">
            <summary>
            Set the FindParams without overriding the Find object.
            </summary>
            <param name="findParams">The find params</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetFindProperties(ArtOfTest.WebAii.Core.HtmlFindExpression,ArtOfTest.WebAii.Core.Find)">
            <summary>
            Set the find properties that found this element using the Find object
            </summary>
            <param name="expr"></param>
            <param name="findObject"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetParent(ArtOfTest.Common.ITargetElement)">
            <summary>
            Sets the parent of this Element.
            </summary>
            <param name="parent">The parent element.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetClosestUniqueParent(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the closest unique parent element of this element.
            </summary>
            <returns>The parent element else null.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.DeleteAttribute(System.String)">
            <summary>
            Deletes the specified attribute from the internal attribute collection
            of this element.
            </summary>
            <param name="attributeName">The attribute name to delete</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.FrameElement">
            <summary>
            Gets / Sets the root frame element that this element is contained in.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Depth">
            <summary>
            The hierarchical depth of this element
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsProxy">
            <summary>
            Gets whether this element is a proxy element or a fully initialized element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Wait">
            <summary>
            Gets the wait object to wait for certain conditions of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.OwnerBrowser">
            <summary>
            Returns the owner browser of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.FindObjectUsed">
            <summary>
            Gets a reference to the Find object used to find this element
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.FindParamsUsed">
            <summary>
            Gets the FindParams used to find this element when using the Find object.
            If chained identification is used this array will contain the list of params, otherwise
            will contain a single FindParam object.
            This property is not set when calling the Find.Allxxx methods.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.FindExpressionUsed">
            <summary>
            Gets the FindExpression used to find this element when using the Find object.
            This property is not set when calling the Find.Allxxx methods.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.InnerText">
             <summary>
             Gets this element's inner text content including all of its nested children.
             <example>
             <![CDATA[
             Example:
            
             <foo id="1">one<bar>two</bar></foo>
            
             If foo is this element then InnerText=onetwo
            
             ]]>
             </example>
             </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetPreservedInnerText(System.Boolean)">
            <summary>
            Same as InnerText but will respect any whitespaces between the
            tags.
            </summary>
            <param name="trimStartEnd">True/False whether to trim the whitespace from the start/end of the string.</param>
            <returns>The preserved innertext.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetTextContentRecursive(System.String[])">
            <summary>
            Gets the text content of this element, recursing only into the listed tags
            </summary>
            <param name="tags">The tags to recurse into</param>
            <returns>The combined test content of the specified tags.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.TextContent">
            <summary>
            Gets this element's inner text content without recursing through all its nested children for text.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.OuterMarkup">
             <summary>
             Gets the OuterMarkup of this element.
             <example>
             <![CDATA[
             Example:
            
             <foo id="1"><bar></bar></foo>
            
             If foo is this element then outerMarkup=<foo id="1"><bar></bar></foo>
            
             ]]>
             </example>
             </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.InnerMarkup">
             <summary>
             Gets the InnerMarkup of this element.
             <example>
             <![CDATA[
             Example:
            
             <foo id="1">hello<bar></bar></foo>
            
             If foo is this element then InnerMarkup=<bar></bar>
            
             ]]>
             </example>
             </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.MatchingClosingTag">
            <summary>
            Gets the element's closing tag if it is a begin tag and not self-closing.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.TagNameIndex">
            <summary>
            Gets the tagName occurrence of this element.
            <example>
            If this element is TagName='foo', then TagNameIndex= 3 indicates that this
            element represents the third occurence of tagName 'foo' within this document.
            </example>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.AbsoluteTagIndex">
            <summary>
            Gets the absolute that index of this element. This index is unique within a document.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.AbsoluteSiblingTagIndex">
            <summary>
            Gets the absolute sibling tag index of this element within the parent node.
            Basically the order of this node among its siblings. Zero-based.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsBeginTag">
            <summary>
            Gets whether it is a begin tag <![CDATA[ <foo bar='me'> ]]>.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsEndTag">
            <summary>
            Gets whether this element is an end tag <![CDATA[</foo>]]>.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Data">
            <summary>
            Gets/Sets any custom data associated with this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.TagName">
            <summary>
            Gets the tagName of the the element
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.ParsingType">
            <summary>
            Gets the parsing type set by the parser. (Markup, LiteralText, Comment..etc)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.ElementType">
            <summary>
            Gets the element type (div, table ..etc).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.InputElementType">
            <summary>
            Gets the Input type (i.e. checkbox, radio...etc) if the ElementType=Input.
            Otherwise, will return NotSet.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Content">
             <summary>
             Gets the raw content of the tag that represents this element.
             <example>
             <![CDATA[
             The following tag <foo id="bar" height="px">some text</foo> , has
             a Content property that is:
            
              '<foo id="bar" height="px">'
            
             Note: this does not include the innerText or the closing tag.
            
             ]]>
             </example>
             </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Attributes">
            <summary>
            Gets the list of attributes defined for this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Parent">
            <summary>
            Gets the Parent element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.ChildNodes">
            <summary>
            Gets the list of all parsed element of this tag including text literals, comments, malformed tags...etc.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Children">
            <summary>
            Gets the list of child elements that are well formed markup non-text elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsSelfClosing">
            <summary>
            Gets whether the element is self-closing (<![CDATA[<foo />]]>).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.NameAttributeValue">
            <summary>
            Gets the value of the attribute ('name') if present on this tag
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.CssClassAttributeValue">
            <summary>
            Gets the value of the attribute ('class') if present on this tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IdAttributeValue">
            <summary>
            Gets the value of the attribute ('id') if present on this tag.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.HasIdOrName">
            <summary>
            Gets whether this element has an id or a name set on it.
            </summary>
            <returns>True/False whether or not this element has an ID or a Name attribute applied to it.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.EnsureState">
            <summary>
            Ensure the state is not proxy initialized
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.InitElement(ArtOfTest.Common.ParsedElement,ArtOfTest.WebAii.Core.Browser,System.Collections.Generic.List{ArtOfTest.WebAii.ObjectModel.Element},System.Collections.Generic.List{ArtOfTest.WebAii.ObjectModel.Element},ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Initializes this element properties and methods.
            </summary>
            <param name="parsedElement">The raw parsed element.</param>
            <param name="browser">owner browser.</param>
            <param name="childNodes">childNodes of this element</param>
            <param name="children">children of this element</param>
            <param name="parent">The element parent</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetElementTextContent(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Simply return the text content of this element without recursing through its children.
            </summary>
            <param name="startElement">The target Element/></param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetContentRecursively(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.Text.StringBuilder@)">
            <summary>
            Recursively goes through and returns the content of all child elements starting at StartElement
            </summary>
            <param name="startElement">The start element to get the content for.</param>
            <param name="textOnly">Return only text.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.InitializeInputType">
            <summary>
            If the element is of type input, this will initialize its type.
            This function should only be called when Type=Input
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.InitializeType">
            <summary>
            Initialize the type of the object based on its TagName
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetXmlDocument(ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an XmlDocument of this node and all its children.
            </summary>
            <param name="root">The root node to use</param>
            <param name="withAbsoluteIndex">Whether to emit the AbsoluteTagIndex as a property of each XmlElement. (__absIndex)</param>
            <param name="allChildNodes">Whether to include all nodes in ChildNodes collection. If false will only include nodes in the Children collection</param>
            <param name="ignoreTestRegionTags">Whether to ignore the test region tags when generating the xml document.</param>
            <returns>The generated XmlDocument.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.BuildXml(System.Xml.XmlDocument,System.Xml.XmlNode,ArtOfTest.WebAii.ObjectModel.Element,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build the xml under a parent node.
            </summary>
            <param name="doc">The root document.</param>
            <param name="parent">The parent node.</param>
            <param name="element">The element.</param>
            <param name="withAbsoluteIndex">Output absolute indexes.</param>
            <param name="allChildNodes">Use ChildNodes.</param>
            <param name="ignoreTestRegionTags">Ignore test region tags.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.Equals(System.Object)">
            <summary>
            Defines how two Elements should be compared.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True/False whether the two objects are equal.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetHashCode">
            <summary>
            Get the hash code for this Element.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetHashCode(ArtOfTest.WebAii.Core.FrameInfo)">
            <summary>
            Get the hash code for this Element and its frame container
            </summary>
            <param name="frame">The FrameInfo of the frame containing this element, or null if the element is not contained in a frame</param>
            <returns>A (hopefully) unique integer incorporating information about this element and the frame containing it</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.ToString">
            <summary>
            String representation of an Element.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.FriendlyName">
            <summary>
            Constructs a friendly name that represents this element.
            </summary>
            <returns>The string representation of this element.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.CreateLight(System.String,System.Int32)">
            <summary>
            Create an Element object with a specific tagname and index.
            </summary>
            <param name="tagName">The tagName</param>
            <param name="tagIndex">The tagIndex</param>
            <returns>A lightweight element of the specified tag name and index.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.IsTestRegion">
            <summary>
            Gets whether the element is a test region or not.
            This function has been added for performance reasons. We don't want to call the ElementType property
            since it will trigger the full initialization of types.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetDepth(System.Int32)">
            <summary>
            Sets the hierarchical depth of this element.
            </summary>
            <param name="depth"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.TechnologyType">
            <summary>
            Get the technology type.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.Match(ArtOfTest.Common.IFindExpression)">
            <summary>
            Match this expression against element.
            </summary>
            <param name="findExpr">The expression to use.</param>
            <returns>Returns true/false</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.AddChildNode(ArtOfTest.Common.ITargetElement)">
            <summary>
            Add this node as a child node.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.SetClosingTag(ArtOfTest.Common.ITargetElement)">
            <summary>
            Set the matching closing tag.
            </summary>
            <param name="closingElement">The closing tag</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetChildren">
            <summary>
            Get the children of this node.
            </summary>
            <returns>The list of children as an array.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetParent">
            <summary>
            Get the parent of this node.
            </summary>
            <returns>The parent node.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetHostParent">
            <summary>
            Returns the FRAME or IFRAME element containing this element's document, if one exists.
            </summary>
            <returns>The parent IFrame element this element is hosted in.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.ParsedElement">
            <summary>
            Returns the raw parsed element.
            </summary>
            <returns>The raw parsed element</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.Element.Host">
            <summary>
            Get the IAutomationHost associated with this element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.Element.GetUniqueHashCode">
            <summary>
            Calculates the hash code for this element.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindParamExtension">
            <summary>
            Class to extend the legacy FindParam class. Adds the ability to convert any legacy FindParam into a HtmlFindExpression.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParamExtension.ToExpression(ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Convert a FindParam legacy object to a HtmlFindExpression
            </summary>
            <param name="param">The FindParam to convert.</param>
            <returns>The converted HtmlFindExpression.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindParam">
            <summary>
            A class that defines how a search for an element should be conducted within a document.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._tagIndex">
            <summary>
            Tag Name Occurence
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._attributes">
            <summary>
            Attributes used for Identification
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._partialAttributes">
            <summary>
            Partial Attribute values
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._excludedAttributes">
            <summary>
            Exclude the following attributes.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._type">
            <summary>
            Find type
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._nodeIndexPath">
            <summary>
            If Hierarchal search, the path used to locate element
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._tagName">
            <summary>
            The tagName of the element identified
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._xpath">
            <summary>
            The XPath to use
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._findContentType">
            <summary>
            The content type to find when the find parameter is of type = content.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._expression">
            <summary>
            The HtmlFindExpression used
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindParam._contentValue">
            <summary>
            The content value if the find is of type content.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor">
            <summary>
            Create a new FindParam
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(System.String,System.Int32)">
            <summary>
            Create a new find parameter of Type=TagIndex
            </summary>
            <param name="tagName">The TagName to search for</param>
            <param name="occurrenceIndex">The occurrence index of the target tag (zero-based).</param> 
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Create a new find param of type. 
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(System.String,System.Int32,System.String[])">
            <summary>
            Create a new find parameter of Type=TagIndex with additional attributes to use to find the
            element or verify it.
            </summary>
            <param name="tagName">The TagName to search for.</param>
            <param name="occurrenceIndex">The occurrence index of the tag (Zero-Based). </param>
            <param name="attributesNameValuePairs">Any additional attributes to check for; both exact or partial</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(System.Int32[])">
            <summary>
            Create a new find parameter of Type=NodeIndexPath
            </summary>
            <param name="nodesIndexPath">The index path of the desired node</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(System.String[])">
            <summary>
            Create a new find parameter using name-value pairs of attributes.
            </summary>
            <param name="attributesNameValuePairs">The name value pairs. Example ("id=foo","style=~color:red"). 
            Use '=~' to indicate partial values.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(ArtOfTest.WebAii.ObjectModel.FindType,System.String,System.String[])">
            <summary>
            Create a new FindParam by explicitly specifying the FindType.
            </summary>
            <param name="type">The find type.</param>
            <param name="value">The value signifies the following depending on the type:
            Type=AttributesOnly:Value=(string.empty|tagName [When tagName is set, will match tagName in addition to attributes]),Type=NodeIndexPath:Value=(index path [i.e. "0/3/2/0"]),
            Type=XPath:Value=(xpath to use),Type=Content:Value=(content to use [i.e. "p:string"]) - default is FindContentType.TextContent,
            Type=TagIndex:Value(tagName:tagIndex [i.e. "input:3"]) 
            </param>
            <param name="attributesNameValuePairs">The attributes list, if any, else string.Empty.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.#ctor(ArtOfTest.WebAii.ObjectModel.FindType,System.String,System.String,System.String,System.Int32,System.String[])">
            <summary>
            Used internally to initialize this object.
            </summary>
            <param name="type">The type.</param>
            <param name="tagName">The tagName</param>
            <param name="xpath">The xpath</param>
            <param name="nodeIndexPath">The node index path</param>
            <param name="tagIndex">The tag index</param>
            <param name="attributes">The attributes list</param>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.TagName">
            <summary>
            Gets/Sets the tagName of the element this parameter identifies.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.XPath">
            <summary>
            Gets/Sets the XPath to use when Type=XPath.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.NodeIndexPath">
            <summary>
            Gets/Sets Hierarchal path from the reference element when Type=NodeIndexPath.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.Type">
            <summary>
            Gets/Sets the identification type to use to identify this element. (Default:TagIndex)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.ContentType">
            <summary>
            Gets/Sets the content type when the identification type is Content. 
            (Default:TextContent)
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.ContentValue">
            <summary>
            Gets/Sets the content value to find when type is Content. This can be a string
            to validate against or a regular expression. The content must start with:
            'l:' for exact match strings, 'p:' for partial strings  or 'x:' for regular expression
            matches. If none are provided the string will be matched using an exact match 'l:'.
            All searches are case-insensitive.
            <example>
            To find tags with innerText content is: 'foo bar'
            Example 1: 'l:foo bar'
            Example 2: 'p:foo'
            Example 3: 'x:foo\s*bar'
            </example>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.TagIndex">
            <summary>
            Gets/Sets tagName occurrence index when Type=TagIndex
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.Attributes">
            <summary>
            Gets/Sets the list of Attributes to use for identification.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.PartialAttributes">
            <summary>
            Gets/Sets the partial attribute values to use for identification.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.ExcludedAttributes">
            <summary>
            Gets/Sets the list of attribute to exclude for identification.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.SearchAttributes">
            <summary>
            <![CDATA[List of (partial & exact) attributes to use for identification.]]>
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.Constraints">
            <summary>
            Gets or sets a constraint for this FindParam
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.ObjectModel.FindParam.Expression">
            <summary>
            The HtmlFindExpression used if Type=Expression.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.LoadFromXml(System.String)">
            <summary>
            Load a FindParam from an xml persisted string.
            </summary>
            <param name="findParamXml">The string.</param>
            <returns>The FindParam object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.LoadFromFile(System.String)">
            <summary>
            Load a FindParam from a file.
            </summary>
            <param name="fileName">The file name to load the xml from.</param>
            <returns>The FindParam object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.NewExpr(System.String[])">
            <summary>
            Create a FindParam object from an expression.
            </summary>
            <param name="expression">The expression to use.</param>
            <returns>The FindParam as an expression.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.InternalLoad(System.IO.TextReader)">
            <summary>
            Create the object from a reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.Save(System.String)">
            <summary>
            Serialized and saves the current FindParam to a file. 
            You can later load that file using FindParam.Load().
            </summary>
            <param name="fileName">The file name to save to.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.ToXml">
            <summary>
            Serialize and return the current FindParam as a string.
            You can later use that string to create a FindParam using the .Load().
            </summary>
            <returns>The serialized Xml that represents this object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.SetAttributes(System.String[])">
            <summary>
            Used to initialize a list of parameter value pairs on a FindParam.
            </summary>
            <param name="nameValuePairs">The name value pairs.</param>
            <returns>The modified FindParam</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.SetTagName(System.String)">
            <summary>
            Sets the tag name and returns the updated FindParam.
            </summary>
            <param name="tagName">The set tagName</param>
            <returns>The modified FindParam</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.SetContent(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String)">
            <summary>
            Sets the content type and returns the updated FindParam.
            </summary>
            <param name="contentType">The content type.</param>
            <param name="contentValue">The content.</param>
            <returns>The modified FindParam</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.ToString">
            <summary>
            String representation of the FindParam.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.ObjectModel.FindParam.OnPropertyChanged(System.String)">
            <summary>
            Fire the property changed event.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="E:ArtOfTest.WebAii.ObjectModel.FindParam.PropertyChanged">
            <summary>
            Occurs when a property changes on this FindParam object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindType">
            <summary>
            Types of identification supported by the framework.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.NodeIndexPath">
            <summary>
            NodeIndexPath identification.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.TagIndex">
            <summary>
            Tag name occurrence identification.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.AttributesOnly">
            <summary>
            Identification using attributes only.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.XPath">
            <summary>
            Identification using XPath.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.Content">
            <summary>
            Identification using the content of the tag.
            Content can be (InnerText, InnerMarkup or OuterMarkup)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindType.Expression">
            <summary>
            Identification using an expression. An expression is the most
            powerful search and supports the ability to combine different search types
            into one expression.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.FindContentType">
            <summary>
            Types of identification of type=Content
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindContentType.InnerText">
            <summary>
            The inner text of a tag and all its children. (Element.InnerText).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindContentType.InnerMarkup">
            <summary>
            The inner markup of a tag. (Element.InnerMarkup).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindContentType.OuterMarkup">
            <summary>
            The outer markup of a tag. (Element.OuterMarkup).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindContentType.TextContent">
            <summary>
            Text content of the tag only without all its children. (Element.TextContent).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.FindContentType.StartTagContent">
            <summary>
            The raw start tag content. (Element.Content).
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.Quote">
            <summary>
            Types of quotes parsed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Quote.Single">
            <summary>
            A single quote. (')
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Quote.Double">
            <summary>
            A double quote. (")
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.Quote.None">
            <summary>
            No quotes.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.AttributeType">
            <summary>
            Type of attributes parsed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.AttributeType.Style">
            <summary>
            A style attribute. For example (<![CDATA[ <hr style="backgroundcolor:red;"> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.AttributeType.Event">
            <summary>
            An event attribute. For example (<![CDATA[ <hr onclick="myclick();"> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.AttributeType.Other">
            <summary>
            All other attributes except style or event.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.ElementType">
            <summary>
            The element type of an element within the Dom.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.CascadingStyleSheet">
            <summary>
            The element is a css style sheet. For example (<![CDATA[ <link type="text/css"> or <style></style> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Script">
            <summary>
            The element is a script. For example (<![CDATA[ <script></script> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Table">
            <summary>
            The element is a table. For example (<![CDATA[ <table></table> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Div">
            <summary>
            The element is a Div. For example (<![CDATA[ <div></div> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.FrameSet">
            <summary>
            The element is a Frameset. For example (<![CDATA[ <frameset></frameset> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Frame">
            <summary>
            The element is a Frame. For example (<![CDATA[ <frame></frame> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.IFrame">
            <summary>
            The element is an IFrame. For example (<![CDATA[ <iframe></iframe> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Anchor">
            <summary>
            The element is an anchor. For example (<![CDATA[ <a href="somefile.htm">click me</a> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Image">
            <summary>
            The element is an image. For example (<![CDATA[ <img></img> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Map">
            <summary>
            The element is an imagemap. For example (<![CDATA[ <map></map> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Link">
            <summary>
            The element is a link. For example (<![CDATA[ <link></link> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TestRegion">
            <summary>
            The element is a testregion. For example (<![CDATA[ <testregion id="foo"></testregion> or
            <!--testregion id="foo"--><!--/testregion--> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Select">
            <summary>
            The element is a select. For example (<![CDATA[ <select></select> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Input">
            <summary>
            The element is an input. For example (<![CDATA[ <input></input> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TextArea">
            <summary>
            The element is a textarea. For example (<![CDATA[ <textarea></textarea> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TableHeader">
            <summary>
            The element is a table header. For example (<![CDATA[ <th></th> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TableCell">
            <summary>
            The element is a table cell. For example (<![CDATA[ <td></td> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TableRow">
            <summary>
            The element is a table row. For example (<![CDATA[ <tr></tr> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.TableColumn">
            <summary>
            The element is a table column. For example (<![CDATA[ <col></col> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Form">
            <summary>
            The element is a form. For example (<![CDATA[ <form></form> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.OrderedList">
            <summary>
            The element is an ordered list. For example (<![CDATA[ <ol></ol> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.UnorderedList">
            <summary>
            The element is an unordered list. For example (<![CDATA[ <ul></ul> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.ListItem">
            <summary>
            The element is a list item. For example (<![CDATA[ <li></li> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Span">
            <summary>
            The element is a space. For example (<![CDATA[ <span></span> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Video">
            <summary>
            The element is a video. For example (<![CDATA[ <video></video> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Audio">
            <summary>
            The element is audio media. For example (<![CDATA[ <audio></audio> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Source">
            <summary>
            The element is a media source. For example (<![CDATA[ <source /> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementType.Other">
            <summary>
            Anything else.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.InputElementType">
            <summary>
            The types of input for an ElementType=Input.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.NotSet">
            <summary>
            Not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Button">
            <summary>
            type="button"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.CheckBox">
            <summary>
            type="checkbox"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.File">
            <summary>
            type="file"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Hidden">
            <summary>
            type="hidden"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Image">
            <summary>
            type="image"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Password">
            <summary>
            type="password"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Radio">
            <summary>
            type="radio"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Reset">
            <summary>
            type="reset"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Submit">
            <summary>
            type="submit"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Text">
            <summary>
            type="text". This is the default type if no type attribute is set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Email">
            <summary>
            type="email"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Url">
            <summary>
            type="url"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Number">
            <summary>
            type="number"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Range">
            <summary>
            type="range"
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.InputElementType.Search">
            <summary>
            type="search"
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.ObjectModel.ElementState">
            <summary>
            Possible element states
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementState.NotSet">
            <summary>
            State not set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementState.ProxyInitialized">
            <summary>
            The element was created using a Element(FindParam,Find) constructor
            instead of being created using the Find.Byxx
            Properties of this Element are not accessible until .Refresh or Refresh(bool)
            is called. You can also use the Element.Wait.Exists()/ExistsNot() to wait
            for this element to exist on the page.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementState.Initialized">
            <summary>
            The element is fully initialized. Created by Find.Byxxx
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.ObjectModel.ElementState.Light">
            <summary>
            The element is a light element created using the Element.CreateLight()/
            This is used by the recorder only.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.FindParamCollectionItemAddedEventArgs">
            <summary>
            FindParamCollection items added event args
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.FindParamCollectionItemAddedEventArgs.#ctor(System.String,ArtOfTest.WebAii.ObjectModel.FindParam)">
            <summary>
            Create a new event args.
            </summary>
            <param name="key">The key of the FindParam</param>
            <param name="param">The FindParam object.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.FindParamCollectionItemAddedEventArgs.Key">
            <summary>
            Gets the FindParam key.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.FindParamCollectionItemAddedEventArgs.FindParam">
            <summary>
            Gets the FindParam object added.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs">
            <summary>
            BrowserCommandEventArgs.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs._command">
            <summary>
            The command that contains the request.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs._id">
            <summary>
            The unique id of this command.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs.#ctor(ArtOfTest.WebAii.Messaging.Process.BrowserCommand,System.String)">
            <summary>
            Create a new BrowserRequestEventArgs.
            </summary>
            <param name="command">The request.</param>
            <param name="requestId">The unique request id.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs.Command">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.BrowserCommandEventArgs.Id">
            <summary>
            Gets the unique id of this command.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.ClientDisconnectedEventArgs">
            <summary>
            ClientDisconnectedEventArgs
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.ClientDisconnectedEventArgs._clientId">
            <summary>
            The client id that disconnected.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.ClientDisconnectedEventArgs.#ctor(System.String)">
            <summary>
            Create a new ClientDisconnectedEventArgs.
            </summary>
            <param name="clientId">The client unique id that disconnected.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.ClientDisconnectedEventArgs.ClientId">
            <summary>
            Gets the client unique id that disconnected.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs">
            <summary>
            ClientLogMessageEventArgs
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs._message">
            <summary>
            Message to log
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs._type">
            <summary>
            The log type to use.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs.#ctor(System.String)">
            <summary>
            Create a new ClientLogMessageEventArgs.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs.#ctor(ArtOfTest.WebAii.Core.LogType,System.String)">
            <summary>
            Create a new ClientLogMessageEventArgs
            </summary>
            <param name="type">The type of the log to execute.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs.Message">
            <summary>
            Gets message to log.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.ClientLogMessageEventArgs.LogType">
            <summary>
            Gets the log type to use.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs">
            <summary>
            LogWrite event argument.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs.#ctor(System.String,System.String)">
            <summary>
            Create a new LogWriteEventArgs object.
            </summary>
            <param name="message">The message to log.</param>
            <param name="messageNoTime">The message to log minus the time stamp.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs.Message">
            <summary>
            Gets the message being logged.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs.MessageWithoutTimeStamp">
            <summary>
            Gets the message without the time stampe.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.EventsArgs.ReturnedNullOrEmptyEventArgs">
            <summary>
            ReturnedNullOrEmpty event argument.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.EventsArgs.ReturnedNullOrEmptyEventArgs._findError">
            <summary>
            The object that contains the find error
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.EventsArgs.ReturnedNullOrEmptyEventArgs.#ctor(ArtOfTest.WebAii.Exceptions.ErrorData.FindError)">
            <summary>
            Create new ReturnedNullOrEmptyEventArgs
            </summary>
            <param name="findErrorData">The find error data object that contains
            information on the find error that results in a null or an empty list of elements
            to be returned.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.EventsArgs.ReturnedNullOrEmptyEventArgs.FindErrorData">
            <summary>
            Gets the FindErrorData object that contains information regarding the
            identification that caused this event.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.ArtOfTest_SLExtension">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.ExecutionStartingPage">
            <summary>
              Looks up a localized string similar to &lt;html&gt; 
            &lt;head&gt; 
            	&lt;title&gt;Telerik Test Studio&lt;/title&gt; 
            	&lt;script&gt;(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&amp;&amp;a.nodeType===1){var e=&quot;data-&quot;+c.replace(I,&quot;-$1&quot;).toLowerCase();d=a.getAttribute(e);if(typeof d==&quot;string&quot;){try{d=d===&quot;true&quot;?!0:d===&quot;false&quot;?!1:d===&quot;null&quot;?null:+d+&quot;&quot;===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b===&quot;data&quot;&amp;&amp;p.isEmptyObject(a[b]))continue;if(b! [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.MouseProxy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Properties.Resources.SocketClientAccessPolicy">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;access-policy&gt;
              &lt;cross-domain-access&gt;
                &lt;policy&gt;
                  &lt;allow-from&gt;
                    &lt;domain uri=&quot;*&quot; /&gt;
                  &lt;/allow-from&gt;
                  &lt;grant-to&gt;
                    &lt;socket-resource port=&quot;4502&quot; protocol=&quot;tcp&quot; /&gt;
                  &lt;/grant-to&gt;
                &lt;/policy&gt;
              &lt;/cross-domain-access&gt;
            &lt;/access-policy&gt;.
             </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the same polynomial
            used by Zip. This type is used internally by DotNetZip; it is generally not used
            directly by applications wishing to create, read, or manipulate zip archive
            files.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo.  This is a computation
            defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read, 
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
             
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number of bytes
             written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream
            open upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            The constructor allows the caller to specify how to handle the underlying
            stream at close.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream 
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            A constructor allowing the specification of the length of the stream to read.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream open
            upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            A constructor allowing the specification of the length of the stream to
            read, as well as whether to keep the underlying stream open upon Close().
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream 
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Crc">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.LeaveOpen">
            <summary>
            Indicates whether the underlying stream will be left open when the
            CrcCalculatorStream is Closed.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream. 
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation. 
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
             The DeflateStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read</c> and <c>Write</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is DEFLATE, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.".</para>
            
             <para>
             This class is similar to <see cref="T:ArtOfTest.WebAii.Zip.Zlib.ZlibStream"/>, except that <c>ZlibStream</c>
             adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see>
             framing bytes to a compressed stream when compressing, or expects the RFC1950
             framing bytes when decompressing. The <c>DeflateStream</c> does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream" />
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.GZipStream" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode)">
            <summary>
            Create a DeflateStream using the specified CompressionMode.
            </summary>
            
            <remarks> When mode is <c>CompressionMode.Compress</c>, the DeflateStream
            will use the default compression level. The "captive" stream will be closed
            when the DeflateStream is closed.  </remarks>
            
            <example>
            This example uses a DeflateStream to compress data from a file, and writes
            the compressed data to another file.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                {
                    using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n;
                        while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                        {
                            compressor.Write(buffer, 0, n);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                    Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                        Dim buffer As Byte() = New Byte(4096) {}
                        Dim n As Integer = -1
                        Do While (n &lt;&gt; 0)
                            If (n &gt; 0) Then
                                compressor.Write(buffer, 0, n)
                            End If
                            n = input.Read(buffer, 0, buffer.Length)
                        Loop
                    End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para> When mode is <c>CompressionMode.Decompress</c>, the level parameter
             is ignored.  The "captive" stream will be closed when the DeflateStream is
             closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress, 
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0) 
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,System.Boolean)">
             <summary>
             Create a DeflateStream using the specified CompressionMode, and explicitly specify 
             whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para> This constructor allows the application to request that the captive
             stream remain open after the deflation or inflation occurs.  By default,
             after Close() is called on the stream, the captive stream is also closed. In
             some cases this is not desired, for example if the stream is a memory stream
             that will be re-read after compression.  Specify true for the leaveOpen
             parameter to leave the stream open.  </para>
            
             <para>
             The DeflateStream will use the default compression level.
             </para>
             <para>
             See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the 
             "captive" stream in other places in this documentation.</param>
            
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Boolean)">
             <summary> Create a DeflateStream using the specified CompressionMode and the
             specified CompressionLevel, and explicitly specify whether the stream should
             be left open after Deflation or Inflation.  </summary>
            
             <remarks>
            
             <para>
             When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored. 
             </para>
            
             <para>
             This constructor allows the application to request that the captive stream
             remain open after the deflation or inflation occurs.  By default, after Close()
             is called on the stream, the captive stream is also closed. In some cases this
             is not desired, for example if the stream is a <see
             cref="T:System.IO.MemoryStream"/> that will be re-read after compression.  Specify
             true for the leaveOpen parameter to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
             This example shows how to use a DeflateStream to compress data from a file, and store
             the compressed data into another file.
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0) 
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.BufferSize">
             <summary>
             The size of the working buffer for the compression codec. 
             </summary>
            
             <remarks>
             <para>
             The working buffer is used for all stream operations.  The default size is 1024 bytes.
             The minimum size is 128 bytes. You may get better performance with a larger buffer.
             Then again, you might not.  You would have to test it.
             </para>
            
             <para>
             Set this before the first call to Read()  or Write() on the stream. If you try to set it 
             afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Strategy">
            <summary>The ZLIB strategy to be used during compression.</summary>
            <remarks>By tweaking this parameter, you may be able to optimize the compression for 
            data with particular characteristics.</remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.  
            </summary>
            <remarks>
            This may or may not result in a Close() call on the captive stream. 
            See the constructors that have a leaveOpen parameter for more information.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Position">
            <summary>
            The position of the stream pointer. 
            </summary>
            <remarks>
            Writing this property always throws a NotImplementedException. Reading will
            return the total bytes written out, if used in writing, or the total bytes 
            read in, if used in reading.   The count may refer to compressed bytes or 
            uncompressed bytes, depending on how you've used the stream.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream. 
             </summary>
             <remarks>
            
             <para> If you wish to use the DeflateStream to compress data while reading,
             you can create a DeflateStream with CompressionMode.Compress, providing an
             uncompressed data stream.  Then call Read() on that DeflateStream, and the
             data read will be compressed as you read.  If you wish to use the
             DeflateStream to decompress data while reading, you can create a
             DeflateStream with CompressionMode.Decompress, providing a readable
             compressed data stream.  Then call Read() on that DeflateStream, and the
             data read will be decompressed as you read.  </para>
            
             <para>
             A DeflateStream can be used for Read() or Write(), but not both. 
             </para>
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the DeflateStream to compress data while writing, you can
            create a DeflateStream with CompressionMode.Compress, and a writable output
            stream.  Then call Write() on that DeflateStream, providing uncompressed
            data as input.  The data sent to the output stream will be the compressed
            form of the data written.  If you wish to use the DeflateStream to
            decompress data while writing, you can create a DeflateStream with
            CompressionMode.Decompress, and a writable output stream.  Then call Write()
            on that stream, providing previously compressed data. The data sent to the
            output stream will be the decompressed form of the data written.
            </para>
            <para>
            A DeflateStream can be used for Read() or Write(), but not both. 
            </para>
            </remarks>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CompressString(System.String)">
            <summary>
            Compress a string into a byte array.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])"/>
            <param name="s">
            A string to compress.  The string will first be encoded
            using UTF8, then compressed.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
            <summary>
            Compress a byte array into a new byte array.
            </summary>
            <remarks>
            Uncompress it with <see cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
            </remarks>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CompressString(System.String)"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>
            <param name="b">
            A buffer to compress. 
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])">
            <summary>
            Uncompress a byte array into a single string.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CompressString(System.String)"/>
            <param name="compressed">
            A buffer containing GZIP-compressed data.  
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
            <summary>
            Uncompress a byte array into a byte array.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.CompressBuffer(System.Byte[])"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.DeflateStream.UncompressString(System.Byte[])"/>
            <param name="compressed">
            A buffer containing ZLIB-compressed data.  
            </param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.GZipStream">
             <summary>
             A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
             The GZipStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see 
             cref="T:System.IO.Stream"/>.  It adds GZIP compression or decompression to any stream.
             </para>
            
             <para> Like the <c>Compression.GZipStream</c> in the .NET Base
             Class Library, the Ionic.Zlib.GZipStream can compress while writing, or decompress
             while reading, but not vice versa.  The compression method used is GZIP, which is
             documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC 1952</see>,
             "GZIP file format specification version 4.3".</para>
            
             <para> A GZipStream can be used to decompress data (through Read()) or to compress
             data (through Write()), but not both.  </para>
            
             <para> If you wish to use the GZipStream to compress data, you must wrap it around a
             write-able stream. As you call Write() on the GZipStream, the data will be
             compressed into the GZIP format.  If you want to decompress data, you must wrap the
             GZipStream around a readable stream that contains an IETF RFC 1952-compliant stream.
             The data will be decompressed as you call Read() on the GZipStream.  </para>
            
             <para> Though the GZIP format allows data from multiple files to be concatenated
             together, this stream handles only a single segment of GZIP format, typically
             representing a single file.  </para>
            
             <para>
             This class is similar to <see cref="T:ArtOfTest.WebAii.Zip.Zlib.ZlibStream"/> and <see cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream"/>.
             <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream"/>
             handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream" />
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.ZlibStream" />
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Comment">
             <summary>
             The Comment on the GZIP stream.
             </summary>
             <remarks>
             <para>
             The GZIP format allows for each file to optionally have an associated comment stored with the
             file.  The comment is encoded with the ISO-8859-1 code page.  To include a comment in
             a GZIP stream you create, set this property before calling Write() for the first time
             on the GZipStream.  
             </para>
            
             <para>
             When using GZipStream to decompress, you can retrieve this property after the first
             call to Read().  If no comment has been set in the GZIP bytestream, the Comment
             property will return null (Nothing in VB).
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.FileName">
            <summary>
            The FileName for the GZIP stream.
            </summary>
            <remarks>
            <para>
            The GZIP format optionally allows each file to have an associated filename.  When
            compressing data (through Write()), set this FileName before calling Write() the first
            time on the GZipStream.  The actual filename is encoded into the GZIP bytestream with
            the ISO-8859-1 code page, according to RFC 1952. It is the application's responsibility to 
            insure that the FileName can be encoded and decoded correctly with this code page. 
            </para>
            <para>
            When decompressing (through Read()), you can retrieve this value any time after the
            first Read().  In the case where there was no filename encoded into the GZIP
            bytestream, the property will return null (Nothing in VB).
            </para>
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.GZipStream.LastModified">
             <summary>
             The last modified time for the GZIP stream.
             </summary>
            
             <remarks> GZIP allows the storage of a last modified time with each GZIP entry.
             When compressing data, you can set this before the first call to Write().  When
             decompressing, you can retrieve this value any time after the first call to
             Read().  </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream. 
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode)">
             <summary>
             Create a GZipStream using the specified CompressionMode. 
             </summary>
             <remarks>
            
             <para> When mode is <c>CompressionMode.Compress</c>, the GZipStream will use the
             default compression level.  </para>
            
             <para> As noted in the class documentation, the CompressionMode (Compress or
             Decompress) also establishes the "direction" of the stream.  A GZipStream with
             CompressionMode.Compress works only through Write().  A GZipStream with
             CompressionMode.Decompress works only through Read().  </para>
            
             </remarks>
            
             <example>
             This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0) 
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
             
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel)">
             <summary>
             Create a GZipStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
             <remarks>
            
             <para>
             The CompressionMode (Compress or Decompress) also establishes the "direction" of the
             stream.  A GZipStream with CompressionMode.Compress works only through Write().  A
             GZipStream with CompressionMode.Decompress works only through Read().
             </para>
            
             </remarks>
            
             <example>
             This example shows how to use a GZipStream to compress a file into a .gz file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress, 
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,System.Boolean)">
             <summary>
             Create a GZipStream using the specified CompressionMode, and explicitly
             specify whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
             <para>
             This constructor allows the application to request that the captive stream
             remain open after the deflation or inflation occurs.  By default, after
             Close() is called on the stream, the captive stream is also closed. In some
             cases this is not desired, for example if the stream is a memory stream that
             will be re-read after compressed data has been written to it.  Specify true
             for the leaveOpen parameter to leave the stream open.
             </para>
             
             <para>
             The <see cref="T:ArtOfTest.WebAii.Zip.Zlib.CompressionMode"/> (Compress or Decompress) also establishes
             the "direction" of the stream.  A GZipStream with
             <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
             with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
             <para>
             The GZipStream will use the default compression level. If you want to
             specify the compression level, see <see cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
             <para>
             See the other overloads of this constructor for example code.
             </para>
             </remarks>
             <param name="stream">The stream which will be read or written. This is called the 
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the base stream to remain open after inflation/deflation.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a GZipStream using the specified CompressionMode and the specified CompressionLevel,
            and explicitly specify whether the stream should be left open after Deflation or Inflation.
            </summary>
            <remarks>
            <para>
            This constructor allows the application to request that the captive stream remain open after
            the deflation or inflation occurs.  By default, after Close() is called on the stream, the 
            captive stream is also closed. In some cases this is not desired, for example if the stream 
            is a memory stream that will be re-read after compressed data has been written to it.  Specify true for the 
            leaveOpen parameter to leave the stream open. 
            </para>
            <para>
            As noted in the class documentation, 
            the CompressionMode (Compress or Decompress) also establishes the "direction" of the stream.  
            A GZipStream with CompressionMode.Compress works only through Write().  A GZipStream with 
            CompressionMode.Decompress works only through Read().
            </para>
            </remarks>
            <example>
            This example shows how to use a DeflateStream to compress data.
            <code>
            using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
            {
                using (var raw = System.IO.File.Create(outputFile))
                {
                    using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                    {
                        byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                        int n;
                        while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                        {
                            compressor.Write(buffer, 0, n);
                        }
                    }
                }
            }
            </code>
            <code lang="VB">
            Dim outputFile As String = (fileToCompress &amp; ".compressed")
            Using input As Stream = File.OpenRead(fileToCompress)
                Using raw As FileStream = File.Create(outputFile)
                Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                    Dim buffer As Byte() = New Byte(4096) {}
                    Dim n As Integer = -1
                    Do While (n &lt;&gt; 0)
                        If (n &gt; 0) Then
                            compressor.Write(buffer, 0, n)
                        End If
                        n = input.Read(buffer, 0, buffer.Length)
                    Loop
                End Using
                End Using
            End Using
            </code>
            </example>
            <param name="stream">The stream which will be read or written.</param>
            <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
            <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.BufferSize">
             <summary>
             The size of the working buffer for the compression codec. 
             </summary>
            
             <remarks>
             <para>
             The working buffer is used for all stream operations.  The default size is 1024 bytes.
             The minimum size is 128 bytes. You may get better performance with a larger buffer.
             Then again, you might not.  You would have to test it.
             </para>
            
             <para>
             Set this before the first call to Read()  or Write() on the stream. If you try to set it 
             afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.  
            </summary>
            <remarks>
            This may or may not result in a Close() call on the captive stream. 
            See the ctor's with leaveOpen parameters for more information.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Position">
            <summary>
            The position of the stream pointer. 
            </summary>
            <remarks>
            Writing this property always throws a NotImplementedException. Reading will
            return the total bytes written out, if used in writing, or the total bytes 
            read in, if used in reading.   The count may refer to compressed bytes or 
            uncompressed bytes, depending on how you've used the stream.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read and decompress data from the source stream.
            </summary>
            <remarks>
            With a GZipStream, decompression is done through reading.
            </remarks>
            <example>
            <code>
            byte[] working = new byte[WORKING_BUFFER_SIZE];
            using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
            {
                using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                {
                    using (var output = System.IO.File.Create(_DecompressedFile))
                    {
                        int n;
                        while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                        {
                            output.Write(working, 0, n);
                        }
                    }
                }
            }
            </code>
            </example>
            <param name="buffer">The buffer into which the decompressed data should be placed.</param>
            <param name="offset">the offset within that data array to put the first byte read.</param>
            <param name="count">the number of bytes to read.</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream. 
            </summary>
            <remarks>
            <para>
            If you wish to use the GZipStream to compress data while writing, you can create a
            GZipStream with CompressionMode.Compress, and a writable output stream.  Then call
            Write() on that GZipStream, providing uncompressed data as input.  The data sent
            to the output stream will be the compressed form of the data written.  
            </para>
            <para>
            A GZipStream can be used for Read() or Write(), but not both. Writing implies compression. 
            Reading implies decompression.
            </para>
            </remarks>
            <param name="buffer">The buffer holding data to write to the stream.</param>
            <param name="offset">the offset within that data array to find the first byte to write.</param>
            <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CompressString(System.String)">
            <summary>
            Compress a string into a byte array.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            <param name="s">
            A string to compress.  The string will first be encoded
            using UTF8, then compressed.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])">
            <summary>
            Compress a byte array into a new byte array.
            </summary>
            <remarks>
            Uncompress it with <see cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
            </remarks>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CompressString(System.String)"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            <param name="b">
            A buffer to compress. 
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressString(System.Byte[])">
            <summary>
            Uncompress a byte array into a single string.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CompressString(System.String)"/>
            <param name="compressed">
            A buffer containing GZIP-compressed data.  
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
            <summary>
            Uncompress a byte array into a byte array.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            <param name="compressed">
            A buffer containing ZLIB-compressed data.  
            </param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.   
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream. 
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-setp between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.SharedUtils.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.Adler">
            <summary>
            Computes an Adler-32 checksum. 
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less
            reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
            is a required part of the "ZLIB" standard.  Applications will almost never need to
            use this class directly.
            </remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.#ctor(ArtOfTest.WebAii.Zip.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.Inflate(ArtOfTest.WebAii.Zip.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_NO_FLUSH);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(ZlibConstants.Z_FINISH);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(ZlibConstants.Z_NO_FLUSH);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(ZlibConstants.Z_FINISH);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeDeflate(ArtOfTest.WebAii.Zip.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeDeflate(ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeDeflate(ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.InitializeDeflate(ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.Deflate(ArtOfTest.WebAii.Zip.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(ZlibConstants.Z_NO_FLUSH);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(ZlibConstants.Z_FINISH);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.SetDeflateParams(ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read</c> and <c>Write</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.  
             </para>
            
             <para>
             This class is similar to <see cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:ArtOfTest.WebAii.Zip.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.DeflateStream" />
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zlib.GZipStream" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode)">
             <summary>
             Create a ZlibStream using the specified CompressionMode.
             </summary>
             <remarks>
            
             <para> When mode is <c>CompressionMode.Compress</c>, the ZlibStream will use
             the default compression level. The "captive" stream will be closed when the
             ZlibStream is closed.</para>
            
             </remarks>
            
             <example>
             This example uses a ZlibStream to compress a file, and writes the compressed 
             data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel)">
             <summary>
             Create a ZlibStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
             When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             The "captive" stream will be closed when the ZlibStream is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a ZlibStream to compress data from a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress, 
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,System.Boolean)">
             <summary>
             Create a ZlibStream using the specified CompressionMode, and explicitly specify 
             whether the captive stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para> When mode is <c>CompressionMode.Compress</c>, the ZlibStream will use
             the default compression level.  </para>
            
             <para>
             This constructor allows the application to request that the captive stream
             remain open after the deflation or inflation occurs.  By default, after Close()
             is called on the stream, the captive stream is also closed. In some cases this
             is not desired, for example if the stream is a <see
             cref="T:System.IO.MemoryStream"/> that will be re-read after compression.  Specify
             true for the leaveOpen parameter to leave the stream open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
             
             </remarks>
             
             <param name="stream">The stream which will be read or written. This is called the 
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zlib.CompressionMode,ArtOfTest.WebAii.Zip.Zlib.CompressionLevel,System.Boolean)">
             <summary>
             Create a ZlibStream using the specified CompressionMode and the specified
             CompressionLevel, and explicitly specify whether the stream should be left open
             after Deflation or Inflation.
             </summary>
             
             <remarks>
            
             <para>
             This constructor allows the application to request that the captive stream
             remain open after the deflation or inflation occurs.  By default, after Close()
             is called on the stream, the captive stream is also closed. In some cases this
             is not desired, for example if the stream is a <see
             cref="T:System.IO.MemoryStream"/> that will be re-read after compression.  Specify
             true for the leaveOpen parameter to leave the stream open.
             </para>
            
             <para>
             When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored. 
             </para>
            
             </remarks>
             
             <example>
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is effective only when
             mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.  
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.BufferSize">
             <summary>
             The size of the working buffer for the compression codec. 
             </summary>
            
             <remarks>
             <para>
             The working buffer is used for all stream operations.  The default size is 1024 bytes.
             The minimum size is 128 bytes. You may get better performance with a larger buffer.
             Then again, you might not.  You would have to test it.
             </para>
            
             <para>
             Set this before the first call to Read()  or Write() on the stream. If you try to set it 
             afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.  
            </summary>
            <remarks>
            This may or may not result in a Close() call on the captive stream. 
            See the constructors that have a leaveOpen parameter for more information.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Position">
            <summary>
            The position of the stream pointer. 
            </summary>
            <remarks>
            Writing this property always throws a NotImplementedException. Reading will
            return the total bytes written out, if used in writing, or the total bytes 
            read in, if used in reading.   The count may refer to compressed bytes or 
            uncompressed bytes, depending on how you've used the stream.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream. 
             </summary>
            
             <remarks>
            
             <para>
             If you wish to use the ZlibStream to compress data while reading, you can create a
             ZlibStream with CompressionMode.Compress, providing an uncompressed data stream.  Then
             call Read() on that ZlibStream, and the data read will be compressed.  If you wish to
             use the ZlibStream to decompress data while reading, you can create a ZlibStream with
             CompressionMode.Decompress, providing a readable compressed data stream.  Then call
             Read() on that ZlibStream, and the data will be decompressed as it is read.
             </para>
            
             <para>
             A ZlibStream can be used for Read() or Write(), but not both. 
             </para>
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream. 
             </summary>
            
             <remarks>
            
             <para>
             If you wish to use the ZlibStream to compress data while writing, you can create a
             ZlibStream with CompressionMode.Compress, and a writable output stream.  Then call
             Write() on that ZlibStream, providing uncompressed data as input.  The data sent to
             the output stream will be the compressed form of the data written.  If you wish to use
             the ZlibStream to decompress data while writing, you can create a ZlibStream with
             CompressionMode.Decompress, and a writable output stream.  Then call Write() on that
             stream, providing previously compressed data. The data sent to the output stream will
             be the decompressed form of the data written.
             </para>
            
             <para>
             A ZlibStream can be used for Read() or Write(), but not both. 
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CompressString(System.String)">
            <summary>
            Compress a string into a byte array.
            </summary>
            <remarks>
            Uncompress it with <see cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
            </remarks>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            <param name="s">
            A string to compress.  The string will first be encoded
            using UTF8, then compressed.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
            <summary>
            Compress a byte array into a new byte array.
            </summary>
            <remarks>
            Uncompress it with <see cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
            </remarks>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CompressString(System.String)"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            <param name="b">
            A buffer to compress. 
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressString(System.Byte[])">
            <summary>
            Uncompress a byte array into a single string.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CompressString(System.String)"/>
            <param name="compressed">
            A buffer containing ZLIB-compressed data.  
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
            <summary>
            Uncompress a byte array into a byte array.
            </summary>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            <param name="compressed">
            A buffer containing ZLIB-compressed data.  
            </param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm">
             <summary>
             An enum that provides the various encryption algorithms supported by this
             library.
             </summary>
            
             <remarks>
            
             <para>
             PkzipWeak implies the use of Zip 2.0 encryption, which is known to be weak and
             subvertible.
             </para>
            
             <para>
             A note on interoperability: Values of PkzipWeak and None are specified in <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
             specification</see>, and are considered to be "standard".  Zip archives produced
             using these options will be interoperable with many other zip tools and libraries,
             including Windows Explorer.
             </para>
            
             <para>
             Values of <c>WinZipAes128</c> and <c>WinZipAes256</c> are not part of the Zip
             specification, but rather imply the use of a vendor-specific extension from
             WinZip. If you want to produce interoperable Zip archives, do not use these values.
             For example, if you produce a zip archive using WinZipAes256, you will be able to
             open it in Windows Explorer on Windows XP and Vista, but you will not be able to
             extract entries; trying this will lead to an "unspecified error". For this reason,
             some people have said that a zip archive that uses WinZip's AES encryption is not
             actually a zip archive at all.  A zip archive produced this way will be readable
             with the WinZip tool (Version 11 and beyond).
             </para>
            
             <para>
             There are other third-party tools and libraries, both commercial and otherwise, that
             support WinZip's AES encryption. These will be able to read AES-encrypted zip
             archives produced by DotNetZip, and conversely applications that use DotNetZip to
             read zip archives will be able to read AES-encrypted archives produced by those
             tools or libraries.  Consult the documentation for those other tools and libraries
             to find out if WinZip's AES encryption is supported.
             </para>
            
             <para>
             In case you care: According to <see href="http://www.winzip.com/aes_info.htm">the
             WinZip specification</see>, the actual AES key used is derived from the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password"/> via an algorithm that complies with <see
             href="http://www.ietf.org/rfc/rfc2898.txt">RFC 2898</see>, using an iteration count
             of 1000.  The algorithm is sometimes referred to as PBKDF2, which stands for
             "Password Based Key Derivation Function #2".
             </para>
            
             <para>
             A word about password strength and length: The AES encryption technology is very
             good, but any system is only as secure as the weakest link.  If you want to
             secure your data, be sure to use a password that is hard to guess.  To make it
             harder to guess (increase its "entropy"), you should make it longer.  If you use
             normal characters from an ASCII keyboard, a password of length 20 will be strong
             enough that it will be impossible to guess.  For more information on that, I'd
             encourage you to read <see
             href="http://www.redkestrel.co.uk/Articles/RandomPasswordStrength.html">this
             article.</see>
             </para>
            
             <para>
             The WinZip AES algorithms are not supported with the version of DotNetZip that
             runs on the .NET Compact Framework.  This is because .NET CF lacks the
             HMACSHA1 class that is required for producing the archive.
             </para>
             </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption at all.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.PkzipWeak">
            <summary>
            Traditional or Classic pkzip encryption.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.Unsupported">
            <summary>
            An encryption algorithm that is not supported by DotNetZip.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ReReadApprovalCallback">
            <summary>
            Delegate for the callback by which the application gives approval for multiple
            reads of the file stream. This callback is called only when the initial 
            compression operation inflates the size of the file data. 
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.WantCompressionCallback">
            <summary>
            Delegate for the callback by which the application tells the libraary whether
            to use compression on the file or not.  
            </summary>
            <remarks>
            <para>
            Using this callback, the application can 
            specify that previously-compressed files (.mp3, .png, .docx, etc) should 
            not be compressed, for example, or can turn on or off compression based on any 
            other factor.
            </para>
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType">
            <summary>
            In an EventArgs type, indicates which sort of progress event is being reported. 
            </summary>
            <remarks>
            There are events for reading, events for saving, and events for extracting. 
            </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Adding_Started">
            <summary>
            Indicates that a Add() operation has started.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Adding_AfterAddEntry">
            <summary>
            Indicates that an individual entry in the archive has been added.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Adding_Completed">
            <summary>
            Indicates that a Add() operation has completed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Reading_Started">
            <summary>
            Indicates that a Read() operation has started.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Reading_BeforeReadEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be read.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Reading_AfterReadEntry">
            <summary>
            Indicates that an individual entry in the archive has just been read.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Reading_Completed">
            <summary>
            Indicates that a Read() operation has completed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Reading_ArchiveBytesRead">
            <summary>
            The given event reports the number of bytes read so far
            during a Read() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_Started">
            <summary>
            Indicates that a Save() operation has started.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_BeforeWriteEntry">
            <summary>
            Indicates that an individual entry in the archive is about to be written.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterWriteEntry">
            <summary>
            Indicates that an individual entry in the archive has just been saved.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_Completed">
            <summary>
            Indicates that a Save() operation has completed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterSaveTempArchive">
            <summary>
            Indicates that the zip archive has been created in a
            temporary location during a Save() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_BeforeRenameTempArchive">
            <summary>
            Indicates that the temporary file is about to be renamed to the final archive 
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterRenameTempArchive">
            <summary>
            Indicates that the temporary file is has just been renamed to the final archive 
            name during a Save() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterCompileSelfExtractor">
            <summary>
            Indicates that the self-extracting archive has been compiled
            during a Save() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_EntryBytesRead">
            <summary>
            The given event is reporting the number of source bytes that have run through the compressor so far
            during a Save() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_BeforeExtractEntry">
            <summary>
            Indicates that an entry is about to be extracted. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_AfterExtractEntry">
            <summary>
            Indicates that an entry has just been extracted. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite">
            <summary>
            Indicates that extraction of an entry would overwrite an existing filesystem file. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_EntryBytesWritten">
            <summary>
            The given event is reporting the number of bytes written so far for the current entry
            during an Extract() operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_BeforeExtractAll">
            <summary>
            Indicates that an ExtractAll operation is about to begin.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_AfterExtractAll">
            <summary>
            Indicates that an ExtractAll operation has completed.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Error_Saving">
            <summary>
            Indicates that an error has occurred while saving a zip file. 
            This generally means the file cannot be opened, because it has been
            removed, or because it is locked by another process.  It can also 
            mean that the file cannot be Read, because of a range lock conflict. 
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs">
            <summary>
            Provides information about the progress of a save, read, or extract operation. 
            This is a base class; you will probably use one of the classes derived from this one.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.EntriesTotal">
            <summary>
            The total number of entries to be saved or extracted.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.CurrentEntry">
            <summary>
            The name of the last entry saved or extracted.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.Cancel">
            <summary>
            In an event handler, set this to cancel the save or extract 
            operation that is in progress.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.EventType">
            <summary>
            The type of event being reported.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.ArchiveName">
            <summary>
            Returns the archive name associated to this event.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes read or written so far for this entry.  
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.TotalBytesToTransfer">
            <summary>
            Total number of bytes that will be read or written for this entry.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs">
            <summary>
            Provides information about the progress of a Read operation.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.AddProgressEventArgs">
            <summary>
            Provides information about the progress of a Add operation.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.SaveProgressEventArgs">
            <summary>
            Provides information about the progress of a save operation.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SaveProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,ArtOfTest.WebAii.Zip.Zip.ZipEntry)">
            <summary>
            Constructor for the SaveProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesSaved">Number of entries that have been saved.</param>
            <param name="entry">The entry involved in the event.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.SaveProgressEventArgs.EntriesSaved">
            <summary>
            Number of entries saved so far.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ExtractProgressEventArgs">
            <summary>
            Provides information about the progress of the extract operation.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ExtractProgressEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.Int32,ArtOfTest.WebAii.Zip.Zip.ZipEntry,System.String)">
            <summary>
            Constructor for the ExtractProgressEventArgs.
            </summary>
            <param name="archiveName">the name of the zip archive.</param>
            <param name="before">whether this is before saving the entry, or after</param>
            <param name="entriesTotal">The total number of entries in the zip archive.</param>
            <param name="entriesExtracted">Number of entries that have been extracted.</param>
            <param name="entry">The entry involved in the event.</param>
            <param name="extractLocation">The location to which entries are extracted.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ExtractProgressEventArgs.EntriesExtracted">
            <summary>
            Number of entries extracted so far.  This is set only if the 
            EventType is Extracting_BeforeExtractEntry or Extracting_AfterExtractEntry, and 
            the Extract() is occurring witin the scope of a call to ExtractAll().
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ExtractProgressEventArgs.ExtractLocation">
            <summary>
            Returns the extraction target location, a filesystem path. 
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipErrorEventArgs">
            <summary>
            Provides information about the an error that occurred while zipping. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipErrorEventArgs.Exception">
            <summary>
            Returns the exception that occurred, if any.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipErrorEventArgs.FileName">
            <summary>
            Returns the name of the file that caused the exception, if any.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.BadPasswordException">
            <summary>
            Issued when an <c>ZipEntry.ExtractWithPassword()</c> method is invoked
            with an incorrect password.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadPasswordException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadPasswordException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.BadReadException">
            <summary>
            Indicates that a read was attempted on a stream, and bad or incomplete data was
            received.  
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadReadException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadReadException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadReadException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.BadCrcException">
            <summary>
            Issued when an CRC check fails upon extracting an entry from a zip archive.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadCrcException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadCrcException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.SfxGenerationException">
            <summary>
            Issued when errors occur saving a self-extracting archive.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SfxGenerationException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SfxGenerationException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.BadStateException">
            <summary>
            Indicates that an operation was attempted on a ZipFile which was not possible
            given the state of the instance. For example, if you call <c>Save()</c> on a ZipFile 
            which has no filename set, you can get this exception. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadStateException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadStateException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadStateException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.BadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
            <summary>
            Base class for all exceptions defined by and throw by the Zip library.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipException.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipException.#ctor(System.String)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="message">The message in the exception.</param>
            <param name="innerException">The innerException for this exception.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Come on, you know how exceptions work. Why are you looking at this documentation?
            </summary>
            <param name="info">The serialization info for the exception.</param>
            <param name="context">The streaming context from which to deserialize.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction">
             <summary>
             An enum for the options when extracting an entry would overwrite an existing file. 
             </summary>
             
             <remarks>
               <para>
                 This enum describes the actions that the library can take when an
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> method is called to extract an
                 entry to a filesystem, and the extraction would overwrite an existing filesystem
                 file.
               </para>
             </remarks>
            
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction.Throw">
            <summary>
            Throw an exception when extraction would overwrite an existing file. (For
            COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction.OverwriteSilently">
            <summary>
            When extraction would overwrite an existing file, overwrite the file silently.
            The overwrite will happen even if the target file is marked as read-only.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction.DoNotOverwrite">
            <summary>
            When extraction would overwrite an existing file, don't overwrite the file, silently. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction.InvokeExtractProgressEvent">
            <summary>
            When extraction would overwrite an existing file, invoke the ExtractProgress
            event, using an event type of <see
            cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite"/>.  In
            this way, the application can decide, just-in-time, whether to overwrite the
            file. For example, a GUI application may wish to pop up a dialog to allow
            the user to choose. You may want to examine the <see
            cref="P:ArtOfTest.WebAii.Zip.Zip.ExtractProgressEventArgs.ExtractLocation"/> property before making
            the decision. If, after your processing in the Extract progress event, you
            want to NOT extract the file, set <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
            on the <c>ZipProgressEventArgs.CurrentEntry</c> to <c>DoNotOverwrite</c>.
            If you do want to extract the file, set <c>ZipEntry.ExtractExistingFile</c>
            to <c>OverwriteSilently</c>.  If you want to cancel the Extraction, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            DoNotOverwrite in that a cancel will not extract any further entries, if
            there are any.  (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.SharedUtilities">
            <summary>
            Collects general purpose utility methods.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SharedUtilities.#ctor">
            private null constructor
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SharedUtilities.TrimVolumeAndSwapSlashes(System.String)">
            <summary>
            Utility routine for transforming path names. 
            </summary>
            <param name="pathName">source path.</param>
            <returns>transformed path</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SharedUtilities.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds a signature in the zip stream. This is useful for finding 
            the end of a zip entry, for example. 
            </summary>
            <param name="stream"></param>
            <param name="SignatureToFind"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SharedUtilities.GetTempFilename">
            <summary>
            Return a random filename, suitable for use as a temporary file.
            </summary>
            <remarks>
            The System.IO.Path.GetRandomFileName() method is not available on the Compact
            Framework, so this library provides its own substitute. 
            </remarks>
            <returns>a filename of the form DotNetZip-xxxxxxxx.tmp, where xxxxxxxx is replaced 
            by randomly chosen characters.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.SharedUtilities.ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Workitem 7889: handle ERROR_LOCK_VIOLATION during read
            </summary>
            <remarks>
            This could be gracefully handled with an extension attribute, but
            This assembly is built for .NET 2.0, so I cannot use them. 
            </remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.CountingStream">
            <summary> 
            A Stream wrapper, used for bookkeeping on input or output
            streams.  In some cases, it is not possible to get the Position
            of a stream, let's say, on a write-only output stream like
            ASP.NET's Response.Output, or on a different write-only stream
            provided as the destination for the zip by the application.
            In this case, we can use this counting stream to count the bytes
            read or written.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.CountingStream.#ctor(System.IO.Stream)">
            <summary>
            The  constructor.
            </summary>
            <param name="s">The underlying stream</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipCrypto">
            <summary> 
            This class implements the "traditional" or "classic" PKZip encryption,
            which today is considered to be weak. On the other hand it is
            ubiquitous. This class is intended for use only by the DotNetZip library.
            </summary>
            <remarks>
            Most uses of the DotNetZip library will not involve direct calls into the
            ZipCrypto class.  Instead, the ZipCrypto class is instantiated and used by
            the ZipEntry() class when encryption or decryption on an entry is employed.
            If for some reason you really wanted to use a weak encryption algorithm
            in some other application, you might use this library.  But you would be much
            better off using one of the built-in strong encryption libraries in the 
            .NET Framework, like the AES algorithm or SHA. 
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipCrypto.#ctor">
             <summary>
             The default constructor for ZipCrypto.
             </summary>
            
             <remarks>
             This class is intended for internal use by the library only. It's probably not useful to you. Seriously.
             Stop reading this documentation.  It's a waste of your time.  Go do something else.
             Check the football scores. Go get an ice cream with a friend.  Seriously.
             </remarks>
             
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipCrypto.MagicByte">
            <summary> 
            From AppNote.txt:
            unsigned char decrypt_byte()
                local unsigned short temp
                temp :=- Key(2) | 2
                decrypt_byte := (temp * (temp ^ 1)) bitshift-right 8
            end decrypt_byte
            </summary>          
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipCrypto.DecryptMessage(System.Byte[],System.Int32)">
            <summary> 
            Call this method on a cipher text to render the plaintext. You must
            first initialize the cipher with a call to InitCipher.
            </summary>          
            <example>
            <code>
            var cipher = new ZipCrypto();
            cipher.InitCipher(Password);
            // Decrypt the header.  This has a side effect of "further initializing the
            // encryption keys" in the traditional zip encryption. 
            byte[] DecryptedMessage = cipher.DecryptMessage(EncryptedMessage);
            </code>
            </example>
            <param name="cipherText">The encrypted buffer.</param>
            <param name="length">
            The number of bytes to encrypt.  
            Should be less than or equal to CipherText.Length.
            </param>
            <returns>The plaintext.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipCrypto.EncryptMessage(System.Byte[],System.Int32)">
            <summary>
            This is the converse of DecryptMessage.  It encrypts the plaintext
            and produces a ciphertext. 
            </summary>
            <param name="plaintext">The plain text buffer.</param>
            <param name="length">
            The number of bytes to encrypt.  
            Should be less than or equal to PlainText.Length.
            </param>
            <returns>The ciphertext.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipCrypto.InitCipher(System.String)">
             <summary>
             This initializes the cipher with the given password. 
             See AppNote.txt for details. 
             </summary>
             <param name="passphrase">The passphrase for encrypting or decrypting with this cipher.
             </param>
             <remarks>
             <code>
             Step 1 - Initializing the encryption keys
             -----------------------------------------
             Start with these keys:        
             Key(0) := 305419896 (0x12345678)
             Key(1) := 591751049 (0x23456789)
             Key(2) := 878082192 (0x34567890)
             
             Then, initialize the keys with a password:
             
             loop for i from 0 to length(password)-1
                 update_keys(password(i))
             end loop
             
             Where update_keys() is defined as:
             
             update_keys(char):
               Key(0) := crc32(key(0),char)
               Key(1) := Key(1) + (Key(0) bitwiseAND 000000ffH)
               Key(1) := Key(1) * 134775813 + 1
               Key(2) := crc32(key(2),key(1) rightshift 24)
             end update_keys
             
             Where crc32(old_crc,char) is a routine that given a CRC value and a
             character, returns an updated CRC value after applying the CRC-32
             algorithm described elsewhere in this document.
            
             </code>
             <para>
             After the keys are initialized, then you can use the cipher to encrypt
             the plaintext. 
             </para>
             <para>
             Essentially we encrypt the password with the keys, then discard the 
             ciphertext for the password. This initializes the keys for later use.
             </para>
             </remarks>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipCipherStream">
            <summary>
            A Stream for reading and concurrently decrypting data from a zip file, 
            or for writing and concurrently encrypting data to a zip file.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipCipherStream.#ctor(System.IO.Stream,ArtOfTest.WebAii.Zip.Zip.ZipCrypto,ArtOfTest.WebAii.Zip.Zip.CryptoMode)">
            <summary>
            The  constructor.
            </summary>
            <param name="s">The underlying stream</param>
            <param name="mode">To either encrypt or decrypt.</param>
            <param name="cipher">The pre-initialized ZipCrypto object.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipEntry">
            <summary>
            Represents a single entry in a ZipFile. Typically, applications get a ZipEntry
            by enumerating the entries within a ZipFile, or by adding an entry to a ZipFile.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AttributesIndicateDirectory">
            <summary>
            True if the referenced entry is a directory.  
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ReadDirEntry(ArtOfTest.WebAii.Zip.Zip.ZipFile)">
            <summary>
            Reads one entry from the zip directory structure in the zip file. 
            </summary>
            <param name="zf">
            The zipfile for which a directory entry will be read.  From this param, the
            method gets the ReadStream and the expected text encoding
            (ProvisionalAlternateEncoding) which is used if the entry is not marked
            UTF-8.
            </param>
            <returns>the entry read from the archive.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.IsNotValidZipDirEntrySig(System.Int32)">
            <summary>
            Returns true if the passed-in value is a valid signature for a ZipDirEntry. 
            </summary>
            <param name="signature">the candidate 4-byte signature value.</param>
            <returns>true, if the signature is valid according to the PKWare spec.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.#ctor">
            <summary>
            Default constructor.  
            </summary>
            <remarks>
            Applications should never need to call this directly.  It is exposed to
            support COM Automation environments.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified">
             <summary>
             The time and date at which the file indicated by the <c>ZipEntry</c> was last modified. 
             </summary>
             
             <remarks>
             <para>
             The DotNetZip library sets the LastModified value for an entry, equal to the
             Last Modified time of the file in the filesystem.  If an entry is added from
             a stream, in which case no Last Modified attribute is available, the library
             uses <c>System.DateTime.Now</c> for this value, for the given entry.
             </para>
            
             <para>
             This property allows the application to retrieve and possibly set the
             LastModified value on an entry, to an arbitrary value.  <see
             cref="T:System.DateTime"/> values with a <see cref="T:System.DateTimeKind" />
             setting of <c>DateTimeKind.Unspecified</c> are taken to be expressed as
             <c>DateTimeKind.Local</c>.
             </para>
            
             <para>
             Be aware that because of the way the PKZip specification describes how times
             are stored in the zip file, the full precision of the <c>System.DateTime</c>
             datatype is not stored for the last modified time when saving zip files.
             For more information on how times are formatted, see the PKZip
             specification.
             </para>
            
             <para> The actual last modified time of a file can be stored in two ways in the
             zip file: first in the so-called "DOS" format, which has a 2-second
             precision. Values are rounded to the nearest even second. For example, if the
             time on the file is 12:34:43, then it will be stored as 12:34:44. This first
             value is accessible via the <c>LastModified</c> property.  Also, the last
             modified time can optionally be stored as an 8-byte integer quantity expressed
             as the number of 1/10 milliseconds (in other words the number of 100 nanosecond
             units) since January 1, 1601 (UTC).  This is the so-called Win32 time.  This
             time is accessible via the <c>ModifiedTime</c> property.  Zip tools and libraries will
             always at least handle (read or write) the DOS time, and may also handle the
             Win32 time. When reading ZIP files, The DotNetZip library reads the Win32 time,
             if it is stored in the entry, and sets both <c>LastModified</c> and <c>ModifiedTime</c>
             to that value. When writing ZIP files, the DotNetZip library will write both
             time quantities.</para>
            
             <para>
             The last modified time of the file created upon a call to
             <c>ZipEntry.Extract()</c> may be adjusted during extraction to compensate
             for differences in how the .NET Base Class Library deals with daylight
             saving time (DST) versus how the Windows filesystem deals with daylight
             saving time.  Raymond Chen <see
             href="http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx">provides
             some good context</see>.
             </para>
            
             <para>
             In a nutshell: Daylight savings time rules change regularly.  In 2007, for
             example, the inception week of DST changed.  In 1977, DST was in place all
             year round. In 1945, likewise.  And so on.  Win32 does not attempt to guess
             which time zone rules were in effect at the time in question.  It will
             render a time as "standard time" and allow the app to change to DST as
             necessary.  .NET makes a different choice.
             </para>
            
             <para>
             Compare the output of FileInfo.LastWriteTime.ToString("f") with what you
             see in the Windows Explorer property sheet for a file that was last
             written to on the other side of the DST transition. For example, suppose
             the file was last modified on October 17, 2003, during DST but DST is not
             currently in effect. Explorer's file properties reports Thursday, October
             17, 2003, 8:45:38 AM, but .NETs FileInfo reports Thursday, October 17,
             2003, 9:45 AM.
             </para>
             <para>
             Win32 says, "Thursday, October 17, 2002 8:45:38 AM PST". Note: Pacific
             STANDARD Time. Even though October 17 of that year occurred during Pacific
             Daylight Time, Win32 displays the time as standard time because that's
             what time it is NOW.
             </para>
             <para>
             .NET BCL assumes that the current DST rules were in place at the time in
             question.  So, .NET says, "Well, if the rules in effect now were also in
             effect on October 17, 2003, then that would be daylight time" so it
             displays "Thursday, October 17, 2003, 9:45 AM PDT" - daylight time.
             </para>
             <para>
             So .NET gives a value which is more intuitively correct, but is also
             potentially incorrect, and which is not invertible. Win32 gives a value
             which is intuitively incorrect, but is strictly correct.
             </para>
             <para>
             Because of this funkiness, this library adds one hour to the LastModified
             time on the extracted file, if necessary.  That is to say, if the time in
             question had occurred in what the .NET Base Class Library assumed to be
             DST. This assumption may be wrong given the constantly changing DST
             rules, but it is the best we can do.
             </para>
             </remarks>
            
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime">
             <summary>
             Last Modified time for the file represented by the entry.
             </summary>
            
             <remarks>
            
             <para> This value corresponds to the "last modified" time in the NTFS file times
             as described in <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification</see>.  This value is different from <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified" />.
             </para>
            
             <para> Let me explain. Originally, waaaaay back in 1989 when the ZIP
             specification was originally described by the esteemed Mr. Phil Katz, the
             dominant operating system of the time was MS-DOS. MSDOS stored file times with a
             2-second precision, because, c'mon, <em>who is ever going to need better
             resolution than THAT?</em> And so ZIP files, regardless of the platform on which
             the zip file was created, store file times in exactly <see
             href="http://www.vsft.com/hal/dostime.htm">the same format that DOS used in
             1989</see>.  </para>
            
             <para> Since then, the ZIP spec has evolved, but the internal format for file
             timestamps remains the same.  Despite the fact that the way times are stored in
             a zip file is rooted in DOS heritage, any program on any operating system can
             format a time in this way, and most zip tools and libraries DO - they round file
             times to the nearest even second and store it just like DOS did 20 years ago.
             </para>
            
             <para> PKWare extended the ZIP specification to allow a zip file to store what
             is called "NTFS Times" for a file.  These are the <em>last write</em>, <em>last
             access</em>, and <em>file creation</em> times of a particular file. These
             metadata are not actually specific to NTFS. They are tracked for each file by
             NTFS, but they are also tracked by other filesystems. DotNetZip represents this
             with the <c>ModifiedTime</c>, <c>AccessedTime</c> and <c>CreationTime</c> properties on a
             <c>ZipEntry</c>.</para>
            
             <para> Inside a zip file, these three distinct timestamps are stored in the same
             format that Windows NTFS uses to store file times. Rather than a resolution of 2
             seconds, NTFS times have a resolution of 100 nanoseconds. And, just as with the
             DOS time, any tool or library on any operating system is capable of formatting a
             time in this way and embedding it into the zip file. The key is, not all zip
             tools or libraries do.  Storing the higher-precision times for each entry is
             optional for zip files, and many tools and libraries don't use the option,
             though it is much nicer than the DOS time.  And futher, there are also cases
             where the timestamp of the file entry is not known, and is not stored. For
             example, this happens when content for the entry is obtained from a stream.  The
             bottom line is that the higher-resolution time is not guaranteed to be present
             for a ZipEntry.  The old DOS time, represented by <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/>, is
             guaranteed to be present, though it sometimes unset. </para>
            
             <para> Ok, getting back to the question about how the <c>LastModified</c>
             property relates to this <c>ModifiedTime</c> property... <c>LastModified</c> is always
             set, while <c>ModifiedTime</c> is not. (The other times stored in the <em>NTFS times
             extension</em>, <c>CreationTime</c> and <c>AccessedTime</c> also may not be set on an entry
             that is read from an existing zip file.) When reading a zip file, then
             <c>LastModified</c> takes the DOS time that is stored with the file. If the DOS time
             has been stored as zero in the zipfile, then this library will use
             <c>DateTime.Now</c> for the <c>LastModified</c> value.  If the ZIP file was
             created by an evolved tool, then there will also be NTFS times in the zip file.
             In that case, this library will read those times, and set <c>LastModified</c>
             and <c>ModifiedTime</c> to the same value, the one corresponding to the last write time
             of the file.  If there are no "NTFS times" stored for the entry, then
             <c>ModifiedTime</c> remains unset (likewise <c>AccessedTime</c> and <c>CreationTime</c>), and
             <c>LastModified</c> keeps its DOS time. </para>
            
             <para> When creating zip files with this library, then the NTFS time properties
             (<c>ModifiedTime</c>, <c>AccessedTime</c>, and <c>CreationTime</c>) are always set on the ZipEntry
             instance, and these data are always stored in the zip archive for each entry. If
             you add an entry from an actual filesystem file, then the entry gets the actual
             NTFS times for that file.  If you add an entry from a stream, or a string, then
             the times get the value <c>DateTime.Now</c>.  In this case <c>LastModified</c>
             and <c>ModifiedTime</c> will be identical, to 2 seconds of precision.  You can
             explicitly set the <c>CreationTime</c>, <c>AccessedTime</c>, and <c>ModifiedTime</c> of an entry
             using <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetNtfsTimes(System.DateTime,System.DateTime,System.DateTime)"/>. Those changes
             are not made permanent in the zip file until you call <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> or one of its cousins.  </para>
            
             <para>
             And that is why <c>ModifiedTime</c> may or may not be meaningful, and it may or may not agree 
             exactly with the <c>LastModified</c> time on the <c>ZipEntry</c>.
             </para>
            
             <para>
             I'll bet you didn't think one person could type so much about time, eh?  And reading
             it was so enjoyable, too!  Well, in appreciation, <see
             href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">maybe you should
             donate</see>?
             </para>
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime">
            <summary>
            Last Access time for the file represented by the entry.
            </summary>
            <remarks>
            This value may or may not be meaningful.  If the <c>ZipEntry</c> was read from an existing
            Zip archive, this information may not be available. For an explanation of why, see
            <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>.
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime">
             <summary>
             The file creation time for the file represented by the entry.
             </summary>
            
             <remarks>
             This value may or may not be meaningful.  If the <c>ZipEntry</c> was read
             from an existing zip archive, and the creation time was not set on the entry
             when the zip file was created, then this property may be meaningless. For an
             explanation of why, see <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>.
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)">
             <summary>
             Sets the NTFS Creation, Access, and Modified times for the given entry.
             </summary>
            
             <remarks>
             <para>
             When adding an entry from a file or directory, the Creation, Access, and
             Modified times for the given entry are automatically set from the filesystem
             values. When adding an entry from a stream or string, the values are
             implicitly set to DateTime.Now.  The application may wish to set these
             values to some arbitrary value, before saving the archive.  If you set the
             times using this method, the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property also gets
             set, to the same value provided for mtime.
             </para>
            
             <para>
             The values you set here will be retrievable with the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/> and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/> read-only properties.
             </para>
            
             <para>
             When this method is called, the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/> flag is automatically set.
             </para>
            
             <para>
             DateTime values provided here without a DateTimeKind are assumed to be Local Time.
             </para>
             </remarks>
             <param name="created">the creation time of the entry.</param>
             <param name="accessed">the last access time of the entry.</param>
             <param name="modified">the last modified time of the entry.</param>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetNtfsTimes(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            This method is obsolete.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times for the
             given entry will be emitted in "Windows format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
             An application creating a zip archive can use this flag to explicitly
             specify that the file times for the entry should or should not be stored in
             the zip archive in the format used by Windows. The default value of this
             property is <c>true</c>.
             </para>
            
             <para>
             When adding an entry from a file or directory, the Creation (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>), and Modified (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically set from the
             filesystem values. When adding an entry from a stream or string, all three
             values are implicitly set to DateTime.Now.  Applications can also explicitly
             set those times by calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetNtfsTimes(System.DateTime,System.DateTime,System.DateTime)" />.
             </para>
            
             <para>
             <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
             zip specification</see> describes multiple ways to format these times in a
             zip file. One is the format Windows applications normally use: 100ns ticks
             since Jan 1, 1601 UTC.  The other is a format Unix applications typically
             use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an "extra
             field" in the zip entry when saving the zip archive. The former uses an
             extra field with a Header Id of 0x000A, while the latter uses a header ID of
             0x5455.
             </para>
            
             <para>
             Not all tools and libraries can interpret these fields.  Windows compressed
             folders is one that can read the Windows Format timestamps, while I believe
             the <see href="http://www.info-zip.org/">Infozip</see> tools can read the Unix
             format timestamps. Some tools and libraries may be able to read only one or
             the other.
             </para>
            
             <para>
             The times stored are taken from <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
             This property is not mutually exclusive from the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving"/> property.
             It is possible that a zip entry can embed the timestamps in both
             forms.
             </para>
            
             <para>
             Normally you will use the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving"/> property, to specify the
             behavior for all entries in a zip, rather than the property on each
             individual entry.
             </para>
            
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times for the given
             entry will be emitted in "Unix(tm) format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
             An application creating a zip archive can use this flag to explicitly
             specify that the file times for the entry should or should not be stored in
             the zip archive in the format used by Unix. By default this flag is
             <c>false</c>.
             </para>
            
             <para>
             When adding an entry from a file or directory, the Creation (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>), and Modified (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are automatically set from the
             filesystem values. When adding an entry from a stream or string, all three
             values are implicitly set to DateTime.Now.  Applications can also explicitly
             set those times by calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetNtfsTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
             <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
             zip specification</see> describes multiple ways to format these times in a
             zip file. One is the format Windows applications normally use: 100ns ticks
             since Jan 1, 1601 UTC.  The other is a format Unix applications typically
             use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an "extra
             field" in the zip entry when saving the zip archive. The former uses an
             extra field with a Header Id of 0x000A, while the latter uses a header ID of
             0x5455.
             </para>
            
             <para>
             Not all tools and libraries can interpret these fields.  Windows compressed
             folders is one that can read the Windows Format timestamps, while I believe
             the <see href="http://www.info-zip.org/">Infozip</see> tools can read the Unix
             format timestamps. Some tools and libraries may be able to read only one or
             the other.
             </para>
            
             <para>
             The times stored are taken from <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
             This property is not mutually exclusive from the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving" /> flag.  It is possible that a
             zip entry can embed the timestamps in both forms.
             </para>
            
             <para>
             Normally you will use the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving"/> property, to specify the
             behavior for all entries, rather than the property on each individual entry.
             </para>
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Timestamp">
             <summary>
             The type of timestamp attached to the ZipEntry.
             </summary>
            
             <remarks>
             This property is valid only for a ZipEntry that was read from a zip archive.
             It indicates the type of timestamp attached to the entry. 
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Attributes">
             <summary>
             The file attributes for the entry.
             </summary>
             <remarks>
            
             <para>
             The <see cref="T:System.IO.FileAttributes">attributes</see> in NTFS include
             ReadOnly, Archive, Hidden, System, and Indexed.  When adding a
             <c>ZipEntry</c> to a ZipFile, these attributes are set implicitly when
             adding an entry from the filesystem.  When adding an entry from a stream or
             string, the Attributes are not set.
             </para>
            
             <para>
             When reading a <c>ZipEntry</c> from a ZipFile, the attributes are set
             according to the data stored in the ZipFile. If you extract the entry from
             the archive to a disk file, DotNetZip will set the attributes on the
             resulting file accordingly.
             </para>
            
             <para>
             The attributes can be set explicitly by the application for whatever
             purpose.  For example the application may wish to set the
             FileAttributes.ReadOnly bit for all entries added to an archive, so that on
             unpack, this attribute will be set on the extracted file.  Any changes you
             make to this property are made permanent only when you call a Save() method
             on the <c>ZipFile</c> instance that contains the ZipEntry.
             </para>
            
             <para>
             For example, an application may wish to zip up a directory and set the
             ReadOnly bit on every file in the archive, so that upon later extraction,
             the resulting files will be marked as ReadOnly.  Not every extraction tool
             respects these attributes, but if you unpack with DotNetZip, then the
             attributes will be set as they are stored in the ZipFile.
             </para>
            
             <para>
             These attributes may not be interesting or useful if the resulting archive
             is extracted on a non-Windows platform.  How these attributes get used upon
             extraction depends on the platform and tool used.
             </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ForceNoCompression">
             <summary>
             Disables compression for the entry when calling ZipFile.Save().
             </summary>
            
             <remarks>
             <para>
             By default, the library compresses entries when saving them to archives. 
             When this property is set to true, the entry is not compressed when written to 
             the archive.  For example, the application might want to set flag to <c>true</c>
             this when zipping up JPG or MP3 files, which are already compressed.  The application
             may also want to turn off compression for other reasons.
             </para>
            
             <para> When updating a ZipFile, you may not turn off compression on an entry
             that has been encrypted.  In other words, if you read an existing <c>ZipFile</c> with
             one of the <c>ZipFile.Read()</c> methods, and then change the
             <c>CompressionMethod</c> on an entry that has <c>Encryption</c> not equal to
             <c>None</c>, you will receive an exception.  There is no way to modify the
             compression on an encrypted entry, without extracting it and re-adding it into
             the ZipFile.  </para> </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressionMethod"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LocalFileName">
            <summary>
            The name of the filesystem file, referred to by the ZipEntry. 
            </summary>
            
            <remarks>
            <para>
            This may be different than the path used in the archive itself. What I mean is, 
            if you call <c>Zip.AddFile("fooo.txt", AlternativeDirectory)</c>, then the 
            path used for the <c>ZipEntry</c> within the zip archive will be different than this path.  
            This path is used to locate the thing-to-be-zipped on disk. 
            </para>
            
            <para>
            If the entry is being added from a stream, then this is null (Nothing in VB).
            </para>
            
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.FileName"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.FileName">
             <summary>
             The name of the file contained in the ZipEntry. 
             </summary>
             
             <remarks>
            
             <para>
             This is the name of the entry in the <c>ZipFile</c> itself.  When creating a zip
             archive, if the <c>ZipEntry</c> has been created from a filesystem file, via a
             call to <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String,System.String)"/> or <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String,System.String)"/>, or a related overload, the value of this
             property is derived from the name of that file. The <c>FileName</c> property does
             not include drive letters, and may include a different directory path, depending
             on the value of the <c>directoryPathInArchive</c> parameter used when adding the
             entry into the <c>ZipFile</c>.
             </para>
            
             <para>
             In some cases there is no related filesystem file - for example when a
             <c>ZipEntry</c> is created using <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String)"/> or <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/>, or one of
             the related overloads.  In this case, the value of this property is derived from
             the fileName and the directory path passed to that method.
             </para>
            
             <para>
             When reading a zip file, this property takes the value of the entry name as
             stored in the zip file. If you extract such an entry, the extracted file will
             take the name given by this property.
             </para>
            
             <para>
             Applications can set this property when creating new zip archives or when reading
             existing archives. When setting this property, the actual value that is set will
             replace backslashes with forward slashes, in accordance with <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification</see>, for compatibility with Unix(tm) and ... get this.... Amiga!
             </para>
            
             <para>
             If an application reads a <c>ZipFile</c> via <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String)"/>
             or a related overload, and then explicitly sets the FileName on an entry
             contained within the <c>ZipFile</c>, and then calls <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/>,
             the application will effectively rename the entry within the zip archive.
             </para>
            
             <para>
             If an application sets the value of <c>FileName</c>, then calls <c>Extract()</c>
             on the entry, the entry is extracted to a file using the newly set value as the
             filename.  The <c>FileName</c> value is made permanent in the zip archive only
             <em>after</em> a call to one of the <c>ZipFile.Save()</c> methods on the
             <c>ZipFile</c> that contains the ZipEntry.
             </para>
            
             <para>
             If an application attempts to set the <c>FileName</c> to a value that would
             result in a duplicate entry in the <c>ZipFile</c>, an exception is thrown.
             </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream">
             <summary>
             The stream that provides content for the ZipEntry.
             </summary>
            
             <remarks>
            
             <para> The application can use this property to set the input stream for an
             entry on a just-in-time basis. Imagine a scenario where the application
             creates a <c>ZipFile</c> comprised of content obtained from hundreds of
             files, via calls to <c>AddFile()</c>. The DotNetZip library opens streams on
             these files on a just-in-time basis, only when writing the entry out to an
             external store within the scope of a <c>ZipFile.Save()</c> call.  Only one
             input stream is opened at a time, as each entry is being written
             out. </para>
            
             <para> Now imagine a different application that creates a zipfile with
             content obtained from hundreds of streams, added through <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFileFromStream(System.String,System.String,System.IO.Stream)"/>.
             Normally the application would supply an open stream to that call.  But when
             large numbers of streams are being added, this can mean many open streams at
             one time, unnecessarily.  </para>
            
             <para> To avoid this, at the time of calling
             <c>ZipFile.AddFileFromStream</c> for each entry, the application can supply
             Stream.Null as the value of the stream parameter. The application
             can then open the stream on a just-in-time basis, setting this property, and
             thus insuring, as with the latter example, that only one stream need be
             opened at a time while constructing and saving the ZipFile.  </para>
            
             <para> To do this, the application should set the <c>InputStream</c>
             property within the context of the <see cref="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.SaveProgress"/> event,
             when the event type is <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_BeforeWriteEntry"/>. The application
             should only set <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream" /> for a <c>ZipEntry</c> which has the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Source"/> equal to <see cref="F:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource.Stream"/>.  When
             the input stream is provided by the application in this way, the application
             is also responsible for closing or disposing the stream.  This would
             normally be done in the <see cref="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.SaveProgress"/> event, when the
             event type is <see cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterWriteEntry"/>. See
             the example code provided here for how this can be done. </para>
            
             <para> Setting the value of this property when the entry was not added from
             a stream (for example, when the <c>ZipEntry</c> was added with <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String)"/> or <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)"/>, or when the entry was added by
             reading an existing zip archive) will throw an exception.  </para>
            
             </remarks>
            
             <example>
            
             <para> This example adds a large number of entries to a ZipFile. The
             application uses the just-in-time stream provisioning mechanism to avoid
             keeping all the streams open simultaneiously. </para>
            
             <code lang="C#">
             public static void ProvisionStreams(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (e.CurrentEntry.Source == ZipEntrySource.Stream &amp;&amp;
                           e.CurrentEntry.InputStream == Stream.Null)
                     {
                         System.IO.Stream s = MyStreamOpener(e.CurrentEntry.FileName);
                         e.CurrentEntry.InputStream = s;
                     }
                 }
                 else if (e.EventType == ZipProgressEventType.Saving_AfterWriteEntry)
                 {
                     if (e.CurrentEntry.InputStreamWasJitProvided)
                     {
                         e.CurrentEntry.InputStream.Close();
                     }
                 }
             }
            
             public void CreateZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     // add content into a "content" dir in the zip archive
                     foreach (string s in namesOfStreamsToZip)
                         zip.AddFileFromStream(s, "content", null);
                     // set up the event handler to provision streams "just-in-time"
                     zip.SaveProgress += ProvisionStreams;
                     zip.AddFile("Readme.txt");
                     zip.Save(ZipToCreate);
                 }
             }
             </code>
             <code lang="VB">
             Public Shared Sub ProvisionStreams(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType = ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If (e.CurrentEntry.Source = ZipEntrySource.Stream) Then
                         If (e.CurrentEntry.InputStream = Stream.Null) Then
                             Dim s As Stream = MyStreamOpener(e.CurrentEntry.FileName)
                             e.CurrentEntry.InputStream = s
                         End If
                     End If
                 ElseIf (e.EventType = ZipProgressEventType.Saving_AfterWriteEntry) Then
                     If (e.CurrentEntry.InputStreamWasJitProvided) Then
                         e.CurrentEntry.InputStream.Close
                     End If
                 End If
             End Sub
            
             Public Sub CreateZip()
                 Using zip As ZipFile = new ZipFile()
                     ' add content into a "content" dir in the zip archive
                     Dim s As String
                     For Each s In namesOfStreamsToZip
                         zip.AddFileFromStream(s, "content", Nothing)
                     ' set up the event handler to provision streams "just-in-time"
                     AddHandler zip.SaveProgress, AddressOf ProvisionStreams
                     zip.AddFile("Readme.txt")
                     zip.Save(ZipToCreate)
                 End Using
             End Sub
             </code>
             </example>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStreamWasJitProvided"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStreamWasJitProvided">
             <summary>
             A flag indicating whether the InputStream was provided Just-in-time.
             </summary>
             <remarks>
             
             <para>
             When creating a zip archive, an application can obtain content for one or more of the
             <c>ZipEntry</c> instances from streams, using the <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFileFromStream(System.String,System.String,System.IO.Stream)"/> method.  At the
             time of calling that method, the application can supply null as the value of the
             stream parameter.  By doing so, the application indicates to the library that it will
             provide a stream for the entry on a just-in-time basis, at the time one of the
             <c>ZipFile.Save()</c> methods is called and the data for the various entries are being
             compressed and written out.
             </para>
            
             <para>
             In this case, the application can set the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/> property,
             typically within the SaveProgress event (event type: <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_BeforeWriteEntry"/>) for that entry.  
             </para>
            
             <para>
             The application will later want to call Close() and Dispose() on that stream.  In the
             SaveProgress event, when the event type is <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Saving_AfterWriteEntry"/>, the application can do so.  This
             flag indicates that the stream has been provided by the application on a just-in-time
             basis and that it is the application's responsibility to call Close/Dispose on that
             stream.
             </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Source">
            <summary>
            An enum indicating the source of the ZipEntry.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.VersionNeeded">
             <summary>
             The version of the zip engine needed to read the ZipEntry.  
             </summary>
             
             <remarks>
             <para>
             This is a readonly property, indicating the version of <a
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification</a> that the extracting tool or library must support to
             extract the given entry.  Generally higher versions indicate newer features.
             Older zip engines obviously won't know about new features, and won't be able
             to extract entries that depend on those newer features.
             </para>
             
             <list type="table">
             <listheader>
             <term>value</term>
             <description>Features</description>
             </listheader>
             
             <item>
             <term>20</term>
             <description>a basic Zip Entry, potentially using PKZIP encryption. 
             </description>
             </item>
             
             <item>
             <term>45</term>
             <description>The ZIP64 extension is used on the entry.
             </description>
             </item>
             
             <item>
             <term>46</term>
             <description> File is compressed using BZIP2 compression*</description>
             </item>
            
             <item>
             <term>50</term>
             <description> File is encrypted using PkWare's DES, 3DES, (broken) RC2 or RC4</description>
             </item>
            
             <item>
             <term>51</term>
             <description> File is encrypted using PKWare's AES encryption or corrected RC2 encryption.</description>
             </item>
            
             <item>
             <term>52</term>
             <description> File is encrypted using corrected RC2-64 encryption**</description>
             </item>
            
             <item>
             <term>61</term>
             <description> File is encrypted using non-OAEP key wrapping***</description>
             </item>
            
             <item>
             <term>63</term>
             <description> File is compressed using LZMA, PPMd+, Blowfish, or Twofish</description>
             </item>
            
             </list>
            
             <para>
             There are other values possible, not listed here. DotNetZip supports regular
             PKZip encryption, and ZIP64 extensions.  DotNetZip cannot extract entries
             that require a zip engine higher than 45.
             </para>
            
             <para>
             This value is set upon reading an existing zip file, or after saving a zip
             archive.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Comment">
             <summary>
             The comment attached to the ZipEntry. 
             </summary>
            
             <remarks>
             <para>
             Each entry in a zip file can optionally have a comment associated to it. The
             comment might be displayed by a zip tool during extraction, for example. 
             </para>
            
             <para>
             By default, the <c>Comment</c> is encoded in IBM437 code page. You can specify 
             an alternative with <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ProvisionalAlternateEncoding"/>
             </para>
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.RequiresZip64">
             <summary>
             Indicates whether the entry requires ZIP64 extensions.
             </summary>
            
             <remarks>
            
             <para> This property is null (Nothing in VB) until a <c>Save()</c> method on the
             containing <see cref="T:ArtOfTest.WebAii.Zip.Zip.ZipFile"/> instance has been called. The property is
             non-null (<c>HasValue</c> is true) only after a <c>Save()</c> method has been called.
             </para>
            
             <para> After the containing <c>ZipFile</c> has been saved, the Value of this
             property is true if any of the following three conditions holds: the
             uncompressed size of the entry is larger than 0xFFFFFFFF; the compressed size of
             the entry is larger than 0xFFFFFFFF; the relative offset of the entry within the
             zip archive is larger than 0xFFFFFFFF.  These quantities are not known until a
             <c>Save()</c> is attempted on the zip archive and the compression is applied.
             </para>
            
             <para>If none of the three conditions holds, then the <c>Value</c> is false.</para>
            
             <para> A <c>Value</c> of false does not indicate that the entry, as saved in the
             zip archive, does not use ZIP64.  It merely indicates that ZIP64 is <em>not
             required</em>.  An entry may use ZIP64 even when not required if the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing <c>ZipFile</c> instance
             is set to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always"/>, or if the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/> property on the containing <c>ZipFile</c>
             instance is set to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> and the output stream
             was not seekable.  </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OutputUsedZip64"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OutputUsedZip64">
             <summary>
             Indicates whether the entry actually used ZIP64 extensions, as it was most recently 
             written to the output file or stream.
             </summary>
            
             <remarks>
            
             <para> This Nullable property is null (Nothing in VB) until a <c>Save()</c>
             method on the containing <see cref="T:ArtOfTest.WebAii.Zip.Zip.ZipFile"/> instance has been
             called. <c>HasValue</c> is true only after a <c>Save()</c> method has been
             called.  </para>
            
             <para>
             The value of this property for a particular <c>ZipEntry</c> may change over successive calls to
             <c>Save()</c> methods on the containing ZipFile, even if the file that corresponds to the <c>ZipEntry</c> does
             not. This may happen if other entries contained in the <c>ZipFile</c> expand, causing the offset 
             for this particular entry to exceed 0xFFFFFFFF. 
             </para>
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.RequiresZip64"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.BitField">
             <summary>
             The bitfield for the entry as defined in the zip spec. You probably never need to look at this.
             </summary>
            
             <remarks>
             <list type="table">
             <listheader>
             <term>bit</term>
             <description>meaning</description>
             </listheader>
             
             <item>
             <term>0</term>
             <description>set if encryption is used.</description>
             </item>
             
             <item>
             <term>1-2</term>
             <description>
             set to determine whether normal, max, fast deflation.  DotNetZip library
             always leaves these bits unset when writing (indicating "normal"
             deflation"), but can read an entry with any value here.
             </description>
             </item>
             
             <item>
             <term>3</term>
             <description>
             Indicates that the Crc32, Compressed and Uncompressed sizes are zero in the
             local header.  This bit gets set on an entry during writing a zip file, when
             it is saved to a non-seekable output stream.
             </description>
             </item>
             
            
             <item>
             <term>4</term>
             <description>reserved for "enhanced deflating". This library doesn't do enhanced deflating.</description>
             </item>
             
             <item>
             <term>5</term>
             <description>set to indicate the zip is compressed patched data.  This library doesn't do that.</description>
             </item>
             
             <item>
             <term>6</term>
             <description>
             set if PKWare's strong encryption is used (must also set bit 1 if bit 6 is
             set). This bit is not set if WinZip's AES encryption is set.</description>
             </item>
             
             <item>
             <term>7</term>
             <description>not used</description>
             </item>
             
             <item>
             <term>8</term>
             <description>not used</description>
             </item>
             
             <item>
             <term>9</term>
             <description>not used</description>
             </item>
             
             <item>
             <term>10</term>
             <description>not used</description>
             </item>
             
             <item>
             <term>11</term>
             <description>
             Language encoding flag (EFS).  If this bit is set, the filename and comment
             fields for this file must be encoded using UTF-8. This library currently
             does not support UTF-8.
             </description>
             </item>
             
             <item>
             <term>12</term>
             <description>Reserved by PKWARE for enhanced compression.</description>
             </item>
             
             <item>
             <term>13</term>
             <description>
             Used when encrypting the Central Directory to indicate selected data values
             in the Local Header are masked to hide their actual values.  See the section
             in <a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification</a> describing the Strong Encryption Specification for
             details.
             </description>
             </item>
                     
             <item>
             <term>14</term>
             <description>Reserved by PKWARE.</description>
             </item>
             
             <item>
             <term>15</term>
             <description>Reserved by PKWARE.</description>
             </item>
            
             </list>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressionMethod">
             <summary>
             The compression method employed for this ZipEntry. 
             </summary>
             
             <remarks>
            
             <para> <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
             Zip specification</see> allows a variety of compression methods.  This library
             supports just two: 0x08 = Deflate.  0x00 = Store (no compression).  </para>
             
             <para>
             When reading an entry from an existing zipfile, the value you retrieve here
             indicates the compression method used on the entry by the original creator of the zip.  
             When writing a zipfile, you can specify either 0x08 (Deflate) or 0x00 (None).  If you 
             try setting something else, you will get an exception.  
             </para>
             
             <para> You may wish to set <c>CompressionMethod</c> to 0 (None) when zipping
             previously compressed data like a jpg, png, or mp3 file.  This can save time and
             cpu cycles.  Setting <c>CompressionMethod</c> to 0 is equivalent to setting
             <c>ForceNoCompression</c> to <c>true</c>.  </para>
             
             <para> When updating a <c>ZipFile</c>, you may not modify the
             <c>CompressionMethod</c> on an entry that has been encrypted.  In other words,
             if you read an existing <c>ZipFile</c> with one of the <c>ZipFile.Read()</c>
             methods, and then change the <c>CompressionMethod</c> on an entry that has
             <c>Encryption</c> not equal to <c>None</c>, you will receive an exception.
             There is no way to modify the compression on an encrypted entry, without
             extracting it and re-adding it into the <c>ZipFile</c>.  </para>
            
             </remarks>
             
             <example>
             In this example, the first entry added to the zip archive uses 
             the default behavior - compression is used where it makes sense.  
             The second entry, the MP3 file, is added to the archive without being compressed.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToCreate))
             {
               ZipEntry e1= zip.AddFile(@"notes\Readme.txt");
               ZipEntry e2= zip.AddFile(@"music\StopThisTrain.mp3");
               e2.CompressionMethod = 0;
               zip.Save();
             }
             </code>
             
             <code lang="VB">
             Using zip As New ZipFile(ZipFileToCreate)
               zip.AddFile("notes\Readme.txt")
               Dim e2 as ZipEntry = zip.AddFile("music\StopThisTrain.mp3")
               e2.CompressionMethod = 0
               zip.Save
             End Using
             </code>
             </example>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressedSize">
             <summary>
             The compressed size of the file, in bytes, within the zip archive. 
             </summary>
            
             <remarks> The compressed size is computed during compression. The value is valid
             AFTER reading in an existing zip file, or AFTER saving a zipfile you are
             creating.  </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.UncompressedSize"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.UncompressedSize">
            <summary>
            The size of the file, in bytes, before compression, or after extraction. 
            </summary>
            <remarks>
            This property is valid AFTER reading in an existing zip file, or AFTER saving the 
            <c>ZipFile</c> that contains the ZipEntry.
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressedSize"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressionRatio">
             <summary>
             The ratio of compressed size to uncompressed size of the ZipEntry.
             </summary>
             
             <remarks>
             <para>
             This is a ratio of the compressed size to the uncompressed size of the entry,
             expressed as a double in the range of 0 to 100+. A value of 100 indicates no
             compression at all.  It could be higher than 100 when the compression algorithm
             actually inflates the data, as may occur for small files, or uncompressible
             data that is encrypted.
             </para>
            
             <para>
             You could format it for presentation to a user via a format string of "{3,5:F0}%"
             to see it as a percentage. 
             </para>
            
             <para>
             If the size of the original uncompressed file is 0, (indicating a denominator of 0)
             the return value will be zero. 
             </para>
            
             <para>
             This property is valid AFTER reading in an existing zip file, or AFTER saving the 
             <c>ZipFile</c> that contains the ZipEntry. You cannot know the effect of a compression 
             transform until you try it. 
             </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Crc">
             <summary>
             The 32-bit CRC (Cyclic Redundancy Check) on the contents of the ZipEntry. 
             </summary>
             
             <remarks>
            
             <para> You probably don't need to concern yourself with this. It is used
             internally by DotNetZip to verify files or streams upon extraction.  </para>
            
             <para> The value is a <see href="http://en.wikipedia.org/wiki/CRC32">32-bit
             CRC</see> using 0xEDB88320 for the polynomial. This is the same CRC-32 used in
             PNG, MPEG-2, and other protocols and formats.  It is a read-only property; when
             creating a Zip archive, the CRC for each entry is set only after a call to
             Save() on the containing ZipFile. When reading an existing zip file, the value
             of this property reflects the stored CRC for the entry.  </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.IsDirectory">
            <summary>
            True if the entry is a directory (not a file). 
            This is a readonly property on the entry.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.UsesEncryption">
             <summary>
             A derived property that is <c>true</c> if the entry uses encryption.  
             </summary>
            
             <remarks>
             <para>
             This is a readonly property on the entry.  When reading a zip file, the
             value for the <c>ZipEntry</c> is determined by the data read from the zip
             file.  After saving a ZipFile, the value of this property for each
             <c>ZipEntry</c> indicates whether encryption was actually used (which will
             have been true if the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password"/> was set and the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption"/> property was something other than <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.None"/>.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption">
             <summary>
             Set this to specify which encryption algorithm to use for the entry
             when saving it to a zip archive.
             </summary>
             
             <remarks>
            
             <para>
             Set this property in order to encrypt the entry when the <c>ZipFile</c> is
             saved. When setting this property, you must also set a <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password"/> on the entry.  If you set a value other than <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.None"/> on this property and do not set a
             <c>Password</c> then the entry will not be encrypted. The <c>ZipEntry</c>
             data is encrypted as the <c>ZipFile</c> is saved, when you call <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> or one of its cousins on the containing
             <c>ZipFile</c> instance. You do not need to specify the <c>Encryption</c>
             when extracting entries from an archive.
             </para>
            
             <para>
             The Zip specification from PKWare defines a set of encryption algorithms,
             and the data formats for the zip archive that support them, and PKWare
             supports those algorithms in the tools it produces. Other vendors of tools
             and libraries, such as WinZip or Xceed, typically support <em>a subset</em>
             of the algorithms specified by PKWare. These tools can sometimes support
             additional different encryption algorithms and data formats, not specified
             by PKWare. The AES Encryption specified and supported by WinZip is the most
             popular example. This library supports a subset of the complete set of
             algorithms specified by PKWare and other vendors.  
             </para>
            
             <para>
             There is no common, ubiquitous multi-vendor standard for strong encryption
             within zip files. There is broad support for so-called "traditional" Zip
             encryption, sometimes called Zip 2.0 encryption, as <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">specified
             by PKWare</see>, but this encryption is considered weak and
             breakable. This library currently supports the Zip 2.0 "weak" encryption,
             and also a stronger WinZip-compatible AES encryption, using either 128-bit
             or 256-bit key strength. If you want DotNetZip to support an algorithm
             that is not currently supported, call the author of this library and maybe
             we can talk business.
             </para>
            
             <para>
             The <see cref="T:ArtOfTest.WebAii.Zip.Zip.ZipFile"/> class also has a <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>
             property.  In most cases you will use <em>that</em> property when setting
             encryption. This property takes precedence over any <c>Encryption</c> set on the
             <c>ZipFile</c> itself.  Typically, you would use the per-entry Encryption when
             most entries in the zip archive use one encryption algorithm, and a few entries
             use a different one.  If all entries in the zip file use the same Encryption,
             then it is simpler to just set this property on the ZipFile itself, when
             creating a zip archive.
             </para>
            
             <para>
             Some comments on updating archives: If you read a <c>ZipFile</c>, you cannot
             modify the Encryption on any encrypted entry, except by extracting the entry
             using  the original password (if any), removing the original entry via <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(ArtOfTest.WebAii.Zip.Zip.ZipEntry)"/>, and then adding a new entry with a
             new Password and Encryption.
             </para>
            
             <para>
             For example, suppose you read a <c>ZipFile</c>, and there is an entry encrypted
             with PKZip 2.0 encryption.  Setting the <c>Encryption</c> property on that
             <c>ZipEntry</c> to ArtOfTest.WebAii.Zip.Zip.EncryptionAlgorithm.WinZipAes256 will cause an
             exception to be thrown.  Setting the <c>Encryption</c> on the <c>ZipFile</c> and
             then adding new entries will allow that encryption to be used on the newly added
             entries.  During the <c>Save()</c>, the existing entries are copied through to
             the new zip archive, in their original encrypted form (encrypted or not), while
             the newly-added entries are encrypted as usual.
             </para>
            
             <para>
             The WinZip AES encryption algorithms are not supported on the .NET Compact
             Framework.
             </para>
             
             </remarks>
            
             <example>
             <para>
             This example creates a zip archive that uses encryption, and then extracts entries
             from the archive.  When creating the zip archive, the ReadMe.txt file is zipped
             without using a password or encryption.  The other file uses encryption.  
             </para>
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt")
                 ZipEntry e1= zip.AddFile("2008-Regional-Sales-Report.pdf");
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256;
                 e1.Password= "Top.Secret.No.Peeking!";
                 zip.Save("EncryptedArchive.zip");
             }
             
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 // Specify the password that is used during extraction, for
                 // all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.AddFile("ReadMe.txt")
                 Dim e1 as ZipEntry
                 e1= zip.AddFile("2008-Regional-Sales-Report.pdf")
                 e1.Encryption= EncryptionAlgorithm.WinZipAes256
                 e1.Password= "Top.Secret.No.Peeking!"
                 zip.Save("EncryptedArchive.zip")
             End Using
             
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 ' Specify the password that is used during extraction, for
                 ' all entries that require a password:
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
             
             <exception cref="T:System.InvalidOperationException">
             Thrown in the setter if EncryptionAlgorithm.Unsupported is specified, or
             if setting the property on an entry read from a zip archive.
             </exception>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption">ZipFile.Encryption</seealso>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password">
             <summary>
             The Password to be used when encrypting a <c>ZipEntry</c> upon
             <c>ZipFile.Save()</c>, or when decrypting an entry upon Extract().
             </summary>
            
             <remarks>
             <para>
             This is a write-only property on the entry. Set this to request that the
             entry be encrypted when writing the zip archive, or set it to specify the
             password to be used when extracting an existing entry that is encrypted.
             </para>
            
             <para>
             The password set here is implicitly used to encrypt the entry during the
             <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> operation, or to decrypt during the <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract"/> or <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader"/> operation.  If you set the
             Password on a <c>ZipEntry</c> after calling <c>Save()</c>, there is no effect.
             </para>
            
             <para>
             Consider setting the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption"/> property when using a
             password. Answering concerns that the standard password protection supported by
             all zip tools is weak, WinZip has extended the ZIP specification with a way to
             use AES Encryption to protect entries in the Zip file. Unlike the "PKZIP 2.0"
             encryption specified in the PKZIP specification, <see href=
             "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES Encryption</see>
             uses a standard, strong, tested, encryption algorithm. DotNetZip can create zip
             archives that use WinZip-compatible AES encryption, if you set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption"/> property. But, archives created that use AES encryption may
             not be readable by all other tools and libraries. For example, Windows Explorer
             cannot read a "compressed folder" (a zip file) that uses AES encryption, though
             it can read a zip file that uses "PKZIP encryption."
             </para>
            
             <para>
             The <see cref="T:ArtOfTest.WebAii.Zip.Zip.ZipFile"/> class also has a <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>
             property.  This property takes precedence over any password set on the ZipFile
             itself.  Typically, you would use the per-entry Password when most entries in
             the zip archive use one password, and a few entries use a different password.
             If all entries in the zip file use the same password, then it is simpler to just
             set this property on the ZipFile itself, whether creating a zip archive or
             extracting a zip archive.
             </para>
            
             <para>
             Some comments on updating archives: If you read a <c>ZipFile</c>, you cannot
             modify the password on any encrypted entry, except by extracting the entry
             with the original password (if any), removing the original entry via <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(ArtOfTest.WebAii.Zip.Zip.ZipEntry)"/>, and then adding a new entry with a
             new Password.
             </para>
            
             <para>
             For example, suppose you read a <c>ZipFile</c>, and there is an encrypted entry.
             Setting the Password property on that <c>ZipEntry</c> and then calling
             <c>Save()</c> on the <c>ZipFile</c> does not update the password on that entry in
             the archive.  Neither is an exception thrown. Instead, what happens during
             the <c>Save()</c> is the existing entry is copied through to the new zip
             archive, in its original encrypted form. Upon re-reading that archive, the
             entry can be decrypted with its original password.
             </para>
            
             <para>
             If you read a ZipFile, and there is an un-encrypted entry, you can set the
             <c>Password</c> on the entry and then call Save() on the ZipFile, and get
             encryption on that entry.
             </para>
            
             </remarks>
            
             <example>
             <para>
             This example creates a zip file with two entries, and then extracts the
             entries from the zip file.  When creating the zip file, the two files are
             added to the zip file using password protection. Each entry uses a different
             password.  During extraction, each file is extracted with the appropriate
             password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 ZipEntry entry;
                 entry= zip.AddFile("Declaration.txt");
                 entry.Password= "123456!";
                 entry = zip.AddFile("Report.xls");
                 entry.Password= "1Secret!";
                 zip.Save("EncryptedArchive.zip");
             }
             
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 ZipEntry entry;
                 entry = zip["Declaration.txt"];
                 entry.Password = "123456!";
                 entry.Extract("extractDir");
                 entry = zip["Report.xls"];
                 entry.Password = "1Secret!";
                 entry.Extract("extractDir");
             }
             
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim entry as ZipEntry
                 entry= zip.AddFile("Declaration.txt")
                 entry.Password= "123456!"
                 entry = zip.AddFile("Report.xls")
                 entry.Password= "1Secret!"
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 Dim entry as ZipEntry
                 entry = zip("Declaration.txt")
                 entry.Password = "123456!"
                 entry.Extract("extractDir")
                 entry = zip("Report.xls")
                 entry.Password = "1Secret!"
                 entry.Extract("extractDir")
             End Using
             
             </code>
            
             </example>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password">ZipFile.Password</seealso>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OverwriteOnExtract">
            <summary>
            Specifies that the extraction should overwrite any existing files. This
            property is Obsolete.
            </summary>
            <remarks>
            This property is Obsolete. Please don't use it!  Instead, use property <see
            cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>.  If you must use it, you should know this:
            this property applies only when calling an Extract method. By default this
            property is false.
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
            
             <remarks>
               <para>
                 This property affects the behavior of the Extract methods (one of the
                 <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when
                 extraction would would overwrite an existing filesystem file. If you do
                 not set this property, the library throws an exception when extracting
                 an entry would overwrite an existing file.
               </para>
            
               <para>
                 This property has no effect when extracting to a stream, or when the file to be
                 extracted does not already exist. 
               </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>
            
             <example>
             This example shows how to set the ExtractExistingFile property in an
             ExtractProgress event, in response to user input. The ExtractProgress event
             is invoked if and only if the ExtractExistingFile property was previously
             set to <c>ExtractExistingFileAction.InvokeExtractProgressEvent</c>.
             <code lang="C#">
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
                     Console.WriteLine("extract {0} ", e.CurrentEntry.FileName);
                 
                 else if (e.EventType == ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite)
                 {
                     ZipEntry entry = e.CurrentEntry;
                     string response = null;
                     // Ask the user if he wants overwrite the file 
                     do
                     {
                         Console.Write("Overwrite {0} in {1} ? (y/n/C) ", entry.FileName, e.ExtractLocation);
                         response = Console.ReadLine();
                         Console.WriteLine();
                         
                     } while (response != null &amp;&amp; response[0]!='Y' &amp;&amp; response[0]!='N' &amp;&amp; response[0]!='C');
            
                     if  (response[0]=='C')
                         e.Cancel = true;
                     else if (response[0]=='Y')
                         entry.ExtractExistingFile = ExtractExistingFileAction.OverwriteSilently;
                     else
                         entry.ExtractExistingFile= ExtractExistingFileAction.DoNotOverwrite;
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ZipErrorAction">
             <summary>
               The action the library should take when an error is encountered while
               opening or reading files as they are added to a zip archive. 
             </summary>
            
             <remarks>
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling Adddirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened bby another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.IncludedInMostRecentSave">
            <summary>
            Indicates whether the entry was included in the most recent save.
            </summary>
            <remarks>
            An entry can be excluded or skipped from a save if there is an error
            opening or reading the entry.
            </remarks>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.WillReadTwiceOnInflation">
             <summary>
             A callback that allows the application to specify whether multiple reads of the
             stream should be performed, in the case that a compression operation actually
             inflates the size of the file data.  
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm in DeflateStream can
             result an increase in the size of the data.  This "inflation" can happen with
             previously compressed files, such as a zip, jpg, png, mp3, and so on.  In a few
             tests, inflation on zip files can be as large as 60%!  Inflation can also happen
             with very small files.  In these cases, by default, the DotNetZip library
             discards the compressed bytes, and stores the uncompressed file data into the
             zip archive.  This is an optimization where smaller size is preferred over
             longer run times.
             </para>
            
             <para>
             The application can specify that compression is not even tried, by setting the
             ForceNoCompression flag.  In this case, the compress-and-check-sizes process as
             decribed above, is not done.
             </para>
            
             <para>
             In some cases, neither choice is optimal.  The application wants compression,
             but in some cases also wants to avoid reading the stream more than once.  This
             may happen when the stream is very large, or when the read is very expensive, or
             when the difference between the compressed and uncompressed sizes is not
             significant.
             </para>
            
             <para>
             To satisfy these applications, this delegate allows the DotNetZip library to ask
             the application to for approval for re-reading the stream.  As with other
             properties (like Password and ForceNoCompression), setting the corresponding
             delegate on the <c>ZipFile</c> class itself will set it on all <c>ZipEntry</c> items that are
             subsequently added to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WillReadTwiceOnInflation"/>
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zip.ReReadApprovalCallback"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.WantCompression">
             <summary>
             A callback that allows the application to specify whether compression should
             be used for a given entry that is about to be added to the zip archive.
             </summary>
            
             <remarks>
             See <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression" />
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.UseUnicodeAsNecessary">
             <summary>
             Set to indicate whether to use UTF-8 encoding for filenames and 
             comments.  
             </summary>
            
             <remarks>
            
             <para> If this flag is set, the comment and filename for the entry will be
             encoded with UTF-8, as described in <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification</see>, if necessary. "Necessary" means, the filename or entry
             comment (if any) cannot be reflexively encoded and decoded using the default
             code page, IBM437.  </para>
            
             <para>
             Setting this flag to true is equivalent to setting
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ProvisionalAlternateEncoding"/> to <c>System.Text.Encoding.UTF8</c>.
             </para>
            
             <para> This flag has no effect or relation to the text encoding used within the file
             itself. </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use for the FileName and Comment on this ZipEntry, when the 
             default encoding is insufficient.
             </summary>
            
             <remarks>
            
             <para>
             This is a long and odd name for a property, but there's a good reason for
             it. According to <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">the Zip
             specification from PKWare</see>, filenames and comments for a
             <c>ZipEntry</c> are encoded either with IBM437 or with UTF8.  But, some zip
             archiver tools or libraries do not follow the specification, and instead
             encode characters using the system default code page, or an arbitrary code
             page.  For example, WinRAR when run on a machine in Shanghai may encode
             filenames with the Chinese (Big-5) code page.  This behavior is contrary to
             the Zip specification, but it occurs anyway.  This property exists to
             support that non-compliant behavior when reading or writing zip files.
             </para>
            
             <para>
             When writing zip archives that will be read by one of these other archivers,
             use this property to specify the code page to use when encoding filenames
             and comments into the zip file, when the IBM437 code page will not suffice.
             </para>
            
             <para>
             Be aware that a zip file created after you've explicitly specified the code
             page will not be compliant to the PKWare specification, and may not be
             readable by compliant archivers.  On the other hand, many archivers are
             non-compliant and can read zip files created in arbitrary code pages. For
             example, if you run WinRar on your PC desktop in Kyoto, Japan, you will
             probably be able to open zip files that we encoded by DotNetZip in the
             Shift_JIS code page.
             </para>
            
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no
             standard way for the creator (DotNetZip) to specify in the zip file which
             code page has been used. DotNetZip is not able to inspect the zip file and
             determine the codepage used for the entries within it. Therefore, you, the
             application author, must determine that.  If you read a zip file using a
             codepage other than the one used to encode the zipfile, this may result in
             filenames that are not legal in the filesystem, and you will get exceptions
             during calls to <c>Extract()</c> methods for those entries.  Caveat Emptor.
             </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ActualEncoding">
             <summary>
             The text encoding actually used for this ZipEntry.
             </summary>
            
             <remarks>
            
             <para> This read-only property describes the encoding used by the
             <c>ZipEntry</c>.  If the entry has been read in from an existing ZipFile, then
             it may take the value UTF-8, if the entry is coded to specify UTF-8.  If the
             entry does not specify UTF-8, the typical case, then the encoding used is
             whatever the application specified in the call to <c>ZipFile.Read()</c>. If the
             application has used one of the overloads of <c>ZipFile.Read()</c> that does not
             accept an encoding parameter, then the encoding used is IBM437, which is the
             default encoding described in the ZIP specification.  </para>
            
             <para> If the entry is being created, then the value of ActualEncoding is taken
             according to the logic described in the documentation for <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" />.  </para>
            
             <para> An application might be interested in retrieving this property to see if
             an entry read in from a file has used Unicode (UTF-8).  </para>
            
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" />
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.IsText">
             <summary>
             Indicates whether an entry is mark as a text file.
             </summary>
             <remarks>
            
             <para>
             The ZIP format includes a provision for specifying whether an entry in the
             zip archive is a text or binary file.  Such a distinction may seem irrelevant
             now, but some zip tools or libraries, in particular older PKUnzip on IBM
             mainframes, require this bit to be set in order to unzip text and binary
             files properly.  Set this property to true to set the Text bit for an entry
             that represents a text file, if you want your zip files to be readable by
             these older zip tools and libraries.
             </para>
            
             <para>
             When writing a zip file, you must set the property before calling
             <c>Save()</c> on the ZipFile.
             </para>
            
             <para>
             If you are not having compatibility problems with zip archives, you can
             safely ignore this property.
             </para>
             </remarks>
            
             <example>
             <code>
             using (var zip = new ZipFile())
             {
                 var e = zip.UpdateFile("Descriptions.txt", "");
                 e.IsText = true;
                 zip.Save(zipPath);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 Dim e2 as ZipEntry = zip.AddFile("Descriptions.txt", "")
                 e.IsText= True
                 zip.Save(zipPath)
             End Using
             </code>
             </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract">
             <summary>
             Extract the entry to the filesystem, starting at the current working directory. 
             </summary>
             
             <overloads>
             This method has a bunch of overloads! One of them is sure to be
             the right one for you... If you don't like these, check out the 
             <c>ExtractWithPassword()</c> methods.
             </overloads>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
            
             <remarks>
            
             <para> This method extracts an entry from a zip file into the current working
             directory.  The path of the entry as extracted is the full path as specified in
             the zip archive, relative to the current working directory.  After the file is
             extracted successfully, the file attributes and timestamps are set.  </para>
            
             <para>
             The action taken when extraction an entry would overwrite an existing file
             is determined by the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile" /> property. 
             </para>
            
             <para>
             See the remarks the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property, for some details 
             about how the last modified time of the file is set after extraction.
             </para>
            
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.Boolean)">
            <summary>
            Extract the entry to a file in the filesystem, potentially overwriting
            any existing file. This method is Obsolete.
            </summary>
            <remarks>
            <para>
            This method is Obsolete, please don't use it.  Please use method <see
            cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/> instead.
            </para>
            <para>
            See the remarks on the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property, for some details 
            about how the last modified time of the created file is set after extraction.
            </para>
            </remarks>
            <param name="overwrite">
            true if the caller wants to overwrite an existing bfile 
            by the same name in the filesystem.
            </param>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
            <summary>
            Extract the entry to a file in the filesystem, using the specified behavior 
            when extraction would overwrite an existing file.
            </summary>
            <remarks>
            <para>
            See the remarks on the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property, for some details 
            about how the last modified time of the file is set after extraction.
            </para>
            </remarks>
            <param name="extractExistingFile">The action to take if extraction would 
            overwrite an existing file.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the entry to the specified stream. 
            </summary>
            
            <remarks>
            
            <para>
            The caller can specify any write-able stream, for example <see
            cref="M:System.Console.OpenStandardOutput"/>, a <see
            cref="T:System.IO.FileStream"/>, a <see cref="T:System.IO.MemoryStream"/>, or
            ASP.NET's <c>Response.OutputStream</c>.
            The content will be decrypted and decompressed as necessary. If the entry is
            encrypted and no password is provided, this method will throw.
            </para>
            
            </remarks>
            
            <param name="stream">the stream to which the entry should be extracted.  </param>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory. 
             </summary>
             
             <param name="baseDirectory">the pathname of the base directory</param>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String)"/>
             
             <example>
             This example extracts only the entries in a zip file that are .txt files, 
             into a directory called "textfiles".
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt")) 
                 {
                   zip[s1].Extract("textfiles");
                 }
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             
             <remarks>
            
             <para> Using this method, existing entries in the filesystem will not be
             overwritten. If you would like to force the overwrite of existing files, see the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/> property, or call <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>. </para>
            
             <para>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String,System.Boolean)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory, 
             and potentially overwriting existing files in the filesystem. 
             </summary>
             
             <remarks>
             <para>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
             
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="overwrite">If true, overwrite any existing files if necessary
             upon extraction.</param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory, and
             using the specified behavior when extraction would overwrite an existing file.
             </summary>
             
             <remarks>
             <para>
             See the remarks on the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
            
             <example>
             <code lang="C#">
             String sZipPath = "Airborne.zip";
             String sFilePath = "Readme.txt";
             String sRootFolder = "Digado";
             using (ZipFile zip = ZipFile.Read(sZipPath))
             {
               if (zip.EntryFileNames.Contains(sFilePath))
               {
                 // use the string indexer on the zip file
                 zip[sFileName].Extract(sRootFolder,
                                        ExtractExistingFileAction.OverwriteSilently);
               }
             }
             </code>
             
             <code lang="VB">
             Dim sZipPath as String = "Airborne.zip"
             Dim sFilePath As String = "Readme.txt"
             Dim sRootFolder As String = "Digado"
             Using zip As ZipFile = ZipFile.Read(sZipPath)
               If zip.EntryFileNames.Contains(sFilePath)
                 ' use the string indexer on the zip file
                 zip(sFilePath).Extract(sRootFolder, _
                                        ExtractExistingFileAction.OverwriteSilently)
               End If
             End Using
             </code>
             </example>
            
             <param name="baseDirectory">the pathname of the base directory</param>
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String)">
             <summary>
             Extract the entry to the filesystem, using the current working directory
             and the specified password. 
             </summary>
            
             <overloads>
             This method has a bunch of overloads! One of them is sure to be
             the right one for you...
             </overloads>
                     
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
            
             <para> Existing entries in the filesystem will not be overwritten. If you would
             like to force the overwrite of existing files, see the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>property, or call <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>.</para>
            
             <para>
             See the remarks on the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.LastModified"/> property for some details 
             about how the "last modified" time of the created file is set.
             </para>
             </remarks>
             
             <example>
             In this example, entries that use encryption are extracted using a particular password.
             <code>
             using (var zip = ZipFile.Read(FilePath))
             {
                 foreach (ZipEntry e in zip)
                 {
                     if (e.UsesEncryption)
                         e.ExtractWithPassword("Secret!");
                     else
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
                 Dim e As ZipEntry
                 For Each e In zip
                     If (e.UsesEncryption)
                       e.ExtractWithPassword("Secret!")
                     Else
                       e.Extract
                     End If 
                 Next
             End Using
             </code>
             </example>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String,System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory,
             and using the specified password. 
             </summary>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>
            
             <remarks>
             <para> Existing entries in the filesystem will not be overwritten. If you would
             like to force the overwrite of existing files, see the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>property, or call <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>.</para>
            
             <para>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </para>
             </remarks>
             
             <param name="baseDirectory">The pathname of the base directory.</param>
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.Boolean,System.String)">
            <summary>
            Extract the entry to a file in the filesystem, potentially overwriting
            any existing file.
            </summary>
            
            <remarks>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
            
            <param name="overwrite">true if the caller wants to overwrite an existing 
            file by the same name in the filesystem.</param>
            <param name="password">The Password to use for decrypting the entry.</param>
            <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)">
            <summary>
            Extract the entry to a file in the filesystem, relative to the current directory,
            using the specified behavior when extraction would overwrite an existing file.
            </summary>
            
            <remarks>
            <para>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </para>
            </remarks>
            
            <param name="password">The Password to use for decrypting the entry.</param>
            
            <param name="extractExistingFile">
            The action to take if extraction would overwrite an existing file.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String,System.Boolean,System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory, 
             and potentially overwriting existing files in the filesystem. 
             </summary>
             
             <remarks>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="overwrite">If true, overwrite any existing files if necessary
             upon extraction.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction,System.String)">
             <summary>
             Extract the entry to the filesystem, starting at the specified base directory, and
             using the specified behavior when extraction would overwrite an existing file.
             </summary>
             
             <remarks>
             See the remarks on the LastModified property, for some details 
             about how the last modified time of the created file is set.
             </remarks>
            
             <param name="baseDirectory">the pathname of the base directory</param>
            
             <param name="extractExistingFile">The action to take if extraction would
             overwrite an existing file.</param>
            
             <param name="password">The Password to use for decrypting the entry.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractWithPassword(System.IO.Stream,System.String)">
            <summary>
            Extracts the entry to the specified stream, using the specified Password.
            For example, the caller could extract to Console.Out, or to a MemoryStream.
            </summary>
            
            <remarks>
            See the remarks on the LastModified property, for some details 
            about how the last modified time of the created file is set.
            </remarks>
            
            <param name="stream">the stream to which the entry should be extracted.  </param>
            <param name="password">The password to use for decrypting the entry.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader">
             <summary>
             Opens the backing stream for the zip entry in the archive, for reading. 
             </summary>
             
             <remarks>
            
             <para>
             DotNetZip offers a variety of ways to extract entries from a zip file.  This
             method allows an application to extract and entry by reading a Stream. 
             </para>
            
             <para>
             The return value is a <see cref="T:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream"/>.  Use it
             as you would any stream for reading.  The data you get by calling <see
             cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> on that stream will be decrypted and
             decompressed.
             </para>
             
             <para>
             CrcCalculatorStream adds one additional feature: it keeps a CRC32 checksum
             on the bytes of the stream as it is read.  The CRC value is available in the
             <see cref="P:ArtOfTest.WebAii.Zip.Zlib.CrcCalculatorStream.Crc"/> property on the
             <c>CrcCalculatorStream</c>.  When the read is complete, this CRC
             <em>should</em> be checked against the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Crc"/> property
             on the <c>ZipEntry</c> to validate the content of the ZipEntry.  You don't
             have to validate the entry using the CRC, but you should. Check the example
             for how to do this.
             </para>
             
             <para>
             If the entry is protected with a password, then you need to provide a
             password prior to calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader"/>, either by setting the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password"/> property on the entry, or the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property on the <c>ZipFile</c> itself. Or, you can
             use <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader(System.String)" />, the overload of OpenReader that
             accepts a password parameter.
             </para>
             
             <para>
             If you want to extract entry data into a stream that is already opened, like
             a <see cref="T:System.IO.FileStream"/>, consider the <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.IO.Stream)"/> method.
             </para>
             
             </remarks>
             
             <example>
             This example shows how to open a zip archive, then read in a named entry via
             a stream.  After the read loop is complete, the code compares the calculated
             during the read loop with the expected CRC on the <c>ZipEntry</c>, to verify
             the extraction.
             <code>
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               ZipEntry e1= zip["Elevation.mp3"];
               using (Ionic.Zlib.CrcCalculatorStream s = e1.OpenReader())
               {
                 byte[] buffer = new byte[4096];
                 int n, totalBytesRead= 0;
                 do {
                   n = s.Read(buffer,0, buffer.Length);
                   totalBytesRead+=n; 
                 } while (n&gt;0);
                  if (s.Crc32 != e1.Crc32)
                   throw new Exception(string.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32));
                  if (totalBytesRead != e1.UncompressedSize)
                   throw new Exception(string.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize));
               }
             }
             </code>
             <code lang="VB">
               Using zip As New ZipFile(ZipFileToRead)
                   Dim e1 As ZipEntry = zip.Item("Elevation.mp3")
                   Using s As Ionic.Zlib.CrcCalculatorStream = e1.OpenReader
                       Dim n As Integer
                       Dim buffer As Byte() = New Byte(4096) {}
                       Dim totalBytesRead As Integer = 0
                       Do
                           n = s.Read(buffer, 0, buffer.Length)
                           totalBytesRead = (totalBytesRead + n)
                       Loop While (n &gt; 0)
                       If (s.Crc32 &lt;&gt; e1.Crc32) Then
                           Throw New Exception(String.Format("The Zip Entry failed the CRC Check. (0x{0:X8}!=0x{1:X8})", s.Crc32, e1.Crc32))
                       End If
                       If (totalBytesRead &lt;&gt; e1.UncompressedSize) Then
                           Throw New Exception(String.Format("We read an unexpected number of bytes. ({0}!={1})", totalBytesRead, e1.UncompressedSize))
                       End If
                   End Using
               End Using
             </code>
             </example>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Extract(System.IO.Stream)"/>
             <returns>The Stream for reading.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader(System.String)">
            <summary>
            Opens the backing stream for an encrypted zip entry in the archive, for reading. 
            </summary>
            
            <remarks>
            <para>
            See the documentation on the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.OpenReader"/> method for full
            details.  This overload allows the application to specify a password for the
            <c>ZipEntry</c> to be read.
            </para>
            </remarks>
            
            <param name="password">The password to use for decrypting the entry.</param>
            <returns>The Stream for reading.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ValidateOutput(System.String,System.IO.Stream,System.String@)">
            <summary>
            Validates that the args are consistent.  
            </summary>
            <remarks>
            Only one of {baseDir, outStream} can be non-null.
            If baseDir is non-null, then the outputFile is created.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Read(ArtOfTest.WebAii.Zip.Zip.ZipFile,System.Boolean)">
            <summary>
            Reads one <c>ZipEntry</c> from the given stream.  If the entry is encrypted, we don't
            decrypt at this point.  We also do not decompress.  Mostly we read metadata.
            </summary>
            <param name="zf">the zipfile this entry belongs to.</param>
            <param name="first">true of this is the first entry being read from the stream.</param>
            <returns>the <c>ZipEntry</c> read from the stream.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.PrepSourceStream">
             <summary>
             Stores the position of the entry source stream, or, if the position is
             already stored, seeks to that position.
             </summary>
            
             <remarks>
             This method is called in prep for reading the source stream.  If PKZIP
             encryption is used, then we need to calc the CRC32 before doing the
             encryption.  Hence we need to be able to seek backward in the source when
             saving the ZipEntry. This method is called from the place which calculates
             the CRC, and also from the method that does the encryption of the file data.
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CopyMetaData(ArtOfTest.WebAii.Zip.Zip.ZipEntry)">
            <summary>
            Copy metadata that may have been changed by the app.  We do this when
            resetting the zipFile instance.  If the app calls Save() on a ZipFile, then
            tries to party on that file some more, we may need to Reset() it , which
            means re-reading the entries and then copying the metadata.  I think.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource">
            <summary>
            An enum that specifies the source of the ZipEntry. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource.None">
            <summary>
            Default value.  Invalid on a bonafide ZipEntry.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource.FileSystem">
            <summary>
            The entry was instantiated by calling AddFile() or another method that 
            added an entry from the filesystem.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource.Stream">
            <summary>
            The entry was instantiated via <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String)"/> or
            <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/> .
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntrySource.ZipFile">
            <summary>
            The ZipEntry was instantiated by reading a zipfile.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp">
            <summary>
            An enum that specifies the type of timestamp available on the ZipEntry. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp.None">
            <summary>
            Default value.  
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp.DOS">
            <summary>
            A DOS timestamp with 2-second precision.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp.Windows">
            <summary>
            A Windows timestamp with 100-ns precision.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp.Unix">
            <summary>
            A Unix timestamp with 1-second precision.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipEntryTimestamp.InfoZip1">
            <summary>
            A Unix timestamp with 1-second precision, stored in InfoZip v1 format.  This
            format is outdated and is supported for reading archives only.  
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipErrorAction">
             <summary>
             An enum providing the options when an error occurs during opening or reading
             of a file or directory to be added to a zip file. 
             </summary>
            
             <remarks>
              <para>
                This enum describes the actions that the library can take when an error occurs
                opening or reading a file, as it is being added to or saved into a Zip archive. 
              </para>
            
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling Adddirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened bby another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
             </remarks>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipErrorAction.Throw">
            <summary>
            Throw an exception when an error occurs while zipping.  This is the default
            behavior.  (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipErrorAction.Skip">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            skip the file causing the error, and continue zipping.  (For COM clients,
            this is a 1.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipErrorAction.Retry">
            <summary>
            When an error occurs during zipping, for example a file cannot be opened,
            retry the operation that caused the error. 
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipErrorAction.InvokeErrorEvent">
            <summary>
            When an error occurs, invoke the zipError event.  The event type used is
            <see cref="F:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventType.Error_Saving"/>.  A typical use of this option:
            a GUI application may wish to pop up a dialog to allow the user to view the
            error that occurred, and choose an appropriate action.  After your
            processing in the error event, if you want to skip the file, set <see
            cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ZipErrorAction"/> on the
            <c>ZipProgressEventArgs.CurrentEntry</c> to <c>Skip</c>.  If you want the
            exception to be thrown, set <c>ZipErrorAction</c> on the <c>CurrentEntry</c>
            to <c>Throw</c>.  If you want to cancel the zip, set
            <c>ZipProgressEventArgs.Cancel</c> to true.  Cancelling differs from using
            Skip in that a cancel will not save any further entries, if there are any.
            (For COM clients, the value of this enum is a 3.)
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.ZipFile">
            <summary>
            The ZipFile type represents a zip archive file.  This is the main type in the
            DotNetZip class library.  This class reads and writes zip files, as defined in
            the format for zip described by PKWare.  The compression for this implementation
            was, at one time, based on the System.IO.Compression.DeflateStream base class in
            the .NET Framework base class library, available in v2.0 and later of the .NET
            Framework. As of v1.7 of DotNetZip, the compression is provided by a
            managed-code version of Zlib, included with DotNetZip.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String)">
             <summary>
             Adds an item, either a file or a directory, to a zip file archive.  
             </summary>
             
             <remarks>
             <para>
             This method is handy if you are adding things to zip archive and don't want
             to bother distinguishing between directories or files.  Any files are added
             as single entries.  A directory added through this method is added
             recursively: all files and subdirectories contained within the directory are
             added to the <c>ZipFile</c>.
             </para>
             
             <para>
             The name of the item may be a relative path or a fully-qualified
             path. Remember, the items contained in <c>ZipFile</c> instance get written
             to the disk only when you call ZipFile.Save() or a similar save method.
             </para>
            
             <para>
             The directory name used for the file within the archive is the same as the
             directory name (potentially a relative path) specified in the
             fileOrDirectoryName.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>,
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <overloads>This method has two overloads.</overloads>
             <param name="fileOrDirectoryName">
             the name of the file or directory to add.</param>
             
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String,System.String)">
             <summary>
             Adds an item, either a file or a directory, to a zip file archive, 
             explicitly specifying the directory path to be used in the archive. 
             </summary>
             
             <remarks>
             <para>
             If adding a directory, the add is recursive on all files and subdirectories 
             contained within it. 
             </para>
             <para>
             The name of the item may be a relative path or a fully-qualified path.
             The item added by this call to the <c>ZipFile</c> is not written to the zip file
             archive until the application calls Save() on the <c>ZipFile</c>. 
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used in the archive, which would override the 
             "natural" path of the filesystem file.
             </para>
             
             <para>
             Encryption will be used on the file data if the Password
             has been set on the <c>ZipFile</c> object, prior to calling this method.
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, 
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, and <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of this call will be
             applied to the <c>ZipEntry</c> added.
             </para>
            
             </remarks>
             
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown if the file or directory passed in does not exist. 
             </exception>
            
             <param name="fileOrDirectoryName">the name of the file or directory to add.
             </param>
            
             <param name="directoryPathInArchive">
             The name of the directory path to use within the zip archive.  This path
             need not refer to an extant directory in the current filesystem.  If the
             files within the zip are later extracted, this is the path used for the
             extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
             path on the fileOrDirectoryName.  Passing the empty string ("") will insert
             the item at the root path within the archive.
             </param>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <example>
             This example shows how to zip up a set of files into a flat hierarchy,
             regardless of where in the filesystem the files originated. The resulting
             zip archive will contain a toplevel directory named "flat", which itself
             will contain files Readme.txt, MyProposal.docx, and Image1.jpg.  A
             subdirectory under "flat" called SupportFiles will contain all the files in
             the "c:\SupportFiles" directory on disk.
             
             <code>
             String[] itemnames= { 
               "c:\\fixedContent\\Readme.txt",
               "MyProposal.docx",
               "c:\\SupportFiles",  // a directory
               "images\\Image1.jpg"
             };
            
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 for (int i = 1; i &lt; itemnames.Length; i++)
                 {
                   // will add Files or Dirs, recurses and flattens subdirectories
                   zip.AddItem(itemnames[i],"flat"); 
                 }
                 zip.Save(ZipToCreate);
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
            
             <code lang="VB">
               Dim itemnames As String() = _
                 New String() { "c:\fixedContent\Readme.txt", _
                                "MyProposal.docx", _
                                "SupportFiles", _
                                "images\Image1.jpg" }
               Try 
                   Using zip As New ZipFile
                       Dim i As Integer
                       For i = 1 To itemnames.Length - 1
                           ' will add Files or Dirs, recursing and flattening subdirectories.
                           zip.AddItem(itemnames(i), "flat")
                       Next i
                       zip.Save(ZipToCreate)
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString())
               End Try
             </code>
             </example>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String)">
             <summary>
             Adds a File to a Zip file archive. 
             </summary>
             <remarks>
            
             <para>
             The file added by this call to the <c>ZipFile</c> is not written to the zip
             file archive until the application calls Save() on the <c>ZipFile</c>.
             </para>
            
             <para>
             This method will throw an Exception if an entry with the same name already
             exists in the <c>ZipFile</c>.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
            
             </remarks>
             
             <example>
             <para>
             In this example, three files are added to a Zip archive. The ReadMe.txt file
             will be placed in the root of the archive. The .png file will be placed in a
             folder within the zip called photos\personal.  The pdf file will be included
             into a folder within the zip called Desktop.
             </para>
             <code>
                try
                {
                  using (ZipFile zip = new ZipFile())
                  {
                    zip.AddFile("c:\\photos\\personal\\7440-N49th.png");
                    zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf");
                    zip.AddFile("ReadMe.txt");
            
                    zip.Save("Package.zip");
                  }
                }
                catch (System.Exception ex1)
                {
                  System.Console.Error.WriteLine("exception: " + ex1);
                }
             </code>
             
             <code lang="VB">
              Try 
                   Using zip As ZipFile = New ZipFile
                       zip.AddFile("c:\photos\personal\7440-N49th.png")
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf")
                       zip.AddFile("ReadMe.txt")
                       zip.Save("Package.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1.ToString)
               End Try
             </code>
             </example>
             
             <overloads>This method has two overloads.</overloads>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String)"/>
            
             <param name="fileName">
             The name of the file to add. It should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
             <returns>The <c>ZipEntry</c> corresponding to the File added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String,System.String)">
             <summary>
             Adds a File to a Zip file archive, potentially overriding the path to be used
             within the zip archive.
             </summary>
             
             <remarks>
             <para>
             The file added by this call to the <c>ZipFile</c> is not written to the zip file
             archive until the application calls Save() on the <c>ZipFile</c>. 
             </para>
             
             <para>
             This method will throw an Exception if an entry with the same name already exists
             in the <c>ZipFile</c>.
             </para>
            
             <para>
             This version of the method allows the caller to explicitly specify the 
             directory path to be used in the archive. 
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, 
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, and <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of this call will be
             applied to the <c>ZipEntry</c> added.
             </para>
            
             </remarks>
             
             <example>
             <para>
             In this example, three files are added to a Zip archive. The ReadMe.txt file
             will be placed in the root of the archive. The .png file will be placed in a
             folder within the zip called images.  The pdf file will be included into a
             folder within the zip called files\docs, and will be encrypted with the
             given password.
             </para>
             <code>
             try
             {
               using (ZipFile zip = new ZipFile())
               {
                 // the following entry will be inserted at the root in the archive.
                 zip.AddFile("c:\\datafiles\\ReadMe.txt", "");
                 // this image file will be inserted into the "images" directory in the archive.
                 zip.AddFile("c:\\photos\\personal\\7440-N49th.png", "images");
                 // the following will result in a password-protected file called 
                 // files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                 zip.Password = "EncryptMe!";
                 zip.AddFile("c:\\Desktop\\2008-Regional-Sales-Report.pdf", "files\\docs");
                 zip.Save("Archive.zip");
               }
             }
             catch (System.Exception ex1)
             {
               System.Console.Error.WriteLine("exception: {0}", ex1);
             }
             </code>
             
             <code lang="VB">
               Try 
                   Using zip As ZipFile = New ZipFile
                       ' the following entry will be inserted at the root in the archive.
                       zip.AddFile("c:\datafiles\ReadMe.txt", "")
                       ' this image file will be inserted into the "images" directory in the archive.
                       zip.AddFile("c:\photos\personal\7440-N49th.png", "images")
                       ' the following will result in a password-protected file called 
                       ' files\\docs\\2008-Regional-Sales-Report.pdf  in the archive.
                       zip.Password = "EncryptMe!"
                       zip.AddFile("c:\Desktop\2008-Regional-Sales-Report.pdf", "files\documents")
                       zip.Save("Archive.zip")
                   End Using
               Catch ex1 As Exception
                   Console.Error.WriteLine("exception: {0}", ex1)
               End Try
             </code>
             </example>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
            
             <param name="fileName">
             The name of the file to add.  The name of the file may be a relative path or 
             a fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the fileName.  This path
             may, or may not, correspond to a real directory in the current filesystem.  If the
             files within the zip are later extracted, this is the path used for the extracted
             file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the path on the
             fileName, if any.  Passing the empty string ("") will insert the item at the root
             path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> corresponding to the file added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{ArtOfTest.WebAii.Zip.Zip.ZipEntry})">
             <summary>
             This method removes a collection of entries from the <c>ZipFile</c>.
             </summary>
            
             <param name="entriesToRemove">
             A collection of ZipEntry instances from this zip file to be removed. For
             example, you can pass in an array of ZipEntry instances; or you can call
             SelectEntries(), and then add or remove entries from that
             ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and pass that
             ICollection to this method.
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntries(System.Collections.Generic.ICollection{System.String})">
             <summary>
             This method removes a collection of entries from the <c>ZipFile</c>, by name.
             </summary>
            
             <param name="entriesToRemove">
             A collection of strings that refer to names of entries to be removed from
             the <c>ZipFile</c>.  For example, you can pass in an array of ZipEntry
             instances; or you can call SelectEntries(), and then add or remove entries
             from that ICollection&lt;ZipEntry&gt; (ICollection(Of ZipEntry) in VB), and
             pass that ICollection to this method.
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.SelectEntries(System.String)" />
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveSelectedEntries(System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             This method adds a set of files to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
             Use this method to add a set of files to the zip archive, in one call.  
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
             The collection of names of the files to add. Each string should refer to a
             file in the filesystem. The name of the file may be a relative path or a
             fully-qualified path.
             </param>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it. 
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save(ZipFileToCreate);
             }
             </code>
             
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Adds or updates a set of files in the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
             Any files that already exist in the archive are updated. Any files that
             don't yet exist in the archive are added.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
             The collection of names of the files to update. Each string should refer to a file in 
             the filesystem. The name of the file may be a relative path or a fully-qualified path. 
             </param>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Adds a set of files to the <c>ZipFile</c>, using the specified directory path 
             in the archive.
             </summary>
            
             <remarks>
             <para>
             Any directory structure that may be present in the filenames contained in
             the list is "flattened" in the archive.  Each file in the list is added to
             the archive in the specified top-level directory.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
             The names of the files to add. Each string should refer to a file in the
             filesystem.  The name of the file may be a relative path or a
             fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the file name.
             This path may, or may not, correspond to a real directory in the current
             filesystem.  If the files within the zip are later extracted, this is the
             path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
             VB) will use the path on each of the <c>fileNames</c>, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
             <summary>
             Adds a set of files to the <c>ZipFile</c>, using the specified directory
             path in the archive, and preserving the full directory structure in the
             filenames.
             </summary>
            
             <remarks>
             <para>
             If preserveDirHierarchy is true, any directory structure present in the
             filenames contained in the list is preserved in the archive.  On the other
             hand, if preserveDirHierarchy is false, any directory structure that may be
             present in the filenames contained in the list is "flattened" in the
             archive; Each file in the list is added to the archive in the specified
             top-level directory.
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
            
             </remarks>
            
             <param name="fileNames">
             The names of the files to add. Each string should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the file name.
             This path may, or may not, correspond to a real directory in the current
             filesystem.  If the files within the zip are later extracted, this is the
             path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
             VB) will use the path on each of the <c>fileNames</c>, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
            
             <param name="preserveDirHierarchy">
             whether the entries in the zip archive will reflect the dir hierarchy that
             is present in each filename.
             </param>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Adds or updates a set of files to the <c>ZipFile</c>, using the specified
             directory path in the archive.
             </summary>
            
             <remarks>
            
             <para>
             Any files that already exist in the archive are updated. Any files that
             don't yet exist in the archive are added.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
             </remarks>
            
             <param name="fileNames">
             The names of the files to add or update. Each string should refer to a file
             in the filesystem.  The name of the file may be a relative path or a
             fully-qualified path.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the file name.
             This path may, or may not, correspond to a real directory in the current
             filesystem.  If the files within the zip are later extracted, this is the
             path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in
             VB) will use the path on each of the <c>fileNames</c>, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String)">
             <summary>
             Adds or Updates a File in a Zip file archive.
             </summary>
             
             <remarks>
             <para>
             This method adds a file to a zip archive, or, if the file already exists in
             the zip archive, this method Updates the content of that given filename in
             the zip archive.  The <c>UpdateFile</c> method might more accurately be
             called "AddOrUpdateFile".
             </para>
            
             <para>
             Upon success, there is no way for the application to learn whether the file
             was added versus updated.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <example>
             This example shows how to Update an existing entry in a zipfile. The first
             call to UpdateFile adds the file to the newly-created zip archive.  The
             second call to UpdateFile updates the content for that file in the zip
             archive.
             <code>
             using (ZipFile zip1 = new ZipFile())
             {
               // UpdateFile might more accurately be called "AddOrUpdateFile"
               zip1.UpdateFile("MyDocuments\\Readme.txt", "");
               zip1.UpdateFile("CustomerList.csv", "");
               zip1.Comment = "This zip archive has been created.";
               zip1.Save("Content.zip");
             }
             
             using (ZipFile zip2 = ZipFile.Read("Content.zip"))
             {
               zip2.UpdateFile("Updates\\Readme.txt", "");
               zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed.";
               zip2.Save();
             }
            
             </code>
             <code lang="VB">
               Using zip1 As New ZipFile
                   ' UpdateFile might more accurately be called "AddOrUpdateFile"
                   zip1.UpdateFile("MyDocuments\Readme.txt", "")
                   zip1.UpdateFile("CustomerList.csv", "")
                   zip1.Comment = "This zip archive has been created."
                   zip1.Save("Content.zip")
               End Using
            
               Using zip2 As ZipFile = ZipFile.Read("Content.zip")
                   zip2.UpdateFile("Updates\Readme.txt", "")
                   zip2.Comment = "This zip archive has been updated: The Readme.txt file has been changed."
                   zip2.Save
               End Using
             </code>
             </example>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="fileName">
             The name of the file to add or update. It should refer to a file in the
             filesystem.  The name of the file may be a relative path or a
             fully-qualified path.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String,System.String)">
             <summary>
             Adds or Updates a File in a Zip file archive.
             </summary>
             
             <remarks>
             <para>
             This method adds a file to a zip archive, or, if the file already exists in
             the zip archive, this method Updates the content of that given filename in
             the zip archive.
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the
             directory path to be used in the archive.  The entry to be added or updated
             is found by using the specified directory path, combined with the basename
             of the specified filename.
             </para>
             
             <para>
             Upon success, there is no way for the application to learn if the file was
             added versus updated.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
             </remarks>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="fileName">
             The name of the file to add or update. It should refer to a file in the filesystem.  
             The name of the file may be a relative path or a fully-qualified path. 
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the
             <c>fileName</c>.  This path may, or may not, correspond to a real directory
             in the current filesystem.  If the files within the zip are later extracted,
             this is the path used for the extracted file.  Passing <c>null</c>
             (<c>Nothing</c> in VB) will use the path on the <c>fileName</c>, if any.
             Passing the empty string ("") will insert the item at the root path within
             the archive.
             </param>
            
             <returns>
             The <c>ZipEntry</c> corresponding to the File that was added or updated.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String)">
             <summary>
             Add or update a directory in a zip archive.  
             </summary>
            
             <remarks>
             If the specified directory does not exist in the archive, then this method
             is equivalent to calling AddDirectory().  If the specified directory already
             exists in the archive, then this method updates any existing entries, and
             adds any new entries. Any entries that are in the zip archive but not in the
             specified directory, are left alone.  In other words, the contents of the
             zip file will be a union of the previous contents and the new files.
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String)"/>
            
             <param name="directoryName">
             The path to the directory to be added to the zip archive, 
             or updated in the zip archive.
             </param>
             
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String,System.String)">
             <summary>
             Add or update a directory in the zip archive at the specified root directory
             in the archive.
             </summary>
            
             <remarks>
             If the specified directory does not exist in the archive, then this method
             is equivalent to calling AddDirectory().  If the specified directory already
             exists in the archive, then this method updates any existing entries, and
             adds any new entries. Any entries that are in the zip archive but not in the
             specified directory, are left alone.  In other words, the contents of the
             zip file will be a union of the previous contents and the new files.
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String,System.String)"/>
            
             <param name="directoryName">
             The path to the directory to be added to the zip archive, or updated in the
             zip archive.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the
             <c>directoryName</c>.  This path may, or may not, correspond to a real
             directory in the current filesystem.  If the files within the zip are later
             extracted, this is the path used for the extracted file.  Passing
             <c>null</c> (<c>Nothing</c> in VB) will use the path on the
             <c>directoryName</c>, if any.  Passing the empty string ("") will insert the
             item at the root path within the archive.
             </param>
             
             <returns>
             The <c>ZipEntry</c> corresponding to the Directory that was added or updated.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String)">
             <summary>
             Add or update a file or directory in the zip archive. 
             </summary>
            
             <remarks>
             <para>
             This is useful when the application is not sure or does not care if the item
             to be added is a file or directory, and does not know or does not care if
             the item already exists in the <c>ZipFile</c>. Calling this method is
             equivalent to calling <c>RemoveEntry()</c> if an entry by the same name
             already exists, followed calling by <c>AddItem()</c>.
             </para>
            
             <para>
             For <c>ZipFile</c> properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String)"/>
            
             <param name="itemName">the path to the file or directory to be added or updated.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateItem(System.String,System.String)">
             <summary>
             Add or update a file or directory.  
             </summary>
            
             <remarks>
             <para>
             This method is useful when the application is not sure or does not care if
             the item to be added is a file or directory, and does not know or does not
             care if the item already exists in the <c>ZipFile</c>. Calling this method is
             equivalent to calling <c>RemoveEntry()</c>, if an entry by that name exists,
             and then calling <c>AddItem()</c>.
             </para>
             
             <para>
             This version of the method allows the caller to explicitly specify the
             directory path to be used for the item being added to the archive.  The
             entry or entries that are added or updated will use the specified
             <c>DirectoryPathInArchive</c>. Extracting the entry from the archive will
             result in a file stored in that directory path.
             </para>
            
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFile(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="itemName">The path for the File or Directory to be added or updated.</param>
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the
             <c>itemName</c>.  This path may, or may not, correspond to a real directory
             in the current filesystem.  If the files within the zip are later extracted,
             this is the path used for the extracted file.  Passing <c>null</c>
             (<c>Nothing</c> in VB) will use the path on the <c>itemName</c>, if any.
             Passing the empty string ("") will insert the item at the root path within
             the archive.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFileFromStream(System.String,System.String,System.IO.Stream)">
             <summary>
             Create an entry in the <c>ZipFile</c> using the given Stream as input.  The
             entry will have the given filename and given directory path.
             </summary>
            
             <remarks>
             This method has been deprecated. Please use <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/>.  This method will be removed in a future
             version of this library.
             </remarks>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFileStream(System.String,System.String,System.IO.Stream)">
             <summary>
             Uses the given stream as input to create an entry in the <c>ZipFile</c>,
             with the given filename and given directory path.
             </summary>
            
             <remarks>
             This method has been deprecated. Please use <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/>.  This method will be removed in a future
             version of this library.
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String)">
             <summary>
             Adds a named entry into the zip archive, taking content for the entry
             from a string.
             </summary>
            
             <remarks>
             Calling this method creates an entry using the given fileName and directory
             path within the archive.  There is no need for a file by the given name to
             exist in the filesystem; the name is used within the zip archive only. The
             content for the entry is encoded using the default text encoding (<see
             cref="P:System.Text.Encoding.Default"/>).
             </remarks>
            
             <param name="content">The content of the file, should it be extracted from
             the zip.</param>
            
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the fileName.
             This path need not correspond to a real directory in the current filesystem
             when creating the zip file.  If the files within the zip are later
             extracted, this is the path used for the extracted file.  Passing
             <c>null</c> (<c>Nothing</c> in VB) will use the path on the fileName, if
             any.  Passing the empty string ("") will insert the item at the root path
             within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
             
             <example>
            
             This example shows how to add an entry to the zipfile, using a string as
             content for that entry.
            
             <code lang="C#">
             string Content = "This string will be the content of the Readme.txt file in the zip archive.";
             using (ZipFile zip1 = new ZipFile())
             {
               zip1.AddFile("MyDocuments\\Resume.doc", "files");
               zip1.AddEntry("Readme.txt", "", Content); 
               zip1.Comment = "This zip file was created at " + System.DateTime.Now.ToString("G");
               zip1.Save("Content.zip");
             }
             
             </code>
             <code lang="VB">
             Public Sub Run()
               Dim Content As String = "This string will be the content of the Readme.txt file in the zip archive."
               Using zip1 As ZipFile = New ZipFile
                 zip1.AddEntry("Readme.txt", "", Content)
                 zip1.AddFile("MyDocuments\Resume.doc", "files")
                 zip1.Comment = ("This zip file was created at " &amp; DateTime.Now.ToString("G"))
                 zip1.Save("Content.zip")
               End Using
             End Sub
             </code>
             </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String,System.Text.Encoding)">
             <summary>
             Adds a named entry into the zip archive, taking content for the entry
             from a string.
             </summary>
            
             <remarks>
            
             <para>Calling this method creates an entry using the given fileName and
             directory path within the archive.  There is no need for a file by the given
             name to exist in the filesystem; the name is used within the zip archive
             only. </para>
             
             <para> The content for the entry is encoded using the given text
             encoding. No Byte-order-mark (BOM) is emitted into the file. </para>
            
             <para>If you wish to create within a zip file a file entry with
             Unicode-encoded content that includes a byte-order-mark, you can convert
             your string to a byte array using the appropriate <see
             cref="M:System.Text.Encoding.GetBytes(System.String)"/> method, then prepend to that byte
             array the output of <see cref="M:System.Text.Encoding.GetPreamble"/>, and use the
             <c>AddEntry(string,string,byte[])</c> method, to add the entry.
             </para>
            
             </remarks>
            
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the <c>fileName</c>.
             This path need not correspond to a real directory in the current filesystem when
             creating the zip file.  If the files within the zip are later extracted, this is
             the path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB)
             will use the path on the <c>fileName</c>, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive.
             </param>
            
             <param name="content">The content of the file, should it be extracted from
             the zip.</param>
            
             <param name="encoding">
             The text encoding to use when encoding the string. Be aware: This is
             distinct from the text encoding used to encode the fileName, as specified in <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)">
             <summary>
             Create an entry in the <c>ZipFile</c> using the given Stream as input.  The
             entry will have the given filename and given directory path.
             </summary>
            
             <remarks>
            
             <para>
             The application can provide an open, readable stream; in this case it will
             be read during the call to <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> or one of its
             overloads.
             </para>
            
             <para>
             In cases where a large number of streams will be added to the
             <c>ZipFile</c>, the application may wish to avoid maintaining all of the
             streams open simultaneously.  To handle this situation, the application can
             provide a <c>null</c> value (<c>Nothing</c> in VB) for the stream, and
             provide a handler for the <see cref="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.SaveProgress"/> event.  Later,
             during the call to <c>ZipFile.Save</c>, DotNetZip will invoke the
             SaveProgress event handler, and within that handler, when the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipProgressEventArgs.EventType">e.EventType</see> is
             <c>ZipProgressEventType.Saving_BeforeWriteEntry</c>, the application can
             dispense the stream for each entry on a just-in-time basis by setting the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/> property.  The application can close or
             dispose the stream for each entry in a similar manner, when the
             <c>e.EventType</c> is
             <c>ZipProgressEventType.Saving_AfterWriteEntry</c>. Check the documentation
             of <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/> for more information and a code
             sample.
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
             
             </remarks>
            
             <example>
             <para>
             This example adds a single entry to a ZipFile via a stream. 
             </para>
            
             <code lang="C#">
             String ZipToCreate = "Content.zip";
             String FileNameInArchive = "Content-From-Stream.bin";
             using (System.IO.Stream StreamToRead = MyStreamOpener())
             {
               using (ZipFile zip = new ZipFile())
               {
                 ZipEntry entry= zip.AddEntry(FileNameInArchive, "basedirectory", StreamToRead);
                 entry.Comment = "The content for this entry in the zip file was obtained from a stream";
                 zip.AddFile("Readme.txt");
                 zip.Save(ZipToCreate);
               }
             }
             
             </code>
             <code lang="VB">
             Dim ZipToCreate As String = "Content.zip"
             Dim FileNameInArchive As String = "Content-From-Stream.bin"
             Using StreamToRead as System.IO.Stream = MyStreamOpener()
               Using zip As ZipFile = New ZipFile()
                 Dim entry as ZipEntry = zip.AddEntry(FileNameInArchive, "basedirectory", StreamToRead)
                 entry.Comment = "The content for this entry in the zip file was obtained from a stream"
                 zip.AddFile("Readme.txt")
                 zip.Save(ZipToCreate)
               End Using
             End Using
             </code>
             </example>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.IO.Stream)"/>
            
             <param name="fileName">the name which is shown in the zip file for the added entry.</param>
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the <c>itemName</c>.
             This path may, or may not, correspond to a real directory in the current
             filesystem.  If the files within the zip are later extracted, this is the path used
             for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the
             path on the <c>fileName</c>, if any.  Passing the empty string ("") will insert the
             item at the root path within the archive.
             </param>
             <param name="stream">the input stream from which to grab content for the file</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFileFromString(System.String,System.String,System.String)">
             <summary>
             Adds a named entry into the zip archive, taking content for the entry
             from a string.
             </summary>
            
             <remarks>
             This method has been deprecated. Please use <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String)"/>.  This method will be removed in a future version of this library.
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.String)">
             <summary>
             Updates the given entry in the <c>ZipFile</c>, using the given string as input.
             </summary>
            
             <remarks>
            
             <para>
             Calling this method is equivalent to removing the <c>ZipEntry</c> for the
             given file name and directory path, if it exists, and then calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String)" />.  See the documentation
             for that method for further explanation. </para>
             
             </remarks>
            
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the <c>fileName</c>.
             This path need not correspond to a real directory in the current filesystem when
             creating the zip file.  If the files within the zip are later extracted, this is
             the path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB)
             will use the path on the <c>fileName</c>, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive.
             </param>
            
             <param name="content">
             The content of the file, should it be extracted from the zip.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.String,System.Text.Encoding)">
             <summary>
             Updates the given entry in the <c>ZipFile</c>, using the given string as content
             for the <c>ZipEntry</c>. 
             </summary>
            
             <remarks>Calling this method is equivalent to removing the <c>ZipEntry</c> for the
             given file name and directory path, if it exists, and then calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String,System.Text.Encoding)" />.
             See the documentation for that method for further explanation. </remarks>
            
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the fileName.
             This path need not correspond to a real directory in the current filesystem
             when creating the zip file.  If the files within the zip are later
             extracted, this is the path used for the extracted file.  Passing
             <c>null</c> (<c>Nothing</c> in VB) will use the path on the <c>fileName</c>,
             if any.  Passing the empty string ("") will insert the item at the root path
             within the archive.
             </param>
            
             <param name="content">
             The content of the file, should it be extracted from the zip.
             </param>
            
             <param name="encoding">
             The text encoding to use when encoding the string. Be aware: This is
             distinct from the text encoding used to encode the filename. See <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" />.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.IO.Stream)">
             <summary>
             Updates the given entry in the <c>ZipFile</c>, using the given stream as
             input, and the given filename and given directory Path.
             </summary>
            
             <remarks>
             <para>
             Calling the method is equivalent to calling RemoveEntry() if an entry by the
             same name already exists, and then calling AddEntry() with the given
             <c>fileName</c> and stream.
             </para>
            
             <para>
             The stream must be open and readable during the call to 
             <c>ZipFile.Save</c>.  You can dispense the stream on a just-in-time basis using
             the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/> property. Check the documentation of that
             property for more information. 
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to the <c>ZipEntry</c> added.
             </para>
            
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/>
            
             <param name="fileName">the name associated to the entry in the zip archive.</param>
             <param name="directoryPathInArchive">
             The root path to be used in the zip archive, 
             for the entry added from the stream.</param>
             <param name="stream">The input stream from which to read file data.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateFileStream(System.String,System.String,System.IO.Stream)">
             <summary>
             Updates the given entry in the <c>ZipFile</c>, using the given stream as
             input, and the given filename and given directory path.
             </summary>
            
             <remarks>
             This method has been deprecated. Please use <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.IO.Stream)"/>.  This method will be removed in a future
             version of this library.
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.Byte[])">
             <summary>
             Add an entry into the zip archive using the given filename and directory
             path within the archive, and the given content for the file. No file is
             created in the filesystem.
             </summary>
            
             <param name="byteContent">The data to use for the entry.</param>
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use for the entry.  This path may, or may not,
             correspond to a real directory in the current filesystem.  If the files
             within the zip are later extracted, this is the path used for the extracted
             file.  Passing <c>null</c> (<c>Nothing</c> in VB) will use the path on the
             <c>fileName</c>, if any. Passing the empty string ("") will insert the item
             at the root path within the archive.
             </param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateEntry(System.String,System.String,System.Byte[])">
             <summary>
             Updates the given entry in the <c>ZipFile</c>, using the given byte array as
             content for the entry.
             </summary>
            
             <remarks>
             Calling this method is equivalent to removing the <c>ZipEntry</c> for the
             given filename and directory path, if it exists, and then calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.String,System.Text.Encoding)" />.
             See the documentation for that method for further explanation.
             </remarks>
            
             <param name="fileName">The filename to use within the archive.</param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the <c>fileName</c>.
             This path need not correspond to a real directory in the current filesystem when
             creating the zip file.  If the files within the zip are later extracted, this is
             the path used for the extracted file.  Passing <c>null</c> (<c>Nothing</c> in VB)
             will use the path on the <c>fileName</c>, if any.  Passing the empty string ("")
             will insert the item at the root path within the archive.
             </param>
            
             <param name="byteContent">The content to use for the <c>ZipEntry</c>.</param>
            
             <returns>The <c>ZipEntry</c> added.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)">
             <summary>
             Adds the contents of a filesystem directory to a Zip file archive. 
             </summary>
             
             <remarks>
             
             <para>
             The name of the directory may be a relative path or a fully-qualified
             path. Any files within the named directory are added to the archive.  Any
             subdirectories within the named directory are also added to the archive,
             recursively.
             </para>
             
             <para>
             Top-level entries in the named directory will appear as top-level 
             entries in the zip archive.  Entries in subdirectories in the named 
             directory will result in entries in subdirectories in the zip archive.
             </para>
             
             <para>
             If you want the entries to appear in a containing directory in the zip
             archive itself, then you should call the AddDirectory() overload that allows
             you to explicitly specify a directory path for use in the archive.
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
            
             </remarks>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String,System.String)"/>
            
             <overloads>This method has 2 overloads.</overloads>
             
             <param name="directoryName">The name of the directory to add.</param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String,System.String)">
             <summary>
             Adds the contents of a filesystem directory to a Zip file archive, 
             overriding the path to be used for entries in the archive. 
             </summary>
             
             <remarks>
             <para>
             The name of the directory may be a relative path or a fully-qualified
             path. The add operation is recursive, so that any files or subdirectories
             within the name directory are also added to the archive.
             </para>
             
             <para>
             Top-level entries in the named directory will appear as top-level 
             entries in the zip archive.  Entries in subdirectories in the named 
             directory will result in entries in subdirectories in the zip archive.
             </para>
             
             <para>
             For ZipFile properties including <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>,
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction"/>, 
             and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>, their respective values at the time of
             this call will be applied to each ZipEntry added.
             </para>
            
             </remarks>
             
             <example>
             <para>
             In this code, calling the ZipUp() method with a value of "c:\reports" for the
             directory parameter will result in a zip file structure in which all entries
             are contained in a toplevel "reports" directory.
             </para>
            
             <code lang="C#">
             public void ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile())
               {
                 zip.AddDirectory(directory, System.IO.Path.GetFileName(directory));
                 zip.Save(targetZip);
               }
             }
             </code>
             </example>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddItem(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddFile(System.String,System.String)"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateDirectory(System.String,System.String)"/>
            
             <param name="directoryName">The name of the directory to add.</param>
             
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the DirectoryName.
             This path may, or may not, correspond to a real directory in the current
             filesystem.  If the zip is later extracted, this is the path used for the
             extracted file or directory.  Passing <c>null</c> (<c>Nothing</c> in VB) or
             the empty string ("") will insert the items at the root path within the
             archive.
             </param>
             
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectoryByName(System.String)">
             <summary>
             Creates a directory in the zip archive.  
             </summary>
             
             <remarks>
             
             <para>
             Use this when you want to create a directory in the archive but there is no
             corresponding filesystem representation for that directory.
             </para>
            
             <para>
             You will probably not need to do this in your code. One of the only times
             you will want to do this is if you want an empty directory in the zip
             archive.  The reason: if you add a file to a zip archive that is stored within a
             multi-level directory, all of the directory tree is implicitly created in
             the zip archive.  
             </para>
             
             </remarks>
             
             <param name="directoryNameInArchive">
             The name of the directory to create in the archive.
             </param>
             <returns>The <c>ZipEntry</c> added.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.FullScan">
             <summary>
             Indicates whether to perform a full scan of the zip file when reading it. 
             </summary>
            
             <remarks>
            
             <para>
             When reading a zip file, if this flag is <c>true</c> (<c>True</c> in
             VB), the entire zip archive will be scanned and searched for entries.
             For large archives, this can take a very, long time. The much more
             efficient default behavior is to read the zip directory, at the end of
             the zip file. However, in some cases the directory is corrupted and it
             is desirable to perform a full scan of the zip file to determine the
             contents of the zip file.
             </para>
            
             <para>
             If you want to track progress, you can set the ReadProgress event. 
             </para>
            
             <para>
             This flag is effective only when calling Initialize.  The Initialize
             method may take a long time to run for large zip files, when
             <c>Fullscan</c> is true.
             </para>
            
             </remarks>
            
             <example>
             This example shows how to read a zip file using the full scan approach,
             and then save it, thereby producing a corrected zip file. 
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.FullScan = true;
                 zip.Initialize(zipFileName);
                 zip.Save(newName);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.FullScan = True
                 zip.Initialize(zipFileName)
                 zip.Save(newName)
             End Using
             </code>
             </example>
            
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.BufferSize">
             <summary>
             Size of the IO buffer used while saving.
             </summary>
             <remarks>
            
             <para>
             First, let me say that you really don't need to bother with this.  It is
             here to allow for optimizations that you probably won't make! It will work
             fine if you don't set or get this property at all. Ok?
             </para>
            
             <para>
             Now that we have <em>that</em> out of the way, the fine print: This
             property affects the size of the buffer that is used for I/O for each entry
             contained in the zip file. When a file is read in to be compressed, it uses
             a buffer given by the size here.  When you update a zip file, the data for
             unmodified entries is copied from the first zip file to the other, through a
             buffer given by the size here.
             </para>
            
             <para>
             Changing the buffer size affects a few things: first, for larger buffer
             sizes, the memory used by the <c>ZipFile</c>, obviously, will be larger
             during I/O operations.  This may make operations faster for very much larger
             files.  Last, for any given entry, when you use a larger buffer there will be
             fewer progress events during I/O operations, because there's one progress
             event generated for each time the buffer is filled and then emptied.
             </para>
            
             <para>
             The default buffer size is 8k.  Increasing the buffer size may speed things
             up as you compress larger files.  But there are no hard-and-fast rules here,
             eh?  You won't know til you test it.  And there will be a limit where ever
             larger buffers actually slow things down.  So as I said in the beginning,
             it's probably best if you don't set or get this property at all.
             </para>
            
             </remarks>
            
             <example>
             This example shows how you might set a large buffer size for efficiency when
             dealing with zip entries that are larger than 1gb. 
             <code lang="C#">
             using (ZipFile zip = new ZipFile())
             {
                 zip.SaveProgress += this.zip1_SaveProgress;
                 zip.AddDirectory(directoryToZip, "");
                 zip.UseZip64WhenSaving = Zip64Option.Always;
                 zip.BufferSize = 65536*8; // 65536 * 8 = 512k
                 zip.Save(ZipFileToCreate);
             }
             </code>
             </example>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CodecBufferSize">
            <summary>
            Size of the work buffer to use for the ZLIB codec during compression.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.FlattenFoldersOnExtract">
            <summary>
            Indicates whether extracted files should keep their paths as
            stored in the zip archive. 
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Strategy">
             <summary>
             The compression strategy to use for all entries.
             </summary>
            
             <remarks>
             This refers to the Strategy used by the ZLIB-compatible compressor. Different
             compression strategies work better on different sorts of data. The strategy parameter
             can affect the compression ratio and the speed of compression but not the correctness
             of the compresssion.  For more information see <see
             cref="T:ArtOfTest.WebAii.Zip.Zlib.CompressionStrategy"/>.
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Name">
             <summary>
             The name of the <c>ZipFile</c>, on disk.
             </summary>
            
             <remarks>
            
             <para>
             When the <c>ZipFile</c> instance was created by reading an archive using one
             of the <c>ZipFile.Read</c> methods, this property represents the name of the
             zip file that was read.  When the <c>ZipFile</c> instance was created by
             using the no-argument constructor, this value is <c>null</c> (<c>Nothing</c>
             in VB).
             </para>
            
             <para>
             If you use the no-argument constructor, and you then explicitly set this
             property, when you call <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/>, this name will specify
             the name of the zip file created.  Doing so is equivalent to calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.String)"/>.  When instantiating a ZipFile by reading from
             a stream or byte array, the Name property remains <c>null</c>.  When saving
             to a stream, the Name property is implicitly set to <c>null</c>.
             </para>
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CompressionLevel">
            <summary>
            Sets the compression level to be used for entries when saving the zip archive.
            </summary>
            <remarks>
            The compression level setting is used at the time of <c>Save()</c>. The same
            level is applied to all <c>ZipEntry</c> instances contained in the
            <c>ZipFile</c> during the save.  If you do not set this property, the
            default compression level is used, which normally gives a good balance of
            compression efficiency and compression speed.  In some tests, using
            <c>BestCompression</c> can double the time it takes to compress, while
            delivering just a small increase in compression efficiency.  This behavior
            will vary with the type of data you compress.  If you are in doubt, just
            leave this setting alone, and accept the default.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Comment">
             <summary>
             A comment attached to the zip archive.
             </summary>
            
             <remarks>
            
             <para>
             This property is read/write. It allows the application to specify a comment
             for the <c>ZipFile</c>, or read the comment for the <c>ZipFile</c>.  After
             setting this property, changes are only made permanent when you call a
             <c>Save()</c> method.
             </para>
            
             <para>
             According to <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's zip
             specification</see>, the comment is not encrypted, even if there is a
             password set on the zip file.
             </para>
            
             <para>
             The zip spec does not describe how to encode the comment string in a code
             page other than IBM437.  Therefore, for "compliant" zip tools and libraries,
             comments will use IBM437.  However, there are situations where you want an
             encoded Comment, for example using code page 950 "Big-5 Chinese".  DotNetZip
             will encode the comment in the code page specified by <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>, at the time of the call to
             ZipFile.Save().
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the
             value of <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" /> between each entry you
             add, and between adding entries and the call to Save(). Don't do this.  It
             will likely result in a zipfile that is not readable by any tool or
             application.  For best interoperability, leave <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" /> alone, or specify it only once,
             before adding any entries to the <c>ZipFile</c> instance.
             </para>
            
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times
             for entries added to the zip file will be emitted in "Unix(tm)
             format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
             An application creating a zip archive can use this flag to explicitly
             specify that the file times for the entries should or should not be stored
             in the zip archive in the format used by Unix. By default this flag is
             <c>false</c>.
             </para>
            
             <para>
             When adding an entry from a file or directory, the Creation (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>),
             and Modified (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are
             automatically set from the filesystem values. When adding an entry from a stream
             or string, all three values are implicitly set to DateTime.Now.  Applications
             can also explicitly set those times by calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
             <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
             zip specification</see> describes multiple ways to format these times in a
             zip file. One is the format Windows applications normally use: 100ns ticks
             since Jan 1, 1601 UTC.  The other is a format Unix applications typically
             use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an "extra
             field" in the zip entry when saving the zip archive. The former uses an
             extra field with a Header Id of 0x000A, while the latter uses a header ID of
             0x5455.
             </para>
            
             <para>
             Not all tools and libraries can interpret these fields.  Windows compressed
             folders is one that can read the Windows Format timestamps, while I believe
             the <see href="http://www.info-zip.org/">Infozip</see> tools can read the Unix
             format timestamps. Some tools and libraries may be able to read only one or
             the other.
             </para>
            
             <para>
             The times stored are taken from <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
             The value set here applies to all entries subsequently added to the
             <c>ZipFile</c>.
             </para>
            
             <para>
             This property is not mutually exclusive of the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving" /> property.  It is possible and
             legal and valid to produce a zip file that contains timestamps encoded in
             the Unix format as well as in the Windows format.  I haven't got a complete
             list of tools and which sort of timestamps they can use and will
             tolerate. You'll have to test it yourself.  If you get any good information
             and would like to pass it on, please do so and I will include that
             information in this documentation.
             </para>
             </remarks>
            
             <example>
             This example shows how to save a zip file that contains file timestamps
             in a format normally used by Unix.
             <code lang="C#">
             using (var zip = new ZipFile())
             {
                 zip.EmitTimesInWindowsFormatWhenSaving = false;
                 zip.EmitTimesInUnixFormatWhenSaving = true;
                 zip.AddDirectory(directoryToZip, "files");
                 zip.Save(outputFile);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.EmitTimesInWindowsFormatWhenSaving = False
                 zip.EmitTimesInUnixFormatWhenSaving = True
                 zip.AddDirectory(directoryToZip, "files")
                 zip.Save(outputFile)
             End Using
             </code>
             </example>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInWindowsFormatWhenSaving" />
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving" />
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInUnixFormatWhenSaving">
             <summary>
             Specifies whether the Creation, Access, and Modified times
             for entries added to the zip file will be emitted in "Unix(tm)
             format" when the zip archive is saved.
             </summary>
            
             <remarks>
             <para>
             An application creating a zip archive can use this flag to explicitly
             specify that the file times for the entries should or should not be stored
             in the zip archive in the format used by Unix. By default this flag is
             <c>false</c>.
             </para>
            
             <para>
             When adding an entry from a file or directory, the Creation (<see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>), Access (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>), and
             Modified (<see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>) times for the given entry are
             automatically set from the filesystem values. When adding an entry from a
             stream or string, all three values are implicitly set to DateTime.Now.
             Applications can also explicitly set those times by calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipEntry.SetEntryTimes(System.DateTime,System.DateTime,System.DateTime)"/>.
             </para>
            
             <para>
             <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">PKWARE's
             zip specification</see> describes multiple ways to format these times in a
             zip file. One is the format Windows applications normally use: 100ns ticks
             since Jan 1, 1601 UTC.  The other is a format Unix applications typically
             use: seconds since Jan 1, 1970 UTC.  Each format can be stored in an "extra
             field" in the zip entry when saving the zip archive. The former uses an
             extra field with a Header Id of 0x000A, while the latter uses a header ID of
             0x5455.
             </para>
            
             <para>
             Not all tools and libraries can interpret these fields.  Windows compressed
             folders is one that can read the Windows Format timestamps, while I believe
             the <see href="http://www.info-zip.org/">Infozip</see> tools can read the Unix
             format timestamps. Some tools and libraries may be able to read only one or
             the other.
             </para>
            
             <para>
             The times stored are taken from <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ModifiedTime"/>, <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.AccessedTime"/>, and <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CreationTime"/>.
             </para>
            
             <para>
             This property is not mutually exclusive of the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving" /> property.  It is possible and
             legal and valid to produce a zip file that contains timestamps encoded in
             the Unix format as well as in the Windows format.  I haven't got a complete
             list of tools and which sort of timestamps they can use and will
             tolerate. You'll have to test it yourself.  If you get any good information
             and would like to pass it on, please do so and I will include that
             information in this documentation.
             </para>
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.EmitTimesInUnixFormatWhenSaving" />
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EmitTimesInWindowsFormatWhenSaving" />
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Verbose">
             <summary>
             Indicates whether verbose output is sent to the StatusMessageTextWriter during
             <c>AddXxx()</c> and <c>ReadXxx()</c> operations.
             </summary>
            
             <remarks>
             This is a synthetic property.  It returns true if the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.StatusMessageTextWriter"/> is non-null.
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CaseSensitiveRetrieval">
             <summary>
             Indicates whether to perform case-sensitive matching on the filename when
             retrieving entries in the zipfile via the string-based indexer.
             </summary>
            
             <remarks>
             The default value is <c>false</c>, which means DON'T do case-sensitive
             matching. In other words, retrieving zip["ReadMe.Txt"] is the same as
             zip["readme.txt"].  It really makes sense to set this to <c>true</c> only if
             you are not running on Windows, which has case-insensitive filenames. But
             since this library is not built for non-Windows platforms, in most cases you
             should just leave this property alone.
             </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseUnicodeAsNecessary">
             <summary>
             Indicates whether to encode entry filenames and entry comments using Unicode 
             (UTF-8).
             </summary>
            
             <remarks>
             <para>
             <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">The
             PKWare zip specification</see> provides for encoding file names and file
             comments in either the IBM437 code page, or in UTF-8.  This flag selects the
             encoding according to that specification.  By default, this flag is false,
             and filenames and comments are encoded into the zip file in the IBM437
             codepage.  Setting this flag to true will specify that filenames and
             comments that cannot be encoded with IBM437 will be encoded with UTF-8.
             </para>
            
             <para>
             Zip files created with strict adherence to the PKWare specification with
             respect to UTF-8 encoding can contain entries with filenames containing any
             combination of Unicode characters, including the full range of characters
             from Chinese, Latin, Hebrew, Greek, Cyrillic, and many other alphabets.
             However, because at this time, the UTF-8 portion of the PKWare specification
             is not broadly supported by other zip libraries and utilities, such zip
             files may not be readable by your favorite zip tool or archiver. In other
             words, interoperability will decrease if you set this flag to true.
             </para>
            
             <para>
             In particular, Zip files created with strict adherence to the PKWare
             specification with respect to UTF-8 encoding will not work well with
             Explorer in Windows XP or Windows Vista, because Windows compressed folders,
             as far as I know, do not support UTF-8 in zip files.  Vista can read the zip
             files, but shows the filenames incorrectly. Unpacking from Windows Vista
             Explorer will result in filenames that have rubbish characters in place of
             the high-order UTF-8 bytes.
             </para>
            
             <para>
             Also, zip files that use UTF-8 encoding will not work well with Java
             applications that use the java.util.zip classes, as of v5.0 of the Java
             runtime. The Java runtime does not correctly implement the PKWare
             specification in this regard.
             </para>
            
             <para>
             As a result, we have the unfortunate situation that "correct" behavior by the
             DotNetZip library with regard to Unicode encoding of filenames during zip
             creation will result in zip files that are readable by strictly compliant and
             current tools (for example the most recent release of the commercial WinZip
             tool); but these zip files will not be readable by various other tools or
             libraries, including Windows Explorer.
             </para>
            
             <para>
             The DotNetZip library can read and write zip files with UTF8-encoded
             entries, according to the PKware spec.  If you use DotNetZip for both
             creating and reading the zip file, and you use UTF-8, there will be no loss
             of information in the filenames. For example, using a self-extractor created
             by this library will allow you to unpack files correctly with no loss of
             information in the filenames.
             </para>
            
             <para>
             If you do not set this flag, it will remain false.  If this flag is false,
             your ZipFile will encode all filenames and comments using the IBM437
             codepage.  This can cause "loss of information" on some filenames, but the
             resulting zipfile will be more interoperable with other utilities. As an
             example of the loss of information, diacritics can be lost.  The o-tilde
             character will be down-coded to plain o.  The c with a cedilla (Unicode
             0xE7) used in Portugese will be downcoded to a c.  Likewise, the O-stroke
             character (Unicode 248), used in Danish and Norwegian, will be down-coded to
             plain o. Chinese characters cannot be represented in codepage IBM437; when
             using the default encoding, Chinese characters in filenames will be
             represented as ?. These are all examples of "information loss".
             </para>
            
             <para>
             The loss of information associated to the use of the IBM437 encoding is
             inconvenient, and can also lead to runtime errors. For example, using
             IBM437, any sequence of 4 Chinese characters will be encoded as ????.  If
             your application creates a ZipFile, then adds two files, each with names of
             four Chinese characters each, this will result in a duplicate filename
             exception.  In the case where you add a single file with a name containing
             four Chinese characters, calling Extract() on the entry that has question
             marks in the filename will result in an exception, because the question mark
             is not legal for use within filenames on Windows.  These are just a few
             examples of the problems associated to loss of information.
             </para>
            
             <para>
             This flag is independent of the encoding of the content within the entries
             in the zip file. Think of the zip file as a container - it supports an
             encoding.  Within the container are other "containers" - the file entries
             themselves.  The encoding within those entries is independent of the
             encoding of the zip archive container for those entries.
             </para>
            
             <para>
             Rather than specify the encoding in a binary fashion using this flag, an
             application can specify an arbitrary encoding via the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.  Setting the encoding
             explicitly when creating zip archives will result in non-compliant zip files
             that, curiously, are fairly interoperable.  The challenge is, the PKWare
             specification does not provide for a way to specify that an entry in a zip
             archive uses a code page that is neither IBM437 nor UTF-8.  Therefore if you
             set the encoding explicitly when creating a zip archive, you must take care
             upon reading the zip archive to use the same code page.  If you get it
             wrong, the behavior is undefined and may result in incorrect filenames,
             exceptions, stomach upset, hair loss, and acne.
             </para>
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving">
             <summary>
             Specify whether to use ZIP64 extensions when saving a zip archive. 
             </summary>
             <remarks>
            
             <para>
             Designed many years ago, the <see
             href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">original zip
             specification from PKWARE</see> allowed for 32-bit quantities for the
             compressed and uncompressed sizes of zip entries, as well as a 32-bit
             quantity for specifying the length of the zip archive itself, and a maximum
             of 65535 entries.  These limits are now regularly exceeded in many backup
             and archival scenarios.  Recently, PKWare added extensions to the original
             zip spec, called "ZIP64 extensions", to raise those limitations.  This
             property governs whether the <c>ZipFile</c> instance will use those
             extensions when writing zip archives within a call to one of the Save()
             methods.  The use of these extensions is optional and explicit in DotNetZip
             because, despite the status of ZIP64 as a bona fide standard, many other zip
             tools and libraries do not support ZIP64, and therefore a zip file saved
             with ZIP64 extensions may be unreadable by some of those other tools.
             </para>
             
             <para>
             Set this property to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always"/> to always use ZIP64
             extensions when saving, regardless of whether your zip archive needs it.
             Suppose you add 5 files, each under 100k, to a ZipFile.  If you specify
             Always for this flag before calling the Save() method, you will get a ZIP64
             archive, though you do not need to use ZIP64 because none of the original
             zip limits had been exceeded.
             </para>
            
             <para>
             Set this property to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Never"/> to tell the DotNetZip
             library to never use ZIP64 extensions.  This is useful for maximum
             compatibility and interoperability, at the expense of the capability of
             handling large files or large archives.  NB: Windows Explorer in Windows XP
             and Windows Vista cannot currently extract files from a zip64 archive, so if
             you want to guarantee that a zip archive produced by this library will work
             in Windows Explorer, use <c>Never</c>. If you set this property to <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Never"/>, and your application creates a zip that would
             exceed one of the ZIP limits, the library will throw an exception during the
             Save().
             </para>
            
             <para>
             Set this property to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> to tell the
             DotNetZip library to use the zip64 extensions when required by the
             entry. After the file is compressed, the original and compressed sizes are
             checked, and if they exceed the limits described above, then zip64 can be
             used. That is the general idea, but there is an additional wrinkle when
             saving to a non-seekable device, like the ASP.NET
             <c>Response.OutputStream</c>, or <c>Console.Out</c>.  When using
             non-seekable streams for output, the entry header - which indicates whether
             zip64 is in use - is emitted before it is known if zip64 is necessary.  It
             is only after all entries have been saved that it can be known if ZIP64 will
             be required.  On seekable output streams, after saving all entries, the
             library can seek backward and re-emit the zip file header to be consistent
             with the actual ZIP64 requirement.  But using a non-seekable output stream,
             the library cannot seek backward, so the header can never be changed. In
             other words, the archive's use of ZIP64 extensions is not alterable after
             the header is emitted.  Therefore, when saving to non-seekable streams,
             using <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> is the same as using <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always"/>: it will always produce a zip archive that uses
             zip64 extensions.
             </para>
            
             <para>
             The default value for the property is <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Never"/>. <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> is safest, in the sense that you will not
             get an Exception if a pre-ZIP64 limit is exceeded.
             </para>
            
             <para>
             You may set the property at any time before calling Save(). 
             </para>
            
             <para>
             The <c>Zipfile.Read()</c> method will properly read ZIP64-endowed zip
             archives, regardless of the value of this property.  DotNetZip will always
             read ZIP64 archives.  This property governs whether DotNetZip will write
             them. Therefore, when updating archives, be careful about setting this
             property after reading an archive that may use ZIP64 extensions.
             </para>
            
             <para>
             An interesting question is, if you have set this property to
             <c>AsNecessary</c>, and then successfully saved, does the resulting archive
             use ZIP64 extensions or not?  To learn this, check the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.OutputUsedZip64"/> property, after calling Save().
             </para>
            
             <para>
             Have you thought about
             <see href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">donating</see>?
             </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.RequiresZip64">
             <summary>
             Indicates whether the archive requires ZIP64 extensions.
             </summary>
             <remarks>
            
             <para>
             This property is <c>null</c> (or <c>Nothing</c> in VB) if the archive has not been
             saved, and there are fewer than 65334 ZipEntry items contained in the archive.
             </para>
            
             <para>
             The <c>Value</c> is true if any of the following four conditions holds: the
             uncompressed size of any entry is larger than 0xFFFFFFFF; the compressed
             size of any entry is larger than 0xFFFFFFFF; the relative offset of any
             entry within the zip archive is larger than 0xFFFFFFFF; or there are more
             than 65534 entries in the archive.  (0xFFFFFFFF = 4,294,967,295).  The
             result may not be known until a Save() is attempted on the zip archive.  The
             Value of this <see cref="T:System.Nullable"/> property may be set only AFTER
             one of the Save() methods has been called.
             </para>
            
             <para>
             If none of the four conditions holds, and the archive has been saved, then
             the Value is false.
             </para>
            
             <para>
             A <c>Value</c> of false does not indicate that the zip archive, as saved,
             does not use ZIP64.  It merely indicates that ZIP64 is not required.  An
             archive may use ZIP64 even when not required if the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/> property is set to <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always"/>, or if the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/> property is set to <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> and the output stream was not seekable. Use
             the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.OutputUsedZip64"/> property to determine if the most recent
             <c>Save()</c> method resulted in an archive that utilized the ZIP64
             extensions.
             </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.OutputUsedZip64"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.OutputUsedZip64">
             <summary>
             Describes whether the most recent <c>Save()</c> operation used ZIP64 extensions.
             </summary>
            
             <remarks>
             <para>
             The use of ZIP64 extensions within an archive is not always necessary, and for
             interoperability concerns, it may be desired to NOT use ZIP64 if possible.  The
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/> property can be set to use ZIP64
             extensions only when necessary.  In those cases, Sometimes applications want to
             know whether a Save() actually used ZIP64 extensions.  Applications can query
             this read-only property to learn whether ZIP64 has been used in a just-saved
             <c>ZipFile</c>.
             </para>
            
             <para>
             The value is <c>null</c> (or <c>Nothing</c> in VB) if the archive has not
             been saved.
             </para>
            
             <para>
             Non-null values (<c>HasValue</c> is true) indicate whether ZIP64 extensions
             were used during the most recent <c>Save()</c> operation.  The ZIP64
             extensions may have been used as required by any particular entry because of
             its uncompressed or compressed size, or because the archive is larger than
             4294967295 bytes, or because there are more than 65534 entries in the
             archive, or because the <c>UseZip64WhenSaving</c> property was set to <see
             cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always"/>, or because the <c>UseZip64WhenSaving</c>
             property was set to <see cref="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary"/> and the output
             stream was not seekable.  The value of this property does not indicate the
             reason the ZIP64 extensions were used.
             </para>
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.UseZip64WhenSaving"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.RequiresZip64"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding">
             <summary>
             The text encoding to use when writing new entries to the <c>ZipFile</c>, for
             those entries that cannot be encoded with the default (IBM437) encoding; or,
             the text encoding that was used when reading the entries from the
             <c>ZipFile</c>.
             </summary>
             
             <remarks>
             <para>
             In <see href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">its
             zip specification</see>, PKWare describes two options for encoding filenames
             and comments: using IBM437 or UTF-8.  But, some archiving tools or libraries
             do not follow the specification, and instead encode characters using the
             system default code page.  For example, WinRAR when run on a machine in
             Shanghai may encode filenames with the Big-5 Chinese (950) code page.  This
             behavior is contrary to the Zip specification, but it occurs anyway.
             </para>
            
             <para>
             When using DotNetZip to write zip archives that will be read by one of these
             other archivers, set this property to specify the code page to use when
             encoding the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.FileName"/> and <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Comment"/> for each ZipEntry in the zip file, for values that
             cannot be encoded with the default codepage for zip files, IBM437.  This is
             why this property is "provisional".  In all cases, IBM437 is used where
             possible, in other words, where no loss of data would result. It is
             possible, therefore, to have a given entry with a Comment encoded in IBM437
             and a FileName encoded with the specified "provisional" codepage.
             </para>
            
             <para>
             Be aware that a zip file created after you've explicitly set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" /> property to a value other than IBM437
             may not be compliant to the PKWare specification, and may not be readable by
             compliant archivers.  On the other hand, many (most?) archivers are
             non-compliant and can read zip files created in arbitrary code pages.  The
             trick is to use or specify the proper codepage when reading the zip.
             </para>
            
             <para>
             When creating a zip archive using this library, it is possible to change the
             value of <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" /> between each entry you
             add, and between adding entries and the call to Save(). Don't do this. It
             will likely result in a zipfile that is not readable.  For best
             interoperability, either leave <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding" />
             alone, or specify it only once, before adding any entries to the
             <c>ZipFile</c> instance.  There is one exception to this recommendation,
             described later.
             </para>
            
             <para>
             When using an arbitrary, non-UTF8 code page for encoding, there is no
             standard way for the creator application - whether DotNetZip, WinZip,
             WinRar, or something else - to formally specify in the zip file which
             codepage has been used for the entries. As a result, readers of zip files
             are not able to inspect the zip file and determine the codepage that was
             used for the entries contained within it.  It is left to the application or
             user to determine the necessary codepage when reading zip files encoded this
             way.  If you use an incorrect codepage when reading a zipfile, you will get
             entries with filenames that are incorrect, and the incorrect filenames may
             even contain characters that are not legal for use within filenames in
             Windows. Extracting entries with illegal characters in the filenames will
             lead to exceptions. It's too bad, but this is just the way things are with
             code pages in zip files. Caveat Emptor.
             </para>
            
             <para>
             When using DotNetZip to read a zip archive, and the zip archive uses an
             arbitrary code page, you must specify the encoding to use before or when the
             <c>Zipfile</c> is READ.  This means you must use a <c>ZipFile.Read()</c>
             method that allows you to specify a System.Text.Encoding parameter.  Setting
             the ProvisionalAlternateEncoding property after your application has read in
             the zip archive will not affect the entry names of entries that have already
             been read in, and is probably not what you want.
             </para>
                 
             <para>
             And now, the exception to the rule described above.  One strategy for
             specifying the code page for a given zip file is to describe the code page
             in a human-readable form in the Zip comment. For example, the comment may
             read "Entries in this archive are encoded in the Big5 code page".  For
             maximum interoperability, the zip comment in this case should be encoded in
             the default, IBM437 code page.  In this case, the zip comment is encoded
             using a different page than the filenames.  To do this, Specify
             <c>ProvisionalAlternateEncoding</c> to your desired region-specific code
             page, once before adding any entries, and then reset
             <c>ProvisionalAlternateEncoding</c> to IBM437 before setting the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Comment"/> property and calling Save().
             </para>
             </remarks>
             
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file.  For this code to work as
             desired, the <c>Zipfile</c> must have been created using the big5 code page
             (CP950). This is typical, for example, when using WinRar on a machine with
             CP950 set as the default code page.  In that case, the names of entries
             within the Zip archive will be stored in that code page, and reading the zip
             archive must be done using that code page.  If the application did not use
             the correct code page in ZipFile.Read(), then names of entries within the
             zip archive would not be correctly retrieved.
             <code>
             using (var zip = ZipFile.Read(zipFileName, System.Text.Encoding.GetEncoding("big5")))
             {
                 // retrieve and extract an entry using a name encoded with CP950
                 zip[MyDesiredEntry].Extract("unpack");
             }
             </code>
            
             <code Lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipToExtract, System.Text.Encoding.fileGetencoding(950))
                 ' retrieve and extract an entry using a name encoded with CP950
                 zip(MyDesiredEntry).Extract("unpack")
             End Using
             </code>
             </example>
            
             <seealso cref="F:ArtOfTest.WebAii.Zip.Zip.ZipFile.DefaultEncoding">DefaultEncoding</seealso>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.ZipFile.DefaultEncoding">
            <summary>
            The default text encoding used in zip archives.  It is numeric 437, also 
            known as IBM437.
            </summary>
            <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.StatusMessageTextWriter">
             <summary>
             Gets or sets the <c>TextWriter</c> to which status messages are delivered 
             for the instance. 
             </summary>
            
             <remarks>
             If the TextWriter is set to a non-null value, then verbose output is sent to the
             <c>TextWriter</c> during <c>Add</c><c>, Read</c><c>, Save</c> and <c>Extract</c>
             operations.  Typically, console applications might use <c>Console.Out</c>
             and graphical or headless applications might use a
             <c>System.IO.StringWriter</c>. The output of this is suitable for viewing by
             humans.
             </remarks>
            
             <example>
             <para>
             In this example, a console application instantiates a ZipFile, then sets
             the StatusMessageTextWriter to Console.Out.  At that point, all verbose
             status messages for that ZipFile are sent to the console. 
             </para>
            
             <code lang="C#">
             using (ZipFile zip= ZipFile.Read(FilePath))
             {
               zip.StatusMessageTextWriter= System.Console.Out;
               // messages are sent to the console during extraction
               zip.ExtractAll();
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(FilePath)
               zip.StatusMessageTextWriter= System.Console.Out
               'Status Messages will be sent to the console during extraction
               zip.ExtractAll()
             End Using
             </code>
             </example>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression">
             <summary>
             Gets or sets the flag that indicates whether the <c>ZipFile</c> should use
             compression for subsequently added entries in the <c>ZipFile</c> instance.
             </summary>
            
             <remarks>
             <para> When saving an entry into a zip archive, the DotNetZip by default
             compresses the file. That's what a ZIP archive is all about, isn't it?  For
             files that are already compressed, like MP3's or JPGs, the deflate algorithm
             can actually slightly expand the size of the data.  Setting this property to
             trye allows you to specify that compression should not be used.  The default
             value is false.  </para>
            
             <para>
             Do not construe setting this flag to false as "Force Compression".  Setting
             it to false merely does NOT force No compression.  If you want to force the
             use of the deflate algorithm when storing each entry into the zip archive,
             define a <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WillReadTwiceOnInflation"/> callback, which always
             returns false, and a <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression" /> callback that always
             returns true.  This is probably the wrong thing to do, but you could do
             it. Forcing the use of the Deflate algorithm when storing an entry does not
             guarantee that the data size will get smaller. It could increase, as
             described above.
             </para>
            
             <para>
             Changes to this flag apply to all entries subsequently added to the archive. 
             The application can also set the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressionMethod"/>
             property on each ZipEntry, for more granular control of this capability.
             </para>
            
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.CompressionMethod"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CompressionLevel"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>
            
             <example>
             This example shows how to specify that Compression will not be used when
             adding files to the zip archive. None of the files added to the archive in
             this example will use compression.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.ForceNoCompression = true;
               zip.AddDirectory(@"c:\reports\January");
               zip.Comment = "All files in this archive will be uncompressed.";
               zip.Save(ZipFileToCreate);
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.ForceNoCompression = true
               zip.AddDirectory("c:\reports\January")
               zip.Comment = "All files in this archive will be uncompressed."
               zip.Save(ZipFileToCreate)
             End Using
             </code>
            
             </example>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.TempFileFolder">
             <summary>
             Gets or sets the name for the folder to store the temporary file
             this library writes when saving a zip archive. 
             </summary>
            
             <remarks>
             <para>
             This library will create a temporary file when saving a Zip archive to a file.
             This file is written when calling one of the <c>Save()</c> methods that does
             not save to a stream, or one of the <c>SaveSelfExtractor()</c> methods.  
             <para>
            
             </para>
             By default, the library will create the temporary file in the directory
             specified for the file itself, via the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Name"/> property or via the
             <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.String)"/> method.
             </para>
            
             <para>
             Setting this property allows applications to override this default behavior,
             so that the library will create the temporary file in the specified
             folder. For example, to have the library create the temporary file in the
             current working directory, regardless where the <c>ZipFile</c> is saved,
             specfy ".".  To revert to the default behavior, set this property to
             <c>null</c> (<c>Nothing</c> in VB).
             </para>
            
             <para>
             When setting the property to a non-null value, the folder specified must exist;
             if it does not an exception is thrown.  The application should have write and
             delete permissions on the folder.  The permissions are not explicitly checked
             ahead of time; if the application does not have the appropriate rights, an
             exception will be thrown at the time <c>Save()</c> is called.
             </para>
            
             <para>
             There is no temporary file created when reading a zip archive.  When saving
             to a Stream, there is no temporary file created.  For example, if the
             application is an ASP.NET application and calls <c>Save()</c> specifying the
             <c>Response.OutputStream</c> as the output stream, there is no temporary
             file created.
             </para>
             </remarks>
            
             <exception cref="T:System.IO.FileNotFoundException">
             Thrown when setting the property if the directory does not exist. 
             </exception>
            
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password">
             <summary>
             Sets the password to be used on the <c>ZipFile</c> instance.
             </summary>
             
             <remarks>
             
             <para>
             When writing a zip archive, this password is applied to the entries, not to
             the zip archive itself. It applies to any ZipEntry subsequently added to the
             <c>ZipFile</c>, using one of the <c>AddFile</c>, <c>AddDirectory</c>,
             <c>AddEntry</c>, or <c>AddItem</c> methods, etc.  When reading a zip
             archive, this property applies to any entry subsequently extracted from the
             <c>ZipFile</c> using one of the Extract methods on the <c>ZipFile</c> class.
             </para>
             
             <para>
             When writing a zip archive, keep this in mind: though the password is set on the
             ZipFile object, according to the Zip spec, the "directory" of the archive - in
             other words the list of entries contained in the archive - is not encrypted with
             the password, or protected in any way.  if you set the Password property, the
             password actually applies to individual entries that are added to the archive,
             subsequent to the setting of this property.  The list of filenames in the
             archive that is eventually created will appear in clear text, but the contents
             of the individual files are encrypted.  This is how Zip encryption works.
             </para>
             
             <para>
             If you set the password on the zip archive, and then add a set of files to the
             archive, then each entry is encrypted with that password.  You may also want to
             change the password between adding different entries. If you set the password,
             add an entry, then set the password to <c>null</c> (<c>Nothing</c> in VB), and
             add another entry, the first entry is encrypted and the second is not.  If you
             call <c>AddFile()</c>, then set the <c>Password</c> property, then call
             <c>ZipFile.Save</c>, the file added will not be password-protected, and no
             warning will be generated.
             </para>
             
             <para>
             When setting the Password, you may also want to explicitly set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/> property, to specify how to encrypt the entries added to
             the ZipFile.  If you set the Password to a non-null value and do not set
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption"/>, then PKZip 2.0 ("Weak") encryption is used.  This
             encryption is relatively weak but is very interoperable. If you set the
             password to a <c>null</c> value (<c>Nothing</c> in VB), Encryption is reset
             to None.
             </para>
            
             <para>
             All of the preceding applies to writing zip archives, in other words when
             you use one of the Save methods.  To use this property when reading or an
             existing ZipFile, do the following: set the Password property on the
             <c>ZipFile</c>, then call one of the Extract() overloads on the <see
             cref="T:ArtOfTest.WebAii.Zip.Zip.ZipEntry" />. In this case, the entry is extracted using the
             <c>Password</c> that is specified on the <c>ZipFile</c> instance. If you
             have not set the <c>Password</c> property, then the password is <c>null</c>,
             and the entry is extracted with no password.
             </para>
            
             <para>
             If you set the Password property on the <c>ZipFile</c>, then call Extract()
             an entry that has not been encrypted with a password, the password is not
             used for that entry, and the <c>ZipEntry</c> is extracted as normal. In
             other words, the password is used only if necessary.
             </para>
             
             <para>
             The <see cref="T:ArtOfTest.WebAii.Zip.Zip.ZipEntry"/> class also has a <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password">Password</see> property.  It takes precedence over
             this property on the <c>ZipFile</c>.  Typically, you would use the per-entry
             Password when most entries in the zip archive use one password, and a few
             entries use a different password.  If all entries in the zip file use the
             same password, then it is simpler to just set this property on the
             <c>ZipFile</c> itself, whether creating a zip archive or extracting a zip
             archive.
             </para>
             
             </remarks>
            
             <example>
             <para>
             This example creates a zip file, using password protection for the entries,
             and then extracts the entries from the zip file.  When creating the zip
             file, the Readme.txt file is not protected with a password, but the other
             two are password-protected as they are saved. During extraction, each file
             is extracted with the appropriate password.
             </para>
             <code>
             // create a file with encryption
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Password= "!Secret1";
                 zip.AddFile("MapToTheSite-7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
             
             // extract entries that use encryption
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "!Secret1";
                 zip.ExtractAll("extractDir");
             }
             
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 zip.AddFile("ReadMe.txt")
                 zip.Password = "123456!"
                 zip.AddFile("MapToTheSite-7440-N49th.png")
                 zip.Password= "!Secret1";
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
            
            
             ' extract entries that use encryption
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "!Secret1"
                 zip.ExtractAll("extractDir")
             End Using
             
             </code>
            
             </example>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption">ZipFile.Encryption</seealso>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Password">ZipEntry.Password</seealso>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile">
             <summary>
             The action the library should take when extracting a file that already exists.
             </summary>
             <remarks>
             <para>
             This property affects the behavior of the Extract methods (one of the
             <c>Extract()</c> or <c>ExtractWithPassword()</c> overloads), when extraction
             would would overwrite an existing filesystem file. If you do not set this
             property, the library throws an exception when extracting an entry would
             overwrite an existing file.
             </para>
            
             <para>
             This property has no effect when extracting to a stream, or when the file to
             be extracted does not already exist.
             </para>
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipErrorAction">
             <summary>
               The action the library should take when an error is encountered while
               opening or reading files as they are added to a zip archive. 
             </summary>
            
             <remarks>
              <para>
                 In some cases an error will occur when DotNetZip tries to open a file to be
                 added to the zip archive.  In other cases, an error might occur after the
                 file has been successfully opened, while DotNetZip is reading the file.
              </para>
             
              <para>
                The first problem might occur when calling Adddirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened bby another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ZipErrorAction"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Encryption">
             <summary>
             The Encryption to use for entries added to the <c>ZipFile</c>.
             </summary>
            
             <remarks>
             <para>
             Set this when creating a zip archive, or when updating a zip archive. The
             specified Encryption is applied to the entries subsequently added to the
             <c>ZipFile</c> instance.  Applications do not need to set <c>Encryption</c>
             when reading or extracting a zip archive.
             </para>
             
             <para>
             If you set this to something other than EncryptionAlgorithm.None, you will also
             need to set the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/>.
             </para>
            
             <para>
             As with other properties (like <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> and <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>), setting this property a <c>ZipFile</c>
             instance will cause that <c>EncryptionAlgorithm</c> to be used on all <see
             cref="T:ArtOfTest.WebAii.Zip.Zip.ZipEntry"/> items that are subsequently added to the <c>ZipFile</c>
             instance. In other words, if you set this property after you have added
             items to the <c>ZipFile</c>, but before you have called <c>Save()</c>, those
             items will not be encrypted or protected with a password in the resulting
             zip archive. To get a zip archive with encrypted entries, set this property,
             along with the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, before calling
             <c>AddFile</c>, <c>AddItem</c>, or <c>AddDirectory</c> (etc.) on
             the <c>ZipFile</c> instance.
             </para>
            
             <para>
             Some comments on updating archives: If you read a <c>ZipFile</c>, you cannot
             modify the Encryption on any encrypted entry, except by extracting the entry
             with the original password (if any), removing the original entry via <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(ArtOfTest.WebAii.Zip.Zip.ZipEntry)"/>, and then adding a new entry with a
             new Password and Encryption setting.
             </para>
            
             <para>
             For example, suppose you read a <c>ZipFile</c>, and there is an encrypted
             entry.  Setting the Encryption property on that <c>ZipFile</c> and then
             calling <c>Save()</c> on the <c>ZipFile</c> does not update the Encryption
             used for the entries in the archive.  Neither is an exception
             thrown. Instead, what happens during the <c>Save()</c> is that all
             previously existing entries are copied through to the new zip archive, with
             whatever encryption and password that was used when originally creating the
             zip archive. Upon re-reading that archive, to extract entries, applications
             should use the original password or passwords, if any.
             </para>
            
             </remarks>
            
             <example>
             <para>
             This example creates a zip archive that uses encryption, and then extracts
             entries from the archive.  When creating the zip archive, the ReadMe.txt
             file is zipped without using a password or encryption.  The other files use
             encryption.
             </para>
            
             <code>
             // Create a zip archive with AES Encryption.
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddFile("ReadMe.txt");
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256;
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.AddFile("7440-N49th.png");
                 zip.AddFile("2008-Regional-Sales-Report.pdf");
                 zip.Save("EncryptedArchive.zip");
             }
             
             // Extract a zip archive that uses AES Encryption.
             // You do not need to specify the algorithm during extraction.
             using (ZipFile zip = ZipFile.Read("EncryptedArchive.zip"))
             {
                 zip.Password= "Top.Secret.No.Peeking!";
                 zip.ExtractAll("extractDirectory");
             }
             </code>
            
             <code lang="VB">
             ' Create a zip that uses Encryption.
             Using zip As New ZipFile()
                 zip.Encryption= EncryptionAlgorithm.WinZipAes256
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.AddFile("ReadMe.txt")
                 zip.AddFile("7440-N49th.png")
                 zip.AddFile("2008-Regional-Sales-Report.pdf")
                 zip.Save("EncryptedArchive.zip")
             End Using
             
             ' Extract a zip archive that uses AES Encryption.
             ' You do not need to specify the algorithm during extraction.
             Using (zip as ZipFile = ZipFile.Read("EncryptedArchive.zip"))
                 zip.Password= "Top.Secret.No.Peeking!"
                 zip.ExtractAll("extractDirectory")
             End Using
             </code>
            
             </example>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password">ZipFile.Password</seealso>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.Encryption">ZipEntry.Encryption</seealso>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WillReadTwiceOnInflation">
             <summary>
             A callback that allows the application to specify whether multiple reads of the
             stream should be performed, in the case that a compression operation actually
             inflates the size of the file data.  
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm in
             <c>DeflateStream</c> can result an increase in the size of the data.  This
             "inflation" can happen with previously compressed files, such as a zip, jpg,
             png, mp3, and so on.  In a few tests, inflation on zip files can be as large
             as 60%!  Inflation can also happen with very small files.  In these cases,
             by default, the DotNetZip library discards the compressed bytes, and stores
             the uncompressed file data into the zip archive.  This is an optimization
             where smaller size is preferred over longer run times.
             </para>
            
             <para>
             The application can specify that compression is not even tried, by setting the
             ForceNoCompression flag.  In this case, the compress-and-check-sizes process as
             decribed above, is not done.
             </para>
            
             <para>
             In some cases, neither choice is optimal.  The application wants compression,
             but in some cases also wants to avoid reading the stream more than once.  This
             may happen when the stream is very large, or when the read is very expensive, or
             when the difference between the compressed and uncompressed sizes is not
             significant.
             </para>
            
             <para>
             To satisfy these applications, this delegate allows the DotNetZip library to ask
             the application to for approval for re-reading the stream, in the case where
             inflation occurs.  The callback is invoked only in the case of inflation; that
             is to say when the uncompressed stream is smaller than the compressed stream.
             </para>
            
             <para>
             As with other properties (like <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> and <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ForceNoCompression"/>), setting the corresponding delegate on a
             <c>ZipFile</c> instance will caused it to be applied to all ZipEntry items
             that are subsequently added to the <c>ZipFile</c> instance. In other words,
             if you set this callback after you have added files to the <c>ZipFile</c>,
             but before you have called Save(), those items will not be governed by the
             callback when you do call Save(). Your best bet is to set this callback
             before adding any entries.
             </para>
            
             <para>
             Of course, if you want to have different callbacks for different entries,
             you may do so.
             </para>
            
             </remarks>
             <example>
             <para>
             In this example, the application callback checks to see if the difference
             between the compressed and uncompressed data is greater than 25%.  If it is,
             then the callback returns true, and the application tells the library to
             re-read the stream.  If not, then the callback returns false, and the
             library just keeps the "inflated" file data.
             </para>
            
             <code>
            
             public bool ReadTwiceCallback(long uncompressed, long compressed, string filename)
             {
                 return ((uncompressed * 1.0/compressed) > 1.25);
             }
             
             public void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     // set the callback before adding files to the zip
                     zip2.WillReadTwiceOnInflation = ReadTwiceCallback;
                     zip2.AddFile(filename1);
                     zip2.AddFile(filename2);
                     zip2.Save(ZipFileToCreate);
                 }
             }
             </code>
             </example>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/>
             <seealso cref="T:ArtOfTest.WebAii.Zip.Zip.WantCompressionCallback"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.WillReadTwiceOnInflation"/>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression">
             <summary>
             A callback that allows the application to specify whether compression should
             be used for entries subsequently added to the zip archive.
             </summary>
            
             <remarks>
             <para>
             In some cases, applying the Deflate compression algorithm to an entry *may*
             result a slight increase in the size of the data.  This "inflation" can
             happen with previously compressed files, such as a zip, jpg, png, mp3, and
             so on; it results from adding DEFLATE framing data around incompressible data.
             Inflation can also happen with very small files. Applications may wish to
             avoid the use of compression in these cases. As well, applications may wish
             to avoid compression to save time.
             </para>
            
             <para>
             By default, the DotNetZip library takes this approach to decide whether to
             apply compression: first it applies a heuristic, to determine whether it
             should try to compress a file or not.  The library checks the extension of
             the entry, and if it is one of a known list of uncompressible file types
             (mp3, zip, docx, and others), the library will not attempt to compress the
             entry.  The library does not actually check the content of the entry.  If
             you name a text file "Text.mp3", and then attempt to add it to a zip
             archive, this library will, by default, not attempt to compress the entry,
             based on the extension of the filename.
             </para>
            
             <para>
             If this default behavior is not satisfactory, there are two options. First,
             the application can override it by setting this <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WantCompression"/> callback.  This affords maximum control to
             the application.  With this callback, the application can supply its own
             logic for determining whether to apply the Deflate algorithm or not.  For
             example, an application may desire that files over 40mb in size are never
             compressed, or always compressed.  An application may desire that the first
             7 entries added to an archive are compressed, and the remaining ones are
             not.  The WantCompression callback allows the application full control, on
             an entry-by-entry basis.
             </para>
            
             <para>
             The second option for overriding the default logic regarding whether to
             apply compression is the ForceNoCompression flag.  If this flag is set to
             true, the compress-and-check-sizes process as decribed above, is not done,
             nor is the callback invoked.  In other words, if you set ForceNoCompression
             to true, andalso set the WantCompression callback, only the
             ForceNoCompression flag is considered.
             </para>
            
             <para>
             This is how the library determines whether compression will be attempted for
             an entry.  If it is to be attempted, the library reads the entry, runs it
             through the deflate algorithm, and then checks the size of the result.  If
             applying the Deflate algorithm increases the size of the data, then the
             library discards the compressed bytes, re-reads the raw entry data, and
             stores the uncompressed file data into the zip archive, in compliance with
             the zip spec.  This is an optimization where smaller size is preferred over
             longer run times. The re-reading is gated on the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WillReadTwiceOnInflation"/> callback, if it is set. This callback
             applies independently of the WantCompression callback.
             </para>
            
             <para>
             If by the logic described above, compression is not to be attempted for an
             entry, the library reads the entry, and simply stores the entry data
             uncompressed.
             </para>
            
             <para>
             And, if you have read this far, I would like to point out that a single
             person wrote all the code that does what is described above, and also wrote
             the description.  Isn't it about time you <see
             href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">donated $5 in
             appreciation?</see> The money goes to a charity.
             </para>
            
             </remarks>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.WillReadTwiceOnInflation"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ToString">
            <summary>Provides a string representation of the instance.</summary>
            <returns>a string representation of the instance.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.LibraryVersion">
             <summary>
             Returns the version number on the DotNetZip assembly.
             </summary>
            
             <remarks>
             This property is exposed as a convenience.  Callers
             could also get the version value by retrieving  GetName().Version 
             on the System.Reflection.Assembly object pointing to the
             DotNetZip assembly. But sometimes it is not clear which
             assembly is being loaded.  This property makes it clear. 
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">
             <summary>
             Creates a new <c>ZipFile</c> instance, using the specified filename. 
             </summary>
             
             <remarks>
             <para>
             Applications can use this constructor to create a new ZipFile for writing, 
             or to slurp in an existing zip archive for read and update purposes. 
             </para>
             
             <para>
             To create a new zip archive, an application can call this constructor,
             passing the name of a file that does not exist.  The name may be a fully
             qualified path. Then the application can add directories or files to the
             <c>ZipFile</c> via <c>AddDirectory()</c>, <c>AddFile()</c>, <c>AddItem()</c>
             and then write the zip archive to the disk by calling <c>Save()</c>. The zip
             file is not actually opened and written to the disk until the application
             calls <c>ZipFile.Save()</c>.  At that point the new zip file with the given
             name is created.
             </para>
             
             <para>
             If you won't know the name of the <c>Zipfile</c> until the time you call
             <c>ZipFile.Save()</c>, or if you plan to save to a stream (which has no
             name), then you should use the no-argument constructor.
             </para>
             
             <para>
             The application can also call this constructor to read an existing zip
             archive.  passing the name of a valid zip file that does exist. But, it's
             better form to use the static <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String)"/> method,
             passing the name of the zip file, because using <c>ZipFile.Read()</c> in
             your code communicates very clearly what you are doing.  In either case, the
             file is then read into the <c>ZipFile</c> instance.  The app can then
             enumerate the entries or can modify the zip file, for example adding
             entries, removing entries, changing comments, and so on.
             </para>
             
             <para>
             One advantage to this parameterized constructor: it allows applications to
             use the same code to add items to a zip archive, regardless of whether the
             zip file exists.
             </para>
             
             <para>
             Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
             not party on a single instance with multiple threads.  You may have multiple
             threads that each use a distinct <c>ZipFile</c> instance, or you can
             synchronize multi-thread access to a single instance.
             </para>
             
             <para>
             By the way, since DotNetZip is so easy to use, don't you think <see
             href="http://cheeso.members.winisp.net/DotNetZipDonate.aspx">you should donate
             $5 or $10</see>?
             </para>
            
             </remarks>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file. 
             </exception>
            
             <example>
             This example shows how to create a zipfile, and add a few files into it. 
             <code>
             String ZipFileToCreate = "archive1.zip";
             String DirectoryToZip  = "c:\\reports";
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save(ZipFileToCreate);
             }
             </code>
             
             <code lang="VB">
             Dim ZipFileToCreate As String = "archive1.zip"
             Dim DirectoryToZip As String = "c:\reports"
             Using zip As ZipFile = New ZipFile()
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save(ZipFileToCreate)
             End Using
             </code>
             </example>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String,System.Text.Encoding)">
             <summary>
             Creates a new <c>ZipFile</c> instance, using the specified name for the
             filename, and the specified Encoding.
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the
             <c>ZipFile</c> constructors.
             </para>
            
             <para>
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             This is equivalent to setting the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property on the <c>ZipFile</c> instance after construction.
             </para>
            
             <para>
             Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
             not party on a single instance with multiple threads.  You may have multiple
             threads that each use a distinct <c>ZipFile</c> instance, or you can
             synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
             
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file. 
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="encoding">The Encoding is used as the default alternate 
             encoding for entries with filenames or comments that cannot be encoded 
             with the IBM437 code page. </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor">
             <summary>
             Create a zip file, without specifying a target filename or stream to save to. 
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the
             <c>ZipFile</c> constructors.
             </para>
            
             <para> After instantiating with this constructor and adding entries to the
             archive, the application should call <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.String)"/> or
             <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.IO.Stream)"/> to save to a file or a stream,
             respectively.  The application can also set the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Name"/> property
             and then call the no-argument <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> method.  (This is the
             preferred approach for applications that use the library through COM
             interop.)  If you call the no-argument <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save"/> method without
             having set the <c>Name</c> of the <c>ZipFile</c>, either through the
             parameterized constructor or through the explicit property , the Save() will
             throw, because there is no place to save the file.  </para>
            
             <para>
             Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
             have multiple threads that each use a distinct <c>ZipFile</c> instance, or
             you can synchronize multi-thread access to a single instance.  </para>
             
             </remarks>
             
             <example>
             This example creates a Zip archive called Backup.zip, containing all the files
             in the directory DirectoryToZip. Files within subdirectories are not zipped up.
             <code>
             using (ZipFile zip = new ZipFile())
             { 
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames, "files");
               zip.Save("Backup.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames, "files")
                 zip.Save("Backup.zip")
             End Using
             </code>
             </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.Text.Encoding)">
             <summary>
             Create a zip file, specifying a text Encoding, but without specifying a target
             filename or stream to save to.
             </summary>
             
             <remarks>
             <para>
             See the documentation on the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the
             <c>ZipFile</c> constructors.
             </para>
            
             </remarks>
            
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter)">
             <summary>
             Creates a new <c>ZipFile</c> instance, using the specified name for the
             filename, and the specified status message writer.
             </summary>
            
             <remarks>
             <para>
             See the documentation on the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">ZipFile constructor
             that accepts a single string argument</see> for basic information on all the
             <c>ZipFile</c> constructors.
             </para>
            
             <para>
             This version of the constructor allows the caller to pass in a TextWriter,
             to which verbose messages will be written during extraction or creation of
             the zip archive.  A console application may wish to pass System.Console.Out
             to get messages on the Console. A graphical or headless application may wish
             to capture the messages in a different <c>TextWriter</c>, for example, a
             <c>StringWriter</c>, and then display the messages in a TextBox, or generate
             an audit log of ZipFile operations.
             </para>
             
             <para>
             To encrypt the data for the files added to the <c>ZipFile</c> instance, set
             the Password property after creating the <c>ZipFile</c> instance.
             </para>
             
             <para>
             Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
             not party on a single instance with multiple threads.  You may have multiple
             threads that each use a distinct <c>ZipFile</c> instance, or you can
             synchronize multi-thread access to a single instance.
             </para>
             
             </remarks>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file. 
             </exception>
            
             <example>
             <code>
             using (ZipFile zip = new ZipFile("Backup.zip", Console.Out))
             { 
               // Store all files found in the top level directory, into the zip archive.
               // note: this code does not recurse subdirectories!
               // Status messages will be written to Console.Out
               String[] filenames = System.IO.Directory.GetFiles(DirectoryToZip);
               zip.AddFiles(filenames);
               zip.Save();
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile("Backup.zip", Console.Out)
                 ' Store all files found in the top level directory, into the zip archive.
                 ' note: this code does not recurse subdirectories!
                 ' Status messages will be written to Console.Out
                 Dim filenames As String() = System.IO.Directory.GetFiles(DirectoryToZip)
                 zip.AddFiles(filenames)
                 zip.Save()
             End Using
             </code>
             </example>
             
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing 
             verbose status messages.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Creates a new <c>ZipFile</c> instance, using the specified name for the
             filename, the specified status message writer, and the specified Encoding.
             </summary>
            
             <remarks>
             <para>
             This constructor works like the <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.#ctor(System.String)">ZipFile
             constructor that accepts a single string argument.</see> See that reference
             for detail on what this constructor does.
             </para>
            
             <para>
             This version of the constructor allows the caller to pass in a TextWriter,
             and an Encoding.  The TextWriter will collect verbose messages that are
             generated by the library during extraction or creation of the zip archive.
             A console application may wish to pass System.Console.Out to get messages on
             the Console. A graphical or headless application may wish to capture the
             messages in a different <c>TextWriter</c>, for example, a
             <c>StringWriter</c>, and then display the messages in a TextBox, or generate
             an audit log of ZipFile operations.
             </para>
             
             <para>
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             This is a equivalent to setting the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/> property on the <c>ZipFile</c>
             instance after construction.
             </para>
             
             <para>
             To encrypt the data for the files added to the <c>ZipFile</c> instance, set
             the Password property after creating the <c>ZipFile</c> instance.
             </para>
             
             <para>
             Instances of the <c>ZipFile</c> class are not multi-thread safe.  You may
             not party on a single instance with multiple threads.  You may have multiple
             threads that each use a distinct ZipFile instance, or you can synchronize
             multi-thread access to a single instance.
             </para>
             
             </remarks>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if name refers to an existing file that is not a valid zip file. 
             </exception>
            
             <param name="fileName">The filename to use for the new zip archive.</param>
             <param name="statusMessageWriter">A TextWriter to use for writing verbose 
             status messages.</param>
             <param name="encoding">
             The Encoding is used as the default alternate encoding for entries with
             filenames or comments that cannot be encoded with the IBM437 code page.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Initialize(System.String)">
             <summary>
             Initialize a <c>ZipFile</c> instance by reading in a zip file.
             </summary>
             <remarks>
            
             <para>
             This method is primarily useful from COM Automation environments, when
             reading or extracting zip files. In COM, it is not possible to invoke
             parameterized constructors for a class. A COM Automation application can
             update a zip file by using the default (no argument) constructor, then
             calling Initialize() to read the contents of an on-disk zip archive into the
             <c>ZipFile</c> instance.
             </para>
            
             <para>
             .NET applications are encouraged to use the <c>ZipFile.Read()</c> methods for
             better clarity.
             </para>
            
             </remarks>
             <param name="fileName">the name of the existing zip file to read in.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Item(System.Int32)">
             <summary>
             This is an integer indexer into the Zip archive.
             </summary>
             
             <remarks>
             <para>
             This property is read-write. But don't get too excited: When setting the
             value, the only legal value is <c>null</c> (<c>Nothing</c> in VB). If you
             assign a non-null value, the setter will throw an exception.
             </para>
            
             <para>
             Setting the value to <c>null</c> is equivalent to calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(System.String)"/> with the filename for the given entry.
             </para>
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer, 
             or if the caller uses an out-of-range index value.
             </exception>
            
             <param name="ix">
             The index value.
             </param>
             
             <returns>
             The <c>ZipEntry</c> within the Zip archive at the specified index. If the 
             entry does not exist in the archive, this indexer throws.
             </returns>
             
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Item(System.String)">
             <summary>
             This is a name-based indexer into the Zip archive.  
             </summary>
             
             <remarks>
             <para>
             Retrieval by the string-based indexer is done on a case-insensitive basis,
             by default.  Set the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CaseSensitiveRetrieval"/> property to use
             case-sensitive comparisons.
             </para>
            
             <para>
             This property is read-write. When setting the value, the only legal value is
             <c>null</c> (<c>Nothing</c> in VB). Setting the value to <c>null</c> is
             equivalent to calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(System.String)"/> with the
             filename.
             </para>
            
             <para>
             If you assign a non-null value, the setter will throw an exception.
             </para>
            
             <para>
             It is can be true that <c>this[value].FileName == value</c>, but not
             always. In other words, the <c>FileName</c> property of the <c>ZipEntry</c>
             you retrieve with this indexer, can be equal to the index value, but not
             always.  In the case of directory entries in the archive, you may retrieve
             them with the name of the directory with no trailing slash, even though in
             the entry itself, the actual <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.FileName"/> property may
             include a trailing slash.  In other words, for a directory entry named
             "dir1", you may find <c>zip["dir1"].FileName == "dir1/"</c>. Also, for any
             entry with slashes, they are stored in the zip file as forward slashes, but
             you may retrieve them with either forward or backslashes.  So,
             <c>zip["dir1\\entry1.txt"].FileName == "dir1/entry.txt"</c>.
             </para>
             </remarks>
             
             <example>
             This example extracts only the entries in a zip file that are .txt files.
             <code>
             using (ZipFile zip = ZipFile.Read("PackedDocuments.zip"))
             {
               foreach (string s1 in zip.EntryFilenames)
               {
                 if (s1.EndsWith(".txt"))
                   zip[s1].Extract("textfiles");
               }
             }
             </code>
             <code lang="VB">
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip")
                   Dim s1 As String
                   For Each s1 In zip.EntryFilenames
                       If s1.EndsWith(".txt") Then
                           zip(s1).Extract("textfiles")
                       End If
                   Next
               End Using
             </code>
             </example>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(System.String)"/>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the caller attempts to assign a non-null value to the indexer.
             </exception>
            
             <param name="fileName">
             The name of the file, including any directory path, to retrieve from the zip. 
             The filename match is not case-sensitive by default; you can use the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CaseSensitiveRetrieval"/> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
             
             <returns>
             The <c>ZipEntry</c> within the Zip archive, given by the specified
             filename. If the named entry does not exist in the archive, this indexer
             returns <c>null</c> (<c>Nothing</c> in VB).
             </returns>
             
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.EntryFileNames">
             <summary>
             The list of filenames for the entries contained within the zip archive.  
             </summary>
            
             <remarks>
             According to the ZIP specification, the names of the entries use forward
             slashes in pathnames.  If you are scanning through the list, you may have to
             swap forward slashes for backslashes.
             </remarks>
            
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Item(System.String)"/>
            
             <example>
             This example shows one way to test if a filename is already contained within 
             a zip archive.
             <code>
             String ZipFileToRead= "PackedDocuments.zip";
             string Candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               if (zip.EntryFilenames.Contains(Candidate))
                 Console.WriteLine("The file '{0}' exists in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               else
                 Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'",
                                   Candidate,
                                   ZipFileName);
               Console.WriteLine();
             }
             </code>
             <code lang="VB">
               Dim ZipFileToRead As String = "PackedDocuments.zip"
               Dim Candidate As String = "DatedMaterial.xps"
               Using zip As New ZipFile(ZipFileToRead)
                   If zip.EntryFilenames.Contains(Candidate) Then
                       Console.WriteLine("The file '{0}' exists in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   Else
                     Console.WriteLine("The file, '{0}', does not exist in the zip archive '{1}'", _
                                   Candidate, _
                                   ZipFileName)
                   End If
                   Console.WriteLine
               End Using
             </code>
             </example>
            
             <returns>
             The list of strings for the filenames contained within the Zip archive.
             </returns>
             
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Entries">
            <summary>
            Returns the readonly collection of entries in the Zip archive.
            </summary>
            <remarks>
            If there are no entries in the current ZipFile, the value returned is a
            non-null zero-element collection.
            </remarks>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Count">
            <summary>
            Returns the number of entries in the Zip archive.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(ArtOfTest.WebAii.Zip.Zip.ZipEntry)">
             <summary>
             Removes the given ZipEntry from the zip archive.  
             </summary>
             
             <remarks>
             <para>
             After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
             make the changes permanent.
             </para>
             </remarks>
            
             <exception cref="T:System.ArgumentException">
             Thrown if the specified ZipEntry does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
             In this example, all entries in the zip archive dating from before December
             31st, 2007, are removed from the archive.  This is actually much easier if
             you use the RemoveSelectedEntries method.  But I needed an example for
             RemoveEntry, so here it is.
             <code>
             String ZipFileToRead = "ArchiveToModify.zip";
             System.DateTime Threshold = new System.DateTime(2007,12,31);
             using (ZipFile zip = ZipFile.Read(ZipFileToRead))
             {
               var EntriesToRemove = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                 {
                   // We cannot remove the entry from the list, within the context of 
                   // an enumeration of said list.
                   // So we add the doomed entry to a list to be removed later.
                   EntriesToRemove.Add(e);
                 }
               }
               
               // actually remove the doomed entries. 
               foreach (ZipEntry zombie in EntriesToRemove)
                 zip.RemoveEntry(zombie);
               
               zip.Comment= String.Format("This zip archive was updated at {0}.", 
                                          System.DateTime.Now.ToString("G"));
            
               // save with a different name
               zip.Save("Archive-Updated.zip");
             }
             </code>
             
             <code lang="VB">
               Dim ZipFileToRead As String = "ArchiveToModify.zip"
               Dim Threshold As New DateTime(2007, 12, 31)
               Using zip As ZipFile = ZipFile.Read(ZipFileToRead)
                   Dim EntriesToRemove As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           ' We cannot remove the entry from the list, within the context of 
                           ' an enumeration of said list.
                           ' So we add the doomed entry to a list to be removed later.
                           EntriesToRemove.Add(e)
                       End If
                   Next
               
                   ' actually remove the doomed entries. 
                   Dim zombie As ZipEntry
                   For Each zombie In EntriesToRemove
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = String.Format("This zip archive was updated at {0}.", DateTime.Now.ToString("G"))
                   'save as a different name
                   zip.Save("Archive-Updated.zip")
               End Using
             </code>
             </example>
             
             <param name="entry">
             The <c>ZipEntry</c> to remove from the zip. 
             </param>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveSelectedEntries(System.String)"/>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveEntry(System.String)">
             <summary>
             Removes the <c>ZipEntry</c> with the given filename from the zip archive.  
             </summary>
             
             <remarks>
             <para>
             After calling <c>RemoveEntry</c>, the application must call <c>Save</c> to
             make the changes permanent.
             </para>
            
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown if the <c>ZipFile</c> is not updatable. 
             </exception>
            
             <exception cref="T:System.ArgumentException">
             Thrown if a ZipEntry with the specified filename does not exist in the <c>ZipFile</c>.
             </exception>
            
             <example>
             This example shows one way to remove an entry with a given filename from an 
             existing zip archive.
             <code>
             String ZipFileToRead= "PackedDocuments.zip";
             string Candidate = "DatedMaterial.xps";
             using (ZipFile zip = new ZipFile(ZipFileToRead))
             {
               if (zip.EntryFilenames.Contains(Candidate))
               {
                 zip.RemoveEntry(Candidate);
                 zip.Comment= String.Format("The file '{0}' has been removed from this archive.", 
                                            Candidate);
                 zip.Save();
               }
             }
             </code>
             <code lang="VB">
               Dim ZipFileToRead As String = "PackedDocuments.zip"
               Dim Candidate As String = "DatedMaterial.xps"
               Using zip As ZipFile = New ZipFile(ZipFileToRead)
                   If zip.EntryFilenames.Contains(Candidate) Then
                       zip.RemoveEntry(Candidate)
                       zip.Comment = String.Format("The file '{0}' has been removed from this archive.", Candidate)
                       zip.Save
                   End If
               End Using
             </code>
             </example>
             
             <param name="fileName">
             The name of the file, including any directory path, to remove from the zip. 
             The filename match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             pathname can use forward-slashes or backward slashes.
             </param>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Finalize">
            <summary>
            This is the class Destructor, which gets called implicitly when the instance
            is destroyed.  Because the <c>ZipFile</c> type implements IDisposable, this
            method calls Dispose(false).
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Dispose">
             <summary>
             Handles closing of the read and write streams associated
             to the <c>ZipFile</c>, if necessary.  
             </summary>
            
             <remarks>
             The Dispose() method is generally 
             employed implicitly, via a using() {} statement. (Using...End Using in VB)
             Always use a using statement, or always insure that you are calling Dispose() 
             explicitly.
             </remarks>
            
             <example>
             This example extracts an entry selected by name, from the Zip file to the
             Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               foreach (ZipEntry e in zip)
               {
                 if (WantThisEntry(e.FileName)) 
                   zip.Extract(e.FileName, Console.OpenStandardOutput());
               }
             } // Dispose() is called implicitly here.
             </code>
             
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(zipfile)
                 Dim e As ZipEntry
                 For Each e In zip
                   If WantThisEntry(e.FileName) Then
                       zip.Extract(e.FileName, Console.OpenStandardOutput())
                   End If
                 Next
             End Using ' Dispose is implicity called here
             </code>
             </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            The Dispose() method.  It disposes any managed resources, 
            if the flag is set, then marks the instance disposed.
            This method is typically not called from application code.
            </summary>
            <param name="disposeManagedResources">indicates whether the
            method should dispose streams or not.</param>
        </member>
        <member name="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.SaveProgress">
             <summary>
             An event handler invoked when a Save() starts, before and after each entry has been
             written to the archive, when a Save() completes, and during other Save events.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event, different properties on the
             SaveProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a SaveProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Saving_Started</term>
             <description>Fired when ZipFile.Save() begins. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BeforeSaveEntry</term>
             <description>Fired within ZipFile.Save(), just before writing data for each particular entry. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveEntry</term>
             <description>Fired within ZipFile.Save(), just after having finished writing data for each 
             particular entry. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_Completed</term>
             <description>Fired when ZipFile.Save() has completed. 
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterSaveTempArchive</term>
             <description>Fired after the temporary file has been created.  This happens only
             when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BeforeRenameTempArchive</term>
             <description>Fired just before renaming the temporary file to the permanent location.  This 
             happens only when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterRenameTempArchive</term>
             <description>Fired just after renaming the temporary file to the permanent location.  This 
             happens only when saving to a disk file.  This event will not be invoked when saving to a stream.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_AfterCompileSelfExtractor</term>
             <description>Fired after a self-extracting archive has finished compiling. 
             This EventType is used only within SaveSelfExtractor().
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Saving_BytesRead</term>
             <description>Set during the save of a particular entry, to update progress of the Save(). 
             When this EventType is set, the BytesTransferred is the number of bytes that have been read from the 
             source stream.  The TotalBytesToTransfer is the number of bytes in the uncompressed file.
             </description>
             </item>
             
             </list>
             </remarks>
            
             <example>
             <code lang="C#">
             static bool justHadByteUpdate= false;
             public static void SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 if (e.EventType == ZipProgressEventType.Saving_Started)
                     Console.WriteLine("Saving: {0}", e.ArchiveName);
             
                 else if (e.EventType == ZipProgressEventType.Saving_Completed)
                 {
                     justHadByteUpdate= false; 
                     Console.WriteLine();
                     Console.WriteLine("Done: {0}", e.ArchiveName);
                 }
             
                 else if (e.EventType == ZipProgressEventType.Saving_BeforeWriteEntry)
                 {
                     if (justHadByteUpdate) 
                         Console.WriteLine();
                     Console.WriteLine("  Writing: {0} ({1}/{2})",  
                                       e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal);
                     justHadByteUpdate= false;
                 }
             
                 else if (e.EventType == ZipProgressEventType.Saving_EntryBytesRead)
                 {
                     if (justHadByteUpdate)
                         Console.SetCursorPosition(0, Console.CursorTop);
                      Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                                   e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                     justHadByteUpdate= true;
                 }
             }
             
             public static ZipUp(string targetZip, string directory)
             {
               using (var zip = new ZipFile()) {
                 zip.SaveProgress += SaveProgress; 
                 zip.AddDirectory(directory);
                 zip.Save(targetZip);
               }
             }
            
             </code>
            
             <code lang="VB">
             Public Sub ZipUp(ByVal targetZip As String, ByVal directory As String)
                 Try 
                     Using zip As ZipFile = New ZipFile
                         AddHandler zip.SaveProgress, AddressOf MySaveProgress
                         zip.AddDirectory(directory)
                         zip.Save(targetZip)
                     End Using
                 Catch ex1 As Exception
                     Console.Error.WriteLine(("exception: " &amp; ex1.ToString))
                 End Try
             End Sub
             
             Private Shared justHadByteUpdate As Boolean = False
             
             Public Shared Sub MySaveProgress(ByVal sender As Object, ByVal e As SaveProgressEventArgs)
                 If (e.EventType Is ZipProgressEventType.Saving_Started) Then
                     Console.WriteLine("Saving: {0}", e.ArchiveName)
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_Completed) Then
                     justHadByteUpdate = False
                     Console.WriteLine
                     Console.WriteLine("Done: {0}", e.ArchiveName)
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_BeforeWriteEntry) Then
                     If justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("  Writing: {0} ({1}/{2})", e.CurrentEntry.FileName, e.EntriesSaved, e.EntriesTotal)
                     justHadByteUpdate = False
             
                 ElseIf (e.EventType Is ZipProgressEventType.Saving_EntryBytesRead) Then
                     If justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("     {0}/{1} ({2:N0}%)", e.BytesTransferred, _
                                   e.TotalBytesToTransfer, _
                                   (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     justHadByteUpdate = True
                 End If
             End Sub
             </code>
            
             <para>
             This is an example of using the SaveProgress events in a WinForms app.
             </para>
             <code>
             delegate void SaveEntryProgress(SaveProgressEventArgs e);
             delegate void ButtonClick(object sender, EventArgs e);
            
             public class WorkerOptions
             {
                 public string ZipName;
                 public string Folder;
                 public string Encoding;
                 public string Comment;
                 public int ZipFlavor;
                 public Zip64Option Zip64;
             }
            
             private int _progress2MaxFactor;
             private bool _saveCanceled;
             private long _totalBytesBeforeCompress;
             private long _totalBytesAfterCompress;
             private Thread _workerThread;
            
            
             private void btnZipup_Click(object sender, EventArgs e)
             {
                 KickoffZipup();
             }
            
             private void btnCancel_Click(object sender, EventArgs e)
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new ButtonClick(this.btnCancel_Click), new object[] { sender, e });
                 }
                 else
                 {
                     _saveCanceled = true;
                     lblStatus.Text = "Canceled...";
                     ResetState();
                 }
             }
            
             private void KickoffZipup()
             {
                 _folderName = tbDirName.Text;
            
                 if (_folderName == null || _folderName == "") return;
                 if (this.tbZipName.Text == null || this.tbZipName.Text == "") return;
            
                 // check for existence of the zip file:
                 if (System.IO.File.Exists(this.tbZipName.Text))
                 {
                     var dlgResult = MessageBox.Show(String.Format("The file you have specified ({0}) already exists." + 
                                                                   "  Do you want to overwrite this file?", this.tbZipName.Text), 
                                                     "Confirmation is Required", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                     if (dlgResult != DialogResult.Yes) return;
                     System.IO.File.Delete(this.tbZipName.Text);
                 }
            
                  _saveCanceled = false;
                 _nFilesCompleted = 0;
                 _totalBytesAfterCompress = 0;
                 _totalBytesBeforeCompress = 0;
                 this.btnOk.Enabled = false;
                 this.btnOk.Text = "Zipping...";
                 this.btnCancel.Enabled = true;
                 lblStatus.Text = "Zipping...";
            
                 var options = new WorkerOptions
                 {
                     ZipName = this.tbZipName.Text,
                     Folder = _folderName,
                     Encoding = "ibm437"
                 };
            
                 if (this.comboBox1.SelectedIndex != 0)
                 {
                     options.Encoding = this.comboBox1.SelectedItem.ToString();
                 }
            
                 if (this.radioFlavorSfxCmd.Checked)
                     options.ZipFlavor = 2;
                 else if (this.radioFlavorSfxGui.Checked)
                     options.ZipFlavor = 1;
                 else options.ZipFlavor = 0;
            
                 if (this.radioZip64AsNecessary.Checked)
                     options.Zip64 = Zip64Option.AsNecessary;
                 else if (this.radioZip64Always.Checked)
                     options.Zip64 = Zip64Option.Always;
                 else options.Zip64 = Zip64Option.Never;
            
                 options.Comment = String.Format("Encoding:{0} || Flavor:{1} || ZIP64:{2}\r\nCreated at {3} || {4}\r\n",
                             options.Encoding,
                             FlavorToString(options.ZipFlavor),
                             options.Zip64.ToString(),
                             System.DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"),
                             this.Text);
            
                 if (this.tbComment.Text != TB_COMMENT_NOTE)
                     options.Comment += this.tbComment.Text;
            
                 _workerThread = new Thread(this.DoSave);
                 _workerThread.Name = "Zip Saver thread";
                 _workerThread.Start(options);
                 this.Cursor = Cursors.WaitCursor;
              }
            
            
             private void DoSave(Object p)
             {
                 WorkerOptions options = p as WorkerOptions;
                 try
                 {
                     using (var zip1 = new ZipFile())
                     {
                         zip1.ProvisionalAlternateEncoding = System.Text.Encoding.GetEncoding(options.Encoding);
                         zip1.Comment = options.Comment;
                         zip1.AddDirectory(options.Folder);
                         _entriesToZip = zip1.EntryFileNames.Count;
                         SetProgressBars();
                         zip1.SaveProgress += this.zip1_SaveProgress;
            
                         zip1.UseZip64WhenSaving = options.Zip64;
            
                         if (options.ZipFlavor == 1)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.WinFormsApplication);
                         else if (options.ZipFlavor == 2)
                             zip1.SaveSelfExtractor(options.ZipName, SelfExtractorFlavor.ConsoleApplication);
                         else
                             zip1.Save(options.ZipName);
                     }
                 }
                 catch (System.Exception exc1)
                 {
                     MessageBox.Show(String.Format("Exception while zipping: {0}", exc1.Message));
                     btnCancel_Click(null, null);
                 }
             }
            
            
            
             void zip1_SaveProgress(object sender, SaveProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Saving_AfterWriteEntry:
                         StepArchiveProgress(e);
                         break;
                     case ZipProgressEventType.Saving_EntryBytesRead:
                         StepEntryProgress(e);
                         break;
                     case ZipProgressEventType.Saving_Completed:
                         SaveCompleted();
                         break;
                     case ZipProgressEventType.Saving_AfterSaveTempArchive:
                         // this event only occurs when saving an SFX file
                         TempArchiveSaved();
                         break;
                 }
                 if (_saveCanceled)
                     e.Cancel = true;
             }
            
            
            
             private void StepArchiveProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar1.InvokeRequired)
                 {
                     this.progressBar1.Invoke(new SaveEntryProgress(this.StepArchiveProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         _nFilesCompleted++;
                         this.progressBar1.PerformStep();
                         _totalBytesAfterCompress += e.CurrentEntry.CompressedSize;
                         _totalBytesBeforeCompress += e.CurrentEntry.UncompressedSize;
            
                         // reset the progress bar for the entry:
                         this.progressBar2.Value = this.progressBar2.Maximum = 1;
            
                         this.Update();
                     }
                 }
             }
            
            
             private void StepEntryProgress(SaveProgressEventArgs e)
             {
                 if (this.progressBar2.InvokeRequired)
                 {
                     this.progressBar2.Invoke(new SaveEntryProgress(this.StepEntryProgress), new object[] { e });
                 }
                 else
                 {
                     if (!_saveCanceled)
                     {
                         if (this.progressBar2.Maximum == 1)
                         {
                             // reset
                             Int64 max = e.TotalBytesToTransfer;
                             _progress2MaxFactor = 0;
                             while (max > System.Int32.MaxValue)
                             {
                                 max /= 2;
                                 _progress2MaxFactor++;
                             }
                             this.progressBar2.Maximum = (int)max;
                             lblStatus.Text = String.Format("{0} of {1} files...({2})",
                                 _nFilesCompleted + 1, _entriesToZip, e.CurrentEntry.FileName);
                         }
            
                          int xferred = e.BytesTransferred >> _progress2MaxFactor;
            
                          this.progressBar2.Value = (xferred >= this.progressBar2.Maximum)
                             ? this.progressBar2.Maximum
                             : xferred;
            
                          this.Update();
                     }
                 }
             }
            
             private void SaveCompleted()
             {
                 if (this.lblStatus.InvokeRequired)
                 {
                     this.lblStatus.Invoke(new MethodInvoker(this.SaveCompleted));
                 }
                 else
                 {
                     lblStatus.Text = String.Format("Done, Compressed {0} files, {1:N0}% of original.",
                         _nFilesCompleted, (100.00 * _totalBytesAfterCompress) / _totalBytesBeforeCompress);
                      ResetState();
                 }
             }
            
             private void ResetState()
             {
                 this.btnCancel.Enabled = false;
                 this.btnOk.Enabled = true;
                 this.btnOk.Text = "Zip it!";
                 this.progressBar1.Value = 0;
                 this.progressBar2.Value = 0;
                 this.Cursor = Cursors.Default;
                 if (!_workerThread.IsAlive)
                     _workerThread.Join();
             }
             </code>
            
             </example>
        </member>
        <member name="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.ReadProgress">
             <summary>
             An event handler invoked before, during, and after the reading of a zip archive.
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event being signaled, different properties on the
             ReadProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a ReadProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Reading_Started</term>
             <description>Fired just as ZipFile.Read() begins. Meaningful properties: ArchiveName.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_Completed</term>
             <description>Fired when ZipFile.Read() has completed. Meaningful properties: ArchiveName.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_ArchiveBytesRead</term>
             <description>Fired while reading, updates the number of bytes read for the entire archive. 
             Meaningful properties: ArchiveName, CurrentEntry, BytesTransferred, TotalBytesToTransfer.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_BeforeReadEntry</term>
             <description>Indicates an entry is about to be read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Reading_AfterReadEntry</term>
             <description>Indicates an entry has just been read from the archive.
             Meaningful properties: ArchiveName, EntriesTotal, CurrentEntry.
             </description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractProgress">
             <summary>
             An event handler invoked before, during, and after extraction of entries 
             in the zip archive. 
             </summary>
            
             <remarks>
             <para>
             Depending on the particular event, different properties on the
             ExtractProgressEventArgs parameter are set.  The following table 
             summarizes the available EventTypes and the conditions under which this 
             event handler is invoked with a ExtractProgressEventArgs with the given EventType.
             </para>
             
             <list type="table">
             <listheader>
             <term>value of EntryType</term>
             <description>Meaning and conditions</description>
             </listheader>
             
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractAll</term>
             <description>Set when ExtractAll() begins.  The ArchiveName, Overwrite,
             and ExtractLocation properties are meaningful.</description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractAll</term>
             <description>Set when ExtractAll() has completed.  The ArchiveName, 
             Overwrite, and ExtractLocation properties are meaningful.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_BeforeExtractEntry</term>
             <description>Set when an Extract() on an entry in the ZipFile has begun.  
             Properties that are meaningful:  ArchiveName, EntriesTotal, CurrentEntry, Overwrite, 
             ExtractLocation, EntriesExtracted.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_AfterExtractEntry</term>
             <description>Set when an Extract() on an entry in the ZipFile has completed.  
             Properties that are meaningful:  ArchiveName, EntriesTotal, CurrentEntry, Overwrite, 
             ExtractLocation, EntriesExtracted.
             </description>
             </item>
             
             <item>
             <term>ZipProgressEventType.Extracting_EntryBytesWritten</term>
             <description>Set within a call to Extract() on an entry in the ZipFile, as
             data is extracted for the entry.  Properties that are meaningful:  ArchiveName, 
             CurrentEntry, BytesTransferred, TotalBytesToTransfer. 
             </description>
             </item>
            
             <item>
             <term>ZipProgressEventType.Extracting_ExtractEntryWouldOverwrite</term>
             <description>Set within a call to Extract() on an entry in the ZipFile, when the
             extraction would overwrite an existing file. This event type is used only when
             <c>ExtractExistingFileAction</c> on the <c>ZipFile</c> or <c>ZipEntry</c> is set
             to <c>InvokeExtractProgressEvent</c>.
             </description>
             </item>
             
             </list>
             
             </remarks>
            
             <example>
             <code>
             private static bool justHadByteUpdate = false;
             public static void ExtractProgress(object sender, ExtractProgressEventArgs e)
             {
               if(e.EventType == ZipProgressEventType.Extracting_EntryBytesWritten)
               {
                 if (justHadByteUpdate)
                   Console.SetCursorPosition(0, Console.CursorTop);
            
                 Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer,
                               e.BytesTransferred / (0.01 * e.TotalBytesToTransfer ));
                 justHadByteUpdate = true;
               }
               else if(e.EventType == ZipProgressEventType.Extracting_BeforeExtractEntry)
               {
                 if (justHadByteUpdate) 
                   Console.WriteLine();
                 Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName);
                 justHadByteUpdate= false;
               }
             }
            
             public static ExtractZip(string zipToExtract, string directory)
             {
               string TargetDirectory= "extract";
               using (var zip = ZipFile.Read(zipToExtract)) {
                 zip.ExtractProgress += ExtractProgress; 
                 foreach (var e in zip1)
                 {
                   e.Extract(TargetDirectory, true);
                 }
               }
             }
            
             </code>
             <code lang="VB">
             Public Shared Sub Main(ByVal args As String())
                 Dim ZipToUnpack As String = "C1P3SML.zip"
                 Dim TargetDir As String = "ExtractTest_Extract"
                 Console.WriteLine("Extracting file {0} to {1}", ZipToUnpack, TargetDir)
                 Using zip1 As ZipFile = ZipFile.Read(ZipToUnpack)
                     AddHandler zip1.ExtractProgress, AddressOf MyExtractProgress
                     Dim e As ZipEntry
                     For Each e In zip1
                         e.Extract(TargetDir, True)
                     Next
                 End Using
             End Sub
             
             Private Shared justHadByteUpdate As Boolean = False
             
             Public Shared Sub MyExtractProgress(ByVal sender As Object, ByVal e As ExtractProgressEventArgs)
                 If (e.EventType = ZipProgressEventType.Extracting_EntryBytesWritten) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.SetCursorPosition(0, Console.CursorTop)
                     End If
                     Console.Write("   {0}/{1} ({2:N0}%)", e.BytesTransferred, e.TotalBytesToTransfer, (CDbl(e.BytesTransferred) / (0.01 * e.TotalBytesToTransfer)))
                     ExtractTest.justHadByteUpdate = True
                 ElseIf (e.EventType = ZipProgressEventType.Extracting_BeforeExtractEntry) Then
                     If ExtractTest.justHadByteUpdate Then
                         Console.WriteLine
                     End If
                     Console.WriteLine("Extracting: {0}", e.CurrentEntry.FileName)
                     ExtractTest.justHadByteUpdate = False
                 End If
             End Sub
             </code>
             </example>
        </member>
        <member name="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddProgress">
             <summary>
             An event handler invoked before, during, and after Adding entries to a zip archive.
             </summary>
            
             <remarks>
                 Adding a large number of entries to a zip file can take a long
                 time.  For example, when calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddDirectory(System.String)"/> on a
                 directory that contains 50,000 files, it could take 3 minutes or so.
                 This event handler allws an application to track the progress of the Add
                 operation.
             </remarks>
            
             <example>
             <code lang="C#">
            
             int _numEntriesToAdd= 0;
             int _numEntriesAdded= 0;
             void AddProgressHandler(object sender, AddProgressEventArgs e)
             {
                 switch (e.EventType)
                 {
                     case ZipProgressEventType.Adding_Started:
                         Console.WriteLine("Adding files to the zip...");
                         break;
                      case ZipProgressEventType.Adding_AfterAddEntry:
                         _numEntriesAdded++;
                         Console.WriteLine(String.Format("Adding file {0}/{1} :: {2}",
                                                  _numEntriesAdded, _numEntriesToAdd, e.CurrentEntry.FileName));
                         break;
                         
                     case ZipProgressEventType.Adding_Completed:
                         Console.WriteLine("Added all files");
                         break;
                 }
             }
                
             void CreateTheZip()
             {
                 using (ZipFile zip = new ZipFile())
                 {
                     zip.AddProgress += AddProgressHandler;
                     zip.AddDirectory(System.IO.Path.GetFileName(DirToZip));
                     zip.BufferSize = 4096;
                     zip.SaveProgress += SaveProgressHandler;
                     zip.Save(ZipFileToCreate);
                 }
             }
                 
             </code>
             </example>
        </member>
        <member name="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.ZipError">
             <summary>
             An event handler invoked when an error occurs during open or read of files
             while saving a zip archive.
             </summary>
            
             <remarks>
              <para>
                 In some cases an error will occur when a file to be added to the zip
                 archive is opened.  In other cases, an error might occur after the file
                 has been successfully opened, while reading the file.
              </para>
             
              <para>
                The first problem might occur when calling Adddirectory() on a directory
                that contains a Clipper .dbf file; the file is locked by Clipper and
                cannot be opened bby another process. An example of the second problem is
                the ERROR_LOCK_VIOLATION that results when a file is opened by another
                process, but not locked, and a range lock has been taken on the file.
                Microsoft Outlook takes range locks on .PST files.
              </para>
            
             </remarks>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem.  The path can be relative or fully-qualified.
             </summary>
            
             <remarks>
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified path. 
             </para>
            
             <para>
             If an extraction of a file from the zip archive would overwrite an existing
             file in the filesystem, the action taken is dictated by the
             ExtractExistingFile property, which overrides any setting you may have made
             on individual ZipEntry instances.  By default, if you have not set that
             property on the <c>ZipFile</c> instance, the entry will not be extracted,
             the existing file will not be overwritten and an exception will be
             thrown. To change this, set the property, or use the <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)" />
             overload that allows you to specify an ExtractExistingFileAction parameter.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file applies
             to all entries.  If you want to set this on a per-entry basis, then you must
             use one of the <see cef="ZipEntry.Extract" >ZipEntry.Extract</see> methods.
             </para>
            
             <para>
             This method will send verbose output messages to the
             StatusMessageTextWriter, if it is set on the <c>ZipFile</c> instance.
             </para>
            
             <para>
             You may wish to take advantage of the <c>ExtractProgress</c> event.
             </para>
            
             <para>
             About Timestamps: When extracting a file entry from a zip archive, the
             extracted file gets the last modified time of the entry as stored in the
             archive. The archive may also store extended file timestamp information,
             including last accessed and created times. If these are present in the
             ZipEntry, then the extracted file will also get these times.
             </para>
            
             <para>
             A Directory entry is somewhat different. It will get the times as described
             for a file entry, but, if there are file entries in the zip archive that,
             when extracted, appear in the just-created directory, then when those file
             entries are extracted, the last modified and last accessed times of the
             directory will change, as a side effect.  The result is that after an
             extraction of a directory and a number of files within the directory, the
             last modified and last accessed timestamps on the directory will reflect the
             time that the last file was extracted into the directory, rather than the
             time stored in the zip archive for the directory.
             </para>
            
             <para>
             To compensate, when extracting an archive with <c>ExtractAll</c>, DotNetZip
             will extract all the file and directory entries as described above, but it
             will then make a second pass on the directories, and reset the times on the
             directories to reflect what is stored in the zip archive.
             </para>
            
             <para>
             This compensation is performed only within the context of an
             <c>ExtractAll</c>. If you call <c>ZipEntry.Extract</c> on a directory entry,
             the timestamps on directory in the filesystem will reflect the times stored
             in the zip.  If you then call <c>ZipEntry.Extract</c> on a file entry, which
             is extracted into the directory, the timestamps on the directory will be
             updated to the current time.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  The extraction will overwrite any existing
             files silently.
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently;
                 zip.ExtractAll(TargetDirectory);
             }
             </code>
             
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractExistingFile= ExtractExistingFileAction.OverwriteSilently
                 zip.ExtractAll(TargetDirectory)
             End Using
             </code>
             </example>
             
             <seealso cref="E:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractProgress"/>
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/>
            
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified. 
             </param>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String,System.Boolean)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the filesystem,  
             optionally overwriting any existing files. The path can be relative or fully-qualified. 
             </summary>
            
             <remarks>
             This method will send verbose output messages to the
             StatusMessageTextWriter, if it is set on the <c>ZipFile</c> instance.
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, 
             to the specified target directory.  It overwrites any existing files.
             <code>
             String TargetDirectory= "unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
                 zip.ExtractAll(TargetDirectory, true);
             }
             </code>
             
             <code lang="VB">
             Dim TargetDirectory As String = "unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, True)
             End Using
             </code>
             </example>
             
             <param name="path">the path to which the contents of the zipfile are extracted.
             </param>
             <param name="wantOverwrite">true to overwrite any existing files on extraction
             </param>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Extracts all of the items in the zip archive, to the specified path in the
             filesystem, using the specified behavior when extraction would overwrite an
             existing file.
             </summary>
            
             <remarks>
            
             <para>
             This method will extract all entries in the <c>ZipFile</c> to the specified
             path.  For an extraction that would overwrite an existing file, the behavior
             is dictated by the extractExistingFile parameter, which overrides any
             setting you may have made on individual ZipEntry instances.
             </para>
            
             <para>
             The action to take when an extract would overwrite an existing file applies
             to all entries.  If you want to set this on a per-entry basis, then you must
             use one of the <see cef="ZipEntry.Extract" /> methods.
             </para>
            
             <para>
             Calling this method is equivalent to setting the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile"/> property and then calling <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractAll(System.String)"/>.
             </para>
            
             <para>
             This method will send verbose output messages to the
             StatusMessageTextWriter, if it is set on the <c>ZipFile</c> instance.
             </para>
             </remarks>
            
             <example>
             This example extracts all the entries in a zip archive file, to the
             specified target directory.  It does not overwrite any existing files.
             <code>
             String TargetDirectory= "c:\\unpack";
             using(ZipFile zip= ZipFile.Read(ZipFileToExtract))
             {
               zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite);
             }
             </code>
             
             <code lang="VB">
             Dim TargetDirectory As String = "c:\unpack"
             Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                 zip.ExtractAll(TargetDirectory, ExtractExistingFileAction.DontOverwrite)
             End Using
             </code>
             </example>
             
             <param name="path">
             The path to which the contents of the zipfile will be extracted.
             The path can be relative or fully-qualified. 
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String)">
             <summary>
             Extract a single item from the archive to the current working directory.  
             </summary>
             
             <remarks>
             <para>
             A file corresponding to the entry named by the <c>fileName</c> parameter,
             including any relative qualifying path for the entry, is created at the
             specified directory.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             For an extraction that would overwrite an existing file, the action taken is
             dictated by the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile" /> property, which
             overrides any setting you may have made on the individual ZipEntry instance,
             unless it is not the default "Throw" action.  If it is the default "Throw",
             then the action taken is that specified in the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile" /> property on the <c>ZipEntry</c>
             instance.
             </para>
            
             <para>
             The file, including any relative qualifying path, is extracted to the current working
             directory.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="fileName">
             The file to extract. It must be the exact name of the file, including the path
             contained in the archive, if any. The filename match is not case-sensitive by
             default; you can use the <c>CaseSensitiveRetrieval</c> property to change
             this behavior.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.String)">
             <summary>
             Extract a single item from the archive to the specified directory.
             </summary>
            
             <remarks>
             <para>
             A file corresponding to the entry named by the <c>fileName</c> parameter,
             including any relative qualifying path for the entry, is created at the
             specified directory.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             For an extraction that would overwrite an existing file, the action taken is
             dictated by the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractExistingFile" /> property, which
             overrides any setting you may have made on the individual ZipEntry instance,
             unless it is not the default "Throw" action.  If it is the default "Throw",
             then the action taken is that specified in the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile" /> property on the <c>ZipEntry</c>
             instance.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has
             been set.
             </para>
             </remarks>
             
             <param name="entryName">
             the name of the entry to extract. It must be the exact filename, including
             the path specified on the entry in the archive, if any. The match is not
             case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c>
             property to change this behavior.
             </param>
             <param name="directoryName">
             the directory into which to extract. It will be created 
             if it does not exist.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.Boolean)">
             <summary>
             Extract a single item from the archive to the current working directory,
             potentially overwriting any existing file in the filesystem by the same
             name.
             </summary>
             
             <remarks>
             <para>
             A file corresponding to the entry named by the <c>fileName</c> parameter,
             including any relative qualifying path for the entry, is created at the
             current working directory.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has
             been set.
             </para>
             </remarks>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CaseSensitiveRetrieval"/>
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
            
             <param name="entryName">
             The name of the entry to extract. It must be the exact name, including the
             path specified on the entry in the archive, if any. The match is not
             case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c>
             property to change this behavior.  The path, if any, can use forward-slashes
             or backward slashes.
             </param>
            
             <param name="wantOverwrite">
             True if the caller wants to overwrite any existing files by the given name.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Extract a single item from the archive to the current working directory,
             potentially overwriting any existing file in the filesystem by the same
             name.
             </summary>
             
             <remarks>
             <para>
             Using this method, the entry is extracted using the Password that is
             specified on the <c>ZipFile</c> instance. If you have not set the Password
             property, then the password is <c>null</c>, and the entry is extracted with
             no password.  The file, including any relative qualifying path, is created
             at the current working directory.
             </para>
            
             <para>
             For an extraction that would overwrite an existing file, the action taken is
             dictated by the extractExistingFile parameter, which overrides any setting
             you may have made on the individual ZipEntry instance.  To avoid this, use
             one of the <c>ZipEntry.Extract</c> methods.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has
             been set.
             </para>
             </remarks>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.CaseSensitiveRetrieval"/>
            
             <param name="entryName">
             The name of the entry to extract. It must be the exact name, including the
             path specified on the entry in the archive, if any. The match is not
             case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c>
             property to change this behavior.  The path, if any, can use forward-slashes
             or backward slashes.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.String,System.Boolean)">
             <summary>
             Extract a single item from the archive, into the specified directory,
             potentially overwriting any existing file in the filesystem by the same
             name.
             </summary>
             
             <remarks>
             <para>
             A file corresponding to the entry named by the <c>fileName</c> parameter,
             including any relative qualifying path for the entry, is created at the
             specified directory.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has
             been set.
             </para>
             </remarks>
             
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
             
             <param name="entryName">
             The name of the entry to extract. It must be the exact name, including the
             path specified on the entry in the archive, if any. The match is not
             case-sensitive by default; you can use the <c>CaseSensitiveRetrieval</c>
             property to change this behavior. The path, if any, can use forward-slashes
             or backward slashes.
             </param>
             
             <param name="directoryName">
             The directory into which to extract. It will be created 
             if it does not exist.
             </param>
             
             <param name="wantOverwrite">
             True if the caller wants to overwrite any existing files 
             by the given name. 
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Extract a single item from the archive, into the specified directory, 
             using the specified behavior when extraction would overwrite an existing file.
             </summary>
             
             <remarks>
             <para>
             A file corresponding to the entry named by the <c>fileName</c> parameter,
             including any relative qualifying path for the entry, is created at the
             specified directory.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             For an extraction that would overwrite an existing file, the action taken is
             dictated by the extractExistingFile parameter, which overrides any setting
             you may have made on the individual ZipEntry instance.  To avoid this, use
             one of the <c>ZipEntry.Extract</c> methods.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has been set. 
             </para>
             </remarks>
             
             <param name="entryName">
             The name of the entry to extract. It must be the exact name, including the path
             specified on the entry in the archive, if any. The match is not case-sensitive by
             default; you can use the <c>CaseSensitiveRetrieval</c> property to change this
             behavior. The path, if any, can use forward-slashes or backward slashes.
             </param>
             
             <param name="directoryName">
             The directory into which to extract. It will be created if it does not exist.
             </param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Extract(System.String,System.IO.Stream)">
             <summary>
             Extract a single specified file from the archive, to the given stream.   
             </summary>
             
             <remarks>
             <para>
             The entry identified by the entryName parameter is extracted to the given stream.
             </para>
            
             <para>
             An entry that requires a password for extraction is extracted using the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> that is specified on the <c>ZipFile</c> instance,
             which overrides any Password you may have set directly on the
             <c>ZipEntry</c> instance. If you have not set the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Password"/> property, or if you have set it to <c>null</c>,
             and the entry requires a password for extraction, an Exception will be
             thrown.  An exception will also be thrown if the entry requires a password
             for extraction, and the password specified on the <c>ZipFile</c> instance
             does not match that required for the <c>ZipEntry</c>.
             </para>
            
             <para>
             The ExtractProgress event is invoked before and after extraction, if it has
             been set.
             </para>
             </remarks>
             
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if the outputStream is not writable, or if the filename is
             <c>null</c> or empty. The inner exception is an ArgumentException in each
             case.
             </exception>
            
             <param name="entryName">
             the name of the entry to extract, including the path used in the archive, if
             any.  The match is not case-sensitive by default; you can use the
             <c>CaseSensitiveRetrieval</c> property to change this behavior. The
             application can specify pathnames using forward-slashes or backward slashes.
             </param>
            
             <param name="outputStream">
             the stream to which the extacted, decompressed file data is written. 
             The stream must be writable.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String)">
             <summary>
             Reads a zip file archive and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is the
             <c>IBM437</c> codepage.
             </para>
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown if the <c>ZipFile</c> cannot be read. The implementation of this method
             relies on <c>System.IO.File.OpenRead</c>, which can throw a variety of exceptions,
             including specific exceptions if a file is not found, an unauthorized access
             exception, exceptions for poorly formatted filenames, and so on.
             </exception>
             
             <param name="fileName">
             The name of the zip archive to open.  This can be a fully-qualified or relative
             pathname.
             </param>
             
             <overloads>This method has a bunch of interesting overloads. They are all
             static (Shared in VB).  One of them is bound to be right for you.  The
             reason there are so many is that there are a few properties on the
             <c>ZipFile</c> class that must be set before you read the zipfile in, for
             them to be useful.  The set of overloads covers the most interesting cases.
             Probably there are still too many, though.</overloads>
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
            <summary>
            Reads a zip file archive and returns the instance, using the specified
            ReadProgress event handler.  
            </summary>
            
            <param name="fileName">
            The name of the zip archive to open.  
            This can be a fully-qualified or relative pathname.
            </param>
            
            <param name="readProgress">
            An event handler for Read operations.
            </param>
            
            <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.IO.TextWriter)">
             <summary>
             Reads a zip file archive using the specified text encoding, and returns the
             instance.
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in a <c>TextWriter</c>.  
             The ZipFile is read in using the default IBM437 encoding for entries where UTF-8 
             encoding is not explicitly specified.
             </para>
             </remarks>
             
             <example>
             <code lang="C#">
             var sw = new System.IO.StringWriter();
             using (ZipFile zip =  ZipFile.Read("PackedDocuments.zip", sw))
             {
               var Threshold = new DateTime(2007,7,4);
               // We cannot remove the entry from the list, within the context of 
               // an enumeration of said list.
               // So we add the doomed entry to a list to be removed later.
               // pass 1: mark the entries for removal
               var MarkedEntries = new System.Collections.Generic.List&lt;ZipEntry&gt;();
               foreach (ZipEntry e in zip)
               {
                 if (e.LastModified &lt; Threshold)
                   MarkedEntries.Add(e);
               }
               // pass 2: actually remove the entry. 
               foreach (ZipEntry zombie in MarkedEntries)
                  zip.RemoveEntry(zombie);
               zip.Comment = "This archive has been updated.";
               zip.Save();
             }
             // can now use contents of sw, eg store in an audit log
             </code>
            
             <code lang="VB">
               Dim sw As New System.IO.StringWriter
               Using zip As ZipFile = ZipFile.Read("PackedDocuments.zip", sw)
                   Dim Threshold As New DateTime(2007, 7, 4)
                   ' We cannot remove the entry from the list, within the context of 
                   ' an enumeration of said list.
                   ' So we add the doomed entry to a list to be removed later.
                   ' pass 1: mark the entries for removal
                   Dim MarkedEntries As New System.Collections.Generic.List(Of ZipEntry)
                   Dim e As ZipEntry
                   For Each e In zip
                       If (e.LastModified &lt; Threshold) Then
                           MarkedEntries.Add(e)
                       End If
                   Next
                   ' pass 2: actually remove the entry. 
                   Dim zombie As ZipEntry
                   For Each zombie In MarkedEntries
                       zip.RemoveEntry(zombie)
                   Next
                   zip.Comment = "This archive has been updated."
                   zip.Save
               End Using
               ' can now use contents of sw, eg store in an audit log
             </code>
             </example>
             
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="fileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
             
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
            <summary>
            Reads a zip file archive using the specified text encoding, and the
            specified ReadProgress event handler, and returns the instance.  
            </summary>
            
            <param name="fileName">
            The name of the zip archive to open.  
            This can be a fully-qualified or relative pathname.
            </param>
            
            <param name="readProgress">
            An event handler for Read operations.
            </param>
            
            <param name="statusMessageWriter">
            The <c>System.IO.TextWriter</c> to use for writing verbose status messages
            during operations on the zip archive.  A console application may wish to
            pass <c>System.Console.Out</c> to get messages on the Console. A graphical
            or headless application may wish to capture the messages in a different
            <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
            </param>
            
            <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.Text.Encoding)">
             <summary>
             Reads a zip file archive using the specified text encoding, and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in an <c>Encoding</c>.  
             The ZipFile is read in using the specified encoding for entries where UTF-8
             encoding is not explicitly specified.
             </para>
             </remarks>
             
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file.  For this code to work as
             desired, the zipfile must have been created using the big5 code page
             (CP950). This is typical, for example, when using WinRar on a machine with
             CP950 set as the default code page.  In that case, the names of entries
             within the Zip archive will be stored in that code page, and reading the zip
             archive must be done using that code page.  If the application did not use
             the correct code page in ZipFile.Read(), then names of entries within the
             zip archive would not be correctly retrieved.
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(ZipToExtract,
                                               System.Text.Encoding.GetEncoding(950)))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipToExtract, System.Text.Encoding.GetEncoding(950))
                 Dim e As ZipEntry
                 For Each e In zip
                  e.Extract(extractDirectory)
                 Next
             End Using
             </code>
             </example>
            
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="fileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>.
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.Text.Encoding,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding and ReadProgress
             event handler, and returns the instance.  
             </summary>
             
             <param name="fileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
             
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip file archive using the specified text encoding and the specified
             TextWriter for status messages, and returns the instance.  
             </summary>
             
             <remarks>
             <para>
             This version of the method allows the caller to pass in a <c>TextWriter</c>
             and an <c>Encoding</c>.  The ZipFile is read in using the specified encoding
             for entries where UTF-8 encoding is not explicitly specified.
             </para>
             </remarks>
             
             
             <example>
             This example shows how to read a zip file using the Big-5 Chinese code page
             (950), and extract each entry in the zip file, while sending status messages
             out to the Console.
             <code lang="C#">
             using (ZipFile zip = ZipFile.Read(ZipToExtract,
                                               System.Console.Out,
                                               System.Text.Encoding.GetEncoding(950)))
             {
               foreach (ZipEntry e in zip)
               {
                  e.Extract(extractDirectory);
               }
             }
             </code>
             </example>
            
             <exception cref="T:System.Exception">
             Thrown if the zipfile cannot be read. The implementation of this 
             method relies on <c>System.IO.File.OpenRead</c>, which can throw
             a variety of exceptions, including specific exceptions if a file
             is not found, an unauthorized access exception, exceptions for
             poorly formatted filenames, and so on. 
             </exception>
             
             <param name="fileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
             
             <seealso cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
            
             <returns>The instance read from the zip archive.</returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip file archive using the specified text encoding,  the specified
             TextWriter for status messages, and the specified ReadProgress event handler, 
             and returns the instance.  
             </summary>
             
             <param name="fileName">
             The name of the zip archive to open.  
             This can be a fully-qualified or relative pathname.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to use for writing verbose status messages
             during operations on the zip archive.  A console application may wish to
             pass <c>System.Console.Out</c> to get messages on the Console. A graphical
             or headless application may wish to capture the messages in a different
             <c>TextWriter</c>, such as a <c>System.IO.StringWriter</c>.
             </param>
             
             <param name="encoding">
             The <c>System.Text.Encoding</c> to use when reading in the zip archive. Be
             careful specifying the encoding.  If the value you use here is not the same
             as the Encoding used when the zip archive was created (possibly by a
             different archiver) you will get unexpected results and possibly exceptions.
             </param>
             
             <returns>The instance read from the zip archive.</returns>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream)">
             <summary>
             Reads a zip archive from a stream.
             </summary>
            
             <remarks>
             <para>
             This is useful when when the zip archive content is available from an
             already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed.
             </para>
            
             <para>
             Using this overload, the stream is read using the default
             <c>System.Text.Encoding</c>, which is the <c>IBM437</c> codepage. If you
             want to specify the encoding to use when reading the zipfile content, check
             out the other overloads of the ZipFile constructor.
             </para>
            
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <example>
             <para>
             This example shows how to Read zip content from a stream, and extract one
             entry into a different stream. In this example, the filename
             "NameOfEntryInArchive.doc", refers only to the name of the entry within the
             zip archive.  A file by that name is not created in the filesystem.  The I/O
             is done strictly with the given streams.
             </para>
             
             <code>
             using (ZipFile zip = ZipFile.Read(InputStream))
             {
                zip.Extract("NameOfEntryInArchive.doc", OutputStream);
             }
             </code>
             <code lang="VB">
             Using zip as ZipFile = ZipFile.Read(InputStream)
                zip.Extract("NameOfEntryInArchive.doc", OutputStream)
             End Using
             </code>
             </example>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, with a given ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             When opening large zip archives, you may want to display a progress bar or
             other indicator of status progress while reading.  This Read() method allows
             you to specify a ReadProgress Event Handler directly.  The stream is read
             using the default encoding (IBM437).  
             </para>
            
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile corresponding to the stream being read.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter)">
             <summary>
             Reads a zip archive from a stream, using the specified TextWriter for status
             messages.
             </summary>
             
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
             
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is
             the <c>IBM437</c> codepage.  For more information on the encoding, see the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.
             </para>
             
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
            
             </remarks>
             
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if zipStream is <c>null</c> (<c>Nothing</c> in VB).
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified TextWriter for status
             messages, and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             The stream is read using the default <c>System.Text.Encoding</c>, which is
             the <c>IBM437</c> codepage.  For more information on the encoding, see the
             <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/> property.
             </para>
             
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified encoding.
             </summary>
             
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from 
             an already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed. 
             </para>
            
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if zipStream is <c>null</c> (<c>Nothing</c> in VB).
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.Text.Encoding,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified encoding, and
             and the specified ReadProgress event handler.
             </summary>
             
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
             
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding and the 
             specified TextWriter for status messages.
             </summary>
            
             <remarks>
             <para>
             This method is useful when when the zip archive content is available from an
             already-open stream. The stream must be open and readable when calling this
             method.  The stream is left open when the reading is completed.
             </para>
            
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
            
             </remarks>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.ZipException">
             Thrown if zipStream is <c>null</c> (<c>Nothing</c> in VB).
             In this case, the inner exception is an ArgumentException.
             </exception>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler{ArtOfTest.WebAii.Zip.Zip.ReadProgressEventArgs})">
             <summary>
             Reads a zip archive from a stream, using the specified text Encoding, the 
             specified TextWriter for status messages, 
             and the specified ReadProgress event handler.
             </summary>
            
             <remarks>
             <para>
             Reading of zip content begins at the current position in the stream.  This
             means if you have a stream that concatenates regular data and zip data, if
             you position the open, readable stream at the start of the zip data, you
             will be able to read the zip archive using this constructor, or any of the
             ZipFile constructors that accept a <see cref="T:System.IO.Stream" /> as
             input. Some examples of where this might be useful: the zip content is
             concatenated at the end of a regular EXE file, as some self-extracting
             archives do.  (Note: SFX files produced by DotNetZip do not work this
             way). Another example might be a stream being read from a database, where
             the zip content is embedded within an aggregate stream of data.
             </para>
             </remarks>
            
             <param name="zipStream">the stream containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
            
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <param name="readProgress">
             An event handler for Read operations.
             </param>
             
             <returns>an instance of ZipFile</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.Byte[])">
             <summary>
             Reads a zip archive from a byte array.
             </summary>
             
             <remarks>
             This is useful when the data for the zipfile is contained in a byte array, 
             for example, downloaded from an FTP server without being saved to a
             filesystem. 
             </remarks>
             
             <param name="buffer">
             The byte array containing the zip data.  
             (I don't know why, but sometimes the compiled helpfile (.chm) indicates a 2d 
             array when it is just one-dimensional.  This is a one-dimensional array.)
             </param>
             
             <returns>
             an instance of ZipFile. The name on the <c>ZipFile</c> will be <c>null</c>
             (<c>Nothing</c> in VB).
             </returns>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.IO.Stream)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.Byte[],System.IO.TextWriter)">
             <summary>
             Reads a zip archive from a byte array, using the given StatusMessageWriter.
             </summary>
             
             <remarks>
             <para>
             This method is useful when the data for the zipfile is contained in a byte
             array, for example when retrieving the data from a database or other
             non-filesystem store.  The default Text Encoding (IBM437) is used to read
             the zipfile data.
             </para>
             
             </remarks>
             
             <param name="buffer">the byte array containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
             
             <returns>
             an instance of ZipFile. The name is set to <c>null</c> (<c>Nothing</c> in VB).
             </returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Read(System.Byte[],System.IO.TextWriter,System.Text.Encoding)">
             <summary>
             Reads a zip archive from a byte array, using the given StatusMessageWriter and text Encoding.
             </summary>
             
             <remarks>
             <para>
             This method is useful when the data for the zipfile is contained in a byte
             array, for example when retrieving the data from a database or other
             non-filesystem store.
             </para>
             
             </remarks>
             
             <param name="buffer">the byte array containing the zip data.</param>
            
             <param name="statusMessageWriter">
             The <c>System.IO.TextWriter</c> to which verbose status messages are written
             during operations on the <c>ZipFile</c>.  For example, in a console
             application, System.Console.Out works, and will get a message for each entry
             added to the ZipFile.  If the TextWriter is <c>null</c>, no verbose messages
             are written.
             </param>
             
             <param name="encoding">
             The text encoding to use when reading entries that do not have the UTF-8
             encoding bit set.  Be careful specifying the encoding.  If the value you use
             here is not the same as the Encoding used when the zip archive was created
             (possibly by a different archiver) you will get unexpected results and
             possibly exceptions.  See the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.ProvisionalAlternateEncoding"/>
             property for more information.
             </param>
             
             <returns>
             an instance of ZipFile. The name is set to <c>null</c> (<c>Nothing</c> in VB).
             </returns>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.IsZipFile(System.String)">
            <summary>
            Checks the given file to see if it appears to be a valid zip file.
            </summary>
            <remarks>
            <para>
            Calling this method is equivalent to calling <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/> with the testExtract parameter set to false.
            </para>
            </remarks>
            
            <param name="fileName">The file to check.</param>
            <returns>true if the file appears to be a zip file.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.IsZipFile(System.String,System.Boolean)">
             <summary>
             Checks a file to see if it is a valid zip file.
             </summary>
            
             <remarks>
             <para>
             This method opens the specified zip file, reads in the zip archive,
             verifying the ZIP metadata as it reads.  Then, if testExtract is true, this
             method extracts each entry in the archive, dumping all the bits.
             </para>
             
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
             <param name="fileName">The zip file to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the file contains a valid zip file.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.IsZipFile(System.IO.Stream,System.Boolean)">
             <summary>
             Checks a stream to see if it contains a valid zip archive.
             </summary>
            
             <remarks>
             <para>
             This method reads the zip archive contained in the specified stream, verifying
             the ZIP metadata as it reads.  If testExtract is true, this method also extracts 
             each entry in the archive, dumping all the bits into <see cref="F:System.IO.Stream.Null"/>.
             </para>
             
             <para>
             If everything succeeds, then the method returns true.  If anything fails -
             for example if an incorrect signature or CRC is found, indicating a corrupt
             file, the the method returns false.  This method also returns false for a
             file that does not exist.
             </para>
            
             <para>
             If <c>testExtract</c> is true, this method reads in the content for each
             entry, expands it, and checks CRCs.  This provides an additional check
             beyond verifying the zip header data.
             </para>
            
             <para>
             If <c>testExtract</c> is true, and if any of the zip entries are protected
             with a password, this method will return false.  If you want to verify a
             ZipFile that has entries which are protected with a password, you will need
             to do that manually.
             </para>
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.IsZipFile(System.String,System.Boolean)"/>
            
             <param name="stream">The stream to check.</param>
             <param name="testExtract">true if the caller wants to extract each entry.</param>
             <returns>true if the stream contains a valid zip archive.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save">
             <summary>
             Saves the Zip archive to a file, specified by the Name property of the <c>ZipFile</c>. 
             </summary>
            
             <remarks>
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             <para> The <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipFile.Name"/> property is specified either
             explicitly, or implicitly using one of the parameterized ZipFile
             constructors.  For COM Automation clients, the <c>Name</c> property must be
             set explicitly, because COM Automation clients cannot call parameterized
             constructors.  </para>
            
             <para>
             When using a filesystem file for the Zip output, it is possible to call
             <c>Save</c> multiple times on the <c>ZipFile</c> instance. With each call the zip
             content is re-written to the same output file.
             </para>
            
             <para>
             Data for entries that have been added to the <c>ZipFile</c> instance is written
             to the output when the <c>Save</c> method is called. This means that the input
             streams for those entries must be available at the time the application calls
             <c>Save</c>.  If, for example, the application adds entries with <c>AddEntry</c>
             using a dynamically-allocated <c>MemoryStream</c>, the memory stream must not
             have been disposed before the call to <c>Save</c>. See the <see
             cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.InputStream"/> property for more discussion of the availability
             requirements of the input stream for an entry, and an approach for providing
             just-in-time stream lifecycle management.
             </para>
            
             </remarks>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddEntry(System.String,System.String,System.IO.Stream)"/>
            
             <exception cref="T:ArtOfTest.WebAii.Zip.Zip.BadStateException">
             Thrown if you haven't specified a location or stream for saving the zip,
             either in the constructor or by setting the Name property, or if you try to
             save a regular zip archive to a filename with a .exe extension.
             </exception>
            
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.String)">
             <summary>
             Save the file to a new zipfile, with the given name. 
             </summary>
             
             <remarks>
             <para>
             This method allows the application to explicitly specify the name of the zip
             file when saving. Use this when creating a new zip file, or when 
             updating a zip archive.  
             </para>
             
             <para>
             An application can also save a zip archive in several places by calling this
             method multiple times in succession, with different filenames.
             </para>
            
             <para>
             The <c>ZipFile</c> instance is written to storage, typically a zip file in a
             filesystem, only when the caller calls <c>Save</c>.  The Save operation writes
             the zip content to a temporary file, and then renames the temporary file
             to the desired name. If necessary, this method will delete a pre-existing file
             before the rename.
             </para>
            
             </remarks>
             
             <exception cref="T:System.ArgumentException">
             Thrown if you specify a directory for the filename.
             </exception>
            
             <param name="fileName">
             The name of the zip archive to save to. Existing files will 
             be overwritten with great prejudice.
             </param>
            
             <example>
             This example shows how to create and Save a zip file.
             <code>
             using (ZipFile zip = new ZipFile())
             {
               zip.AddDirectory(@"c:\reports\January");
               zip.Save("January.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As New ZipFile()
               zip.AddDirectory("c:\reports\January")
               zip.Save("January.zip")
             End Using
             </code>
            
             </example>
            
             <example>
             This example shows how to update a zip file.
             <code>
             using (ZipFile zip = ZipFile.Read("ExistingArchive.zip"))
             {
               zip.AddFile("NewData.csv");
               zip.Save("UpdatedArchive.zip");
             }
             </code>
            
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read("ExistingArchive.zip")
               zip.AddFile("NewData.csv")
               zip.Save("UpdatedArchive.zip")
             End Using
             </code>
            
             </example>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.Save(System.IO.Stream)">
             <summary>
             Save the zip archive to the specified stream.
             </summary>
             
             <remarks>
             <para>
             The <c>ZipFile</c> instance is written to storage - typically a zip file in a
             filesystem, but using this overload, the storage can eb anything accessible via
             a writable stream - only when the caller calls <c>Save</c>.
             </para>
            
             <para>
             Use this method to save the zip content to a stream directly.  A common
             scenario is an ASP.NET application that dynamically generates a zip file and
             allows the browser to download it. The application can call
             <c>Save(Response.OutputStream)</c> to write a zipfile directly to the output
             stream, without creating a zip file on the disk on the ASP.NET server.
             </para>
            
             </remarks>
             
             <param name="outputStream">
             The <c>System.IO.Stream</c> to write to. It must be writable.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)">
             <summary>
             Adds to the ZipFile a set of files from the disk that conform to the specified criteria.
             </summary>
             
             <remarks>
             <para>
             This method selects files from the the current working directory matching the specified
             criteria, and adds them to the ZipFile.  The selection does not recurse into
             subdirectories.
             </para>
            
             <para>
             Specify the criteria in statements of 3 elements: a noun, an operator, and a value.
             Consider the string "name != *.doc" .  The noun is "name".  The operator is "!=",
             implying "Not Equal".  The value is "*.doc".  That criterion, in English, says "all
             files with a name that does not end in the .doc extension."
             </para> 
            
             <para>
             Supported nouns include "name" for the filename; "atime", "mtime", and "ctime" for
             last access time, last modfied time, and created time of the file, respectively;
             "attributes" for the file attributes; and "size" for the file length (uncompressed).
             The "attributes" and "name" nouns both support = and != as operators.  The "size",
             "atime", "mtime", and "ctime" nouns support = and !=, and &gt;, &gt;=, &lt;, &lt;=
             as well. The times are taken to be expressed in "local time". 
             </para> 
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A in any order, implying Hidden, ReadOnly, System, and Archive,
             respectively.  To specify a time, use YYYY-MM-DD-HH:mm:ss as the format.  If you
             omit the HH:mm:ss portion, it is assumed to be 00:00:00 (midnight). The value for a
             size criterion is expressed in integer quantities of bytes, kilobytes (use k or kb
             after the number), megabytes (m or mb), or gigabytes (g or gb).  The value for a
             name is a pattern to match against the filename, potentially including wildcards.
             The pattern follows CMD.exe glob rules: * implies one or more of any character,
             while ? implies one character.  If the name pattern contains any slashes, it is
             matched to the entire filename, including the path; otherwise, it is matched
             against only the filename without the path.  This means a pattern of "*\*.*" matches 
             all files one directory level deep, while a pattern of "*.*" matches all files in 
             all directories.  
             </para> 
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the pattern.
             A pattern of "'* *.*'" will match all files that have spaces in the filename.  The full 
             criteria string for that would be "name = '* *.*'" . 
             </para> 
            
             <para>
             Some examples: a string like "attributes != H" retrieves all entries whose
             attributes do not include the Hidden bit.  A string like "mtime > 2009-01-01"
             retrieves all entries with a last modified time after January 1st, 2009.  For
             example "size &gt; 2gb" retrieves all entries whose uncompressed size is greater
             than 2gb.
             </para> 
            
             <para>
             You can combine criteria with the conjunctions AND or OR. Using a string like "name
             = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves entries whose names
             end in  .txt, and whose uncompressed size is greater than or equal to
             100 kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group clauses
             in the boolean logic.  Without parenthesis, the precedence of the criterion atoms is
             determined by order of appearance.  Unlike the C# language, the AND conjunction does
             not take precendence over the logical OR.  This is important only in strings that
             contain 3 or more criterion atoms.  In other words, "name = *.txt and size &gt; 1000
             or attributes = H" implies "((name = *.txt AND size &gt; 1000) OR attributes = H)"
             while "attributes = H OR name = *.txt and size &gt; 1000" evaluates to "((attributes
             = H OR name = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all entries
             that were last updated on 2009 February 14, specify a time range like so:"mtime
             &gt;= 2009-02-14 AND mtime &lt; 2009-02-15".  Read this to say: all files updated
             after 12:00am on February 14th, until 12:00am on February 15th.  You can use the
             same bracketing approach to specify any time period - a year, a month, a week, and
             so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is
             treated as a pattern to match for the filename.  Therefore a string like "*.xls"
             will be equivalent to specifying "name = *.xls".
             </para>
             
             <para>
             There is no logic in this method that insures that the file inclusion criteria are
             internally consistent.  For example, it's possible to specify criteria that says
             the file must have a size of less than 100 bytes, as well as a size that is
             greater than 1000 bytes. Obviously no file will ever satisfy such criteria, but
             this method does not detect such logical inconsistencies. The caller is
             responsible for insuring the criteria are sensible.
             </para>
             
             </remarks>
             
             <example>
             This example zips up all *.csv files in the current working directory. 
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // To just match on filename wildcards,
                 // use the shorthand form of the selectionCriteria string.
                 zip.AddSelectedFiles("*.csv");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 zip.AddSelectedFiles("*.csv")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for file selection</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.Boolean)">
             <summary>
             Adds to the ZipFile a set of files from the disk that conform to the specified criteria.
             </summary>
             
             <remarks>
             <para>
             This method selects files from the the current working directory matching the specified
             criteria, and adds them to the ZipFile.  If <c>recurseDirectories</c> is true, files are also 
             selected from subdirectories, and the directory structure in the filesystem is reproduced 
             in the zip archive, rooted at the directory specified by <c>directoryOnDisk</c>.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             </remarks>
            
             <example>
             This example zips up all *.xml files in the current working directory, or any 
             subdirectory, that are larger than 1mb.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
             
             <param name="selectionCriteria">The criteria for file selection</param>
             
             <param name="recurseDirectories">
             If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)">
            <summary>
            Adds to the ZipFile a set of files from the disk that conform to the specified criteria.
            </summary>
            
            <remarks>
            This method selects files from the the specified disk directory matching the specified
            criteria, and adds them to the ZipFile.  The search does not recurse into
            subdirectores.  For details on the syntax for the selectionCriteria parameter, see <see
            cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
            </remarks>
            
            <example>
            This example zips up all *.xml files larger than 1mb in the directory given by "d:\rawdata".
            <code>
            using (ZipFile zip = new ZipFile())
            {
                // Use a compound expression in the selectionCriteria string.
                zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\\rawdata");
                zip.Save(PathToZipArchive);
            }
            </code>
            <code lang="VB">
            Using zip As ZipFile = New ZipFile()
                ' Use a compound expression in the selectionCriteria string.
                zip.AddSelectedFiles("name = *.xml  and  size > 1024kb", "d:\rawdata)
                zip.Save(PathToZipArchive)
            End Using
            </code>
            </example>
            
            <param name="selectionCriteria">The criteria for file selection</param>
            
            <param name="directoryOnDisk">
            The name of the directory on the disk from which to select files.
            </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.Boolean)">
             <summary>
             Adds to the ZipFile a set of files from the disk that conform to the specified criteria.
             </summary>
             
             <remarks>
             This method selects files from the the specified disk directory matching the specified
             selection criteria, and adds them to the ZipFile.  If <c>recurseDirectories</c> is true,
             files are also selected from subdirectories, and the directory structure in the
             filesystem is reproduced in the zip archive, rooted at the directory specified by
             <c>directoryOnDisk</c>. For details on the syntax for the selectionCriteria parameter,
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </remarks>
             
             <example>
             This example zips up all *.csv files in the "files" directory, or any subdirectory, that
             have been saved since 2009 February 14th.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile()
                 ' Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.csv  and  mtime > 2009-02-14", "files", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
             
             <param name="selectionCriteria">The criteria for file selection</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
             
             <param name="recurseDirectories">
             If true, the file selection will recurse into subdirectories.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String)">
             <summary>
             Adds to the ZipFile a selection of files from the disk that conform to the
             specified criteria.
             </summary>
             
             <remarks>
             This method selects files from the specified disk directory matching the specified
             selection criteria, and adds those files to the ZipFile, using the specified directory
             path in the archive.  The search does not recurse into subdirectories.  For details on
             the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
             
             <example>
             This example zips up all *.psd files in the "photos" directory that have been saved
             since 2009 February 14th, and puts them all in a zip file, using the directory name of
             "content" in the zip archive itself. When the zip archive is unzipped, the folder
             containing the .psd files will be named "content".
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 // Use a compound expression in the selectionCriteria string.
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content");
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name = *.psd  and  mtime > 2009-02-14", "photos", "content")
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
             
             <param name="selectionCriteria">The criteria for selection of files to Add</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
            
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the FileName.  This path may,
             or may not, correspond to a real directory in the current filesystem.  If the files
             within the zip are later extracted, this is the path used for the extracted file.
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Adds to the ZipFile a selection of files from the disk that conform to the specified criteria.
             </summary>
             
             <remarks>
             This method selects files from the specified disk directory that match the specified
             selection criteria, and adds those files to the ZipFile, using the specified directory
             path in the archive. If <c>recurseDirectories</c> is true, files are also selected from
             subdirectories, and the directory structure in the filesystem is reproduced in the zip
             archive, rooted at the directory specified by <c>directoryOnDisk</c>.  For details on the
             syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
             
             <example>
             This example zips up all files that are NOT *.pst files, in the current working 
             directory and any subdirectories.
             <code>
             using (ZipFile zip = new ZipFile())
             {
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true);
                 zip.Save(PathToZipArchive);
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = New ZipFile
                 zip.AddSelectedFiles("name != *.pst", SourceDirectory, "backup", true)
                 zip.Save(PathToZipArchive)
             End Using
             </code>
             </example>
            
             <param name="selectionCriteria">The criteria for selection of files to Add</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
             
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the FileName.  This path may,
             or may not, correspond to a real directory in the current filesystem.  If the files
             within the zip are later extracted, this is the path used for the extracted file.
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
            
             <param name="recurseDirectories">
             If true, the method also scans subdirectories for files matching the criteria.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.UpdateSelectedFiles(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Updates the ZipFile with a selection of files from the disk that conform to
             the specified criteria.
             </summary>
             
             <remarks>
             This method selects files from the specified disk directory that match the
             specified selection criteria, and Updates the <c>ZipFile</c> with those
             files, using the specified directory path in the archive. If
             <c>recurseDirectories</c> is true, files are also selected from
             subdirectories, and the directory structure in the filesystem is reproduced
             in the zip archive, rooted at the directory specified by
             <c>directoryOnDisk</c>.  For details on the syntax for the selectionCriteria
             parameter, see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </remarks>
            
             <param name="selectionCriteria">The criteria for selection of files to Add</param>
            
             <param name="directoryOnDisk">
             The name of the directory on the disk from which to select files.
             </param>
             
             <param name="directoryPathInArchive">
             Specifies a directory path to use to override any path in the FileName.  This path may,
             or may not, correspond to a real directory in the current filesystem.  If the files
             within the zip are later extracted, this is the path used for the extracted file.
             Passing null (nothing in VB) will use the path on the FileName, if any.  Passing the
             empty string ("") will insert the item at the root path within the archive.
             </param>
            
             <param name="recurseDirectories">
             If true, the method also scans subdirectories for files matching the criteria.
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.SelectEntries(System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
             
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
             
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
             
             <example>
             This example selects all the PhotoShop files from within an archive, and extracts them
             to the current working directory.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var PhotoShopFiles = zip1.SelectEntries("*.psd");
                 foreach (ZipEntry psd in PhotoShopFiles)
                 {
                     psd.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim PhotoShopFiles as ICollection(Of ZipEntry)
                 PhotoShopFiles = zip1.SelectEntries("*.psd")
                 Dim psd As ZipEntry
                 For Each psd In PhotoShopFiles
                     psd.Extract
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.SelectEntries(System.String,System.String)">
             <summary>
             Retrieve entries from the zipfile by specified criteria.
             </summary>
             
             <remarks>
             <para>
             This method allows callers to retrieve the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
             
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
             
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 var UpdatedPhotoShopFiles = zip1.SelectEntries("*.psd", "UpdatedFiles");
                 foreach (ZipEntry e in UpdatedPhotoShopFiles)
                 {
                     // prompt for extract here
                     if (WantExtract(e.FileName))
                         e.Extract();
                 }
             }
             </code>
             <code lang="VB">
             Using zip1 As ZipFile = ZipFile.Read(ZipFileName)
                 Dim UpdatedPhotoShopFiles As ICollection(Of ZipEntry) = zip1.SelectEntries("*.psd", "UpdatedFiles")
                 Dim e As ZipEntry
                 For Each e In UpdatedPhotoShopFiles
                     ' prompt for extract here
                     If Me.WantExtract(e.FileName) Then
                         e.Extract
                     End If
                 Next
             End Using
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
             
             <returns>a collection of ZipEntry objects that conform to the inclusion spec</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveSelectedEntries(System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria.
             </summary>
             
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
             
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
             
             <example>
             This example removes all entries in a zip file that were modified prior to January 1st, 2008.
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01");
                 // don't forget to save the archive!
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01")
                 ' do not forget to save the archive!
                 zip1.Save
             End Using 
             </code>
             </example>
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.RemoveSelectedEntries(System.String,System.String)">
             <summary>
             Remove entries from the zipfile by specified criteria, and within the specified 
             path in the archive.
             </summary>
             
             <remarks>
             <para>
             This method allows callers to remove the collection of entries from the zipfile
             that fit the specified criteria.  The criteria are described in a string format, and
             can include patterns for the filename; constraints on the size of the entry;
             constraints on the last modified, created, or last accessed time for the file
             described by the entry; or the attributes of the entry.
             </para>
            
             <para>
             For details on the syntax for the selectionCriteria parameter, see <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)"/>.
             </para>
             
             <para>
             This method is intended for use with a ZipFile that has been read from storage.
             When creating a new ZipFile, this method will work only after the ZipArchive has
             been Saved to the disk (the ZipFile class subsequently and implicitly reads the Zip
             archive from storage.)  Calling SelectEntries on a ZipFile that has not yet been
             saved will deliver undefined results.
             </para>
             </remarks>
             
             <exception cref="T:System.Exception">
             Thrown if selectionCriteria has an invalid syntax.
             </exception>
             
             <example>
             <code>
             using (ZipFile zip1 = ZipFile.Read(ZipFileName))
             {
                 // remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents");
                 // a call to ZipFile.Save will make the modifications permanent
                 zip1.Save();
             }
             </code>
             <code lang="VB">
             Using zip As ZipFile = ZipFile.Read(ZipFileName)
                 ' remove all entries from prior to Jan 1, 2008
                 zip1.RemoveEntries("mtime &lt; 2008-01-01", "documents")
                 ' a call to ZipFile.Save will make the modifications permanent
                 zip1.Save
             End Using 
             </code>
             </example>
             
             <param name="selectionCriteria">the string that specifies which entries to select</param>
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
             <returns>the number of entries removed</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory. 
             </para>
             
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
             
             <para>
             For information on the syntax of the selectionCriteria string,
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para>
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009. 
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15");
             }
             </code>
             </example>
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the current working directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             extractExistingFile parameter.
             </para>
             
             <para>
             For information on the syntax of the string describing the entry selection criteria, 
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para> 
             </remarks>
            
             <example>
             This example shows how extract all XML files modified after 15 January 2009, 
             overwriting any existing files. 
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15",
                                          ExtractExistingFileAction.OverwriteSilently);
             }
             </code>
             </example>
             
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are selected from the specified directory within the archive, and then 
             extracted into the current working directory. 
             </para>
             
             <para>
             If any of the files to be extracted already exist, then the action taken is as
             specified in the <see cref="P:ArtOfTest.WebAii.Zip.Zip.ZipEntry.ExtractExistingFile"/> property on the
             corresponding ZipEntry instance.  By default, the action taken in this case is to
             throw an exception.
             </para>
             
             <para>
             For information on the syntax of the string describing the entry selection criteria, 
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para> 
             </remarks>
             
             <example>
             This example shows how extract all XML files modified after 15 January 2009, 
             and writes them to the "unpack" directory.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  and  mtime &gt; 2009-01-15","unpack");
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
            
             <seealso cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)"/>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. If any of the files to be
             extracted already exist, an exception will be thrown.
             </para>
             <para>
             For information on the syntax of the string describing the entry selection criteria, 
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para> 
             </remarks>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="directoryInArchive">
             the directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
             
             <param name="extractDirectory">
             the directory on the disk into which to extract. It will be created 
             if it does not exist.
             </param>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.ExtractSelectedEntries(System.String,System.String,System.String,ArtOfTest.WebAii.Zip.Zip.ExtractExistingFileAction)">
             <summary>
             Selects and Extracts a set of Entries from the ZipFile.
             </summary>
            
             <remarks>
             <para>
             The entries are extracted into the specified directory. When extraction would would
             overwrite an existing filesystem file, the action taken is as specified in the
             extractExistingFile parameter.
             </para>
             
             <para>
             For information on the syntax of the string describing the entry selection criteria, 
             see <see cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String)" />.
             </para> 
             </remarks>
            
             <example>
             This example shows how extract all files  with an XML extension or with  a size larger than 100,000 bytes, 
             and puts them in the unpack directory.  For any files that already exist in 
             that destination directory, they will not be overwritten.
             <code>
             using (ZipFile zip = ZipFile.Read(zipArchiveName))
             {
               zip.ExtractSelectedEntries("name = *.xml  or  size  &gt; 100000",
                                          null, 
                                          "unpack", 
                                          ExtractExistingFileAction.DontOverwrite);
             }
             </code>
             </example>
            
             <param name="selectionCriteria">the selection criteria for entries to extract.</param>
            
             <param name="extractDirectory">
             The directory on the disk into which to extract. It will be created if it does not exist.
             </param>
             
             <param name="directoryPathInArchive">
             The directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
             
             <param name="extractExistingFile">
             The action to take if extraction would overwrite an existing file.
             </param>
             
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.GetEnumerator">
             <summary>
             Generic IEnumerator support, for use of a ZipFile in an enumeration.  
             </summary>
            
             <remarks>
             You probably do not want to call <c>GetEnumerator</c> explicitly. Instead 
             it is implicitly called when you use a <see langword="foreach"/> loop in C#, or a 
             <c>For Each</c> loop in VB.NET.
             </remarks>
            
             <example>
             This example reads a zipfile of a given name, then enumerates the 
             entries in that zip file, and displays the information about each 
             entry on the Console.
             <code>
             using (ZipFile zip = ZipFile.Read(zipfile))
             {
               bool header = true;
               foreach (ZipEntry e in zip)
               {
                 if (header)
                 {
                    System.Console.WriteLine("Zipfile: {0}", zip.Name);
                    System.Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded);
                    System.Console.WriteLine("BitField: 0x{0:X2}", e.BitField);
                    System.Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod);
                    System.Console.WriteLine("\n{1,-22} {2,-6} {3,4}   {4,-8}  {0}",
                                 "Filename", "Modified", "Size", "Ratio", "Packed");
                    System.Console.WriteLine(new System.String('-', 72));
                    header = false;
                 }
            
                 System.Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}",
                             e.FileName,
                             e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"),
                             e.UncompressedSize,
                             e.CompressionRatio,
                             e.CompressedSize);
            
                 e.Extract();
               }
             }
             </code>
            
             <code lang="VB">
               Dim ZipFileToExtract As String = "c:\foo.zip"
               Using zip As ZipFile = ZipFile.Read(ZipFileToExtract)
                   Dim header As Boolean = True
                   Dim e As ZipEntry
                   For Each e In zip
                       If header Then
                           Console.WriteLine("Zipfile: {0}", zip.Name)
                           Console.WriteLine("Version Needed: 0x{0:X2}", e.VersionNeeded)
                           Console.WriteLine("BitField: 0x{0:X2}", e.BitField)
                           Console.WriteLine("Compression Method: 0x{0:X2}", e.CompressionMethod)
                           Console.WriteLine(ChrW(10) &amp; "{1,-22} {2,-6} {3,4}   {4,-8}  {0}", _
                             "Filename", "Modified", "Size", "Ratio", "Packed" )
                           Console.WriteLine(New String("-"c, 72))
                           header = False
                       End If
                       Console.WriteLine("{1,-22} {2,-6} {3,4:F0}%   {4,-8}  {0}", _
                         e.FileName, _
                         e.LastModified.ToString("yyyy-MM-dd HH:mm:ss"), _
                         e.UncompressedSize, _
                         e.CompressionRatio, _
                         e.CompressedSize )
                       e.Extract
                   Next
               End Using
             </code>
             </example>
             
             <returns>A generic enumerator suitable for use  within a foreach loop.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.GetNewEnum">
             <summary>
             IEnumerator support, for use of a ZipFile in a foreach construct.  
             </summary>
            
             <remarks>
             This method is included for COM support.  An application generally does not call
             this method directly.  It is called implicitly by COM clients when enumerating
             the entries in the ZipFile instance.  In VBScript, this is done with a <c>For Each</c>
             statement.  In Javascript, this is done with <c>new Enumerator(zipfile)</c>.
             </remarks>
            
             <returns>
             The IEnumerator over the entries in the ZipFile. 
             </returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.Zip.Zip64Option">
            <summary>
            Options for using ZIP64 extensions when saving zip archives. 
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Default">
            <summary>
            The default behavior, which is "Never".
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            (For COM clients, this is a 0 (zero).)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary. 
            For example, when a single entry exceeds 0xFFFFFFFF in size, or when the archive as a whole 
            exceeds 0xFFFFFFFF in size, or when there are more than 65535 entries in an archive.
            (For COM clients, this is a 1.)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Zip.Zip.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            (For COM clients, this is a 2.)
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.LogicalConjunction">
            <summary>
            Enumerates the options for a logical conjunction. This enum is intended for use 
            internally by the FileSelector class.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.FileSelector">
             <summary>
             FileSelector encapsulates logic that selects files from a source
             - a zip file or the filesystem - based on a set of criteria.  This class is used 
             internally by the DotNetZip library, but you may also find utility in using it 
             externally. 
             </summary>
             <remarks>
            
             <para>
             Typically, an application that creates or manipulates Zip archives will not directly
             interact with the FileSelector class.  The FileSelector class is used internally by the
             ZipFile class for selecting files for inclusion into the ZipFile, when the <see
             cref="M:ArtOfTest.WebAii.Zip.Zip.ZipFile.AddSelectedFiles(System.String,System.String)"/> method is called.
             </para>
            
             <para>
             But, some applications may wish to use the FileSelector class directly, to select
             files from disk volumes based on a set of criteria, without creating or querying Zip
             archives.  The file selection criteria include: a pattern to match the filename; the
             last modified, created, or last accessed time of the file; the size of the file; and
             the attributes of the file.
             </para>
             </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.#ctor(System.String)">
            <summary>
            Constructor that allows the caller to specify file selection criteria.
            </summary>
            
            <remarks>
            <para>
            This constructor allows the caller to specify a set of criteria for selection of files.
            </para>
            
            <para>
            See <see cref="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria"/> for a description of the syntax of 
            the selectionCriteria string.
            </para>
            </remarks>
            
            <param name="selectionCriteria">The criteria for file selection.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria">
             <summary>
             The string specifying which files to include when retrieving.
             </summary>
             <remarks>
                     
             <para>
             Specify the criteria in statements of 3 elements: a noun, an operator, and a value.
             Consider the string "name != *.doc" .  The noun is "name".  The operator is "!=",
             implying "Not Equal".  The value is "*.doc".  That criterion, in English, says "all
             files with a name that does not end in the .doc extension."
             </para> 
            
             <para>
             Supported nouns include "name" for the filename; "atime", "mtime", and "ctime" for
             last access time, last modfied time, and created time of the file, respectively;
             "attributes" for the file attributes; and "size" for the file length (uncompressed).
             The "attributes" and "name" nouns both support = and != as operators.  The "size",
             "atime", "mtime", and "ctime" nouns support = and !=, and &gt;, &gt;=, &lt;, &lt;=
             as well.
             </para> 
            
             <para>
             Specify values for the file attributes as a string with one or more of the
             characters H,R,S,A,I in any order, implying Hidden, ReadOnly, System, Archive,
             and NotContextIndexed, 
             respectively.  To specify a time, use YYYY-MM-DD-HH:mm:ss as the format.  If you
             omit the HH:mm:ss portion, it is assumed to be 00:00:00 (midnight). The value for a
             size criterion is expressed in integer quantities of bytes, kilobytes (use k or kb
             after the number), megabytes (m or mb), or gigabytes (g or gb).  The value for a
             name is a pattern to match against the filename, potentially including wildcards.
             The pattern follows CMD.exe glob rules: * implies one or more of any character,
             while ? implies one character.  If the name pattern contains any slashes, it is
             matched to the entire filename, including the path; otherwise, it is matched
             against only the filename without the path.  This means a pattern of "*\*.*" matches 
             all files one directory level deep, while a pattern of "*.*" matches all files in 
             all directories.    
             </para> 
            
             <para>
             To specify a name pattern that includes spaces, use single quotes around the pattern.
             A pattern of "'* *.*'" will match all files that have spaces in the filename.  The full 
             criteria string for that would be "name = '* *.*'" . 
             </para> 
            
             <para>
             Some examples: a string like "attributes != H" retrieves all entries whose
             attributes do not include the Hidden bit.  A string like "mtime > 2009-01-01"
             retrieves all entries with a last modified time after January 1st, 2009.  For
             example "size &gt; 2gb" retrieves all entries whose uncompressed size is greater
             than 2gb.
             </para> 
            
             <para>
             You can combine criteria with the conjunctions AND, OR, and XOR. Using a string like
             "name = *.txt AND size &gt;= 100k" for the selectionCriteria retrieves entries whose
             names end in .txt, and whose uncompressed size is greater than or equal to 100
             kilobytes.
             </para>
            
             <para>
             For more complex combinations of criteria, you can use parenthesis to group clauses
             in the boolean logic.  Absent parenthesis, the precedence of the criterion atoms is
             determined by order of appearance.  Unlike the C# language, the AND conjunction does
             not take precendence over the logical OR.  This is important only in strings that
             contain 3 or more criterion atoms.  In other words, "name = *.txt and size &gt; 1000
             or attributes = H" implies "((name = *.txt AND size &gt; 1000) OR attributes = H)"
             while "attributes = H OR name = *.txt and size &gt; 1000" evaluates to "((attributes
             = H OR name = *.txt) AND size &gt; 1000)".  When in doubt, use parenthesis.
             </para>
            
             <para>
             Using time properties requires some extra care. If you want to retrieve all entries
             that were last updated on 2009 February 14, specify "mtime &gt;= 2009-02-14 AND
             mtime &lt; 2009-02-15".  Read this to say: all files updated after 12:00am on
             February 14th, until 12:00am on February 15th.  You can use the same bracketing
             approach to specify any time period - a year, a month, a week, and so on.
             </para>
            
             <para>
             The syntax allows one special case: if you provide a string with no spaces, it is treated as
             a pattern to match for the filename.  Therefore a string like "*.xls" will be equivalent to 
             specifying "name = *.xls".  
             </para>
             
             <para>
             There is no logic in this class that insures that the inclusion criteria
             are internally consistent.  For example, it's possible to specify criteria that
             says the file must have a size of less than 100 bytes, as well as a size that
             is greater than 1000 bytes.  Obviously no file will ever satisfy such criteria,
             but this class does not check and find such inconsistencies.
             </para>
             
             </remarks>
            
             <exception cref="T:System.Exception">
             Thrown in the setter if the value has an invalid syntax.
             </exception>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.ToString">
            <summary>
            Returns a string representation of the FileSelector object.
            </summary>
            <returns>The string representation of the boolean logic statement of the file
            selection criteria for this instance. </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.SelectFiles(System.String)">
             <summary>
             Returns the names of the files in the specified directory
             that fit the selection criteria specified in the FileSelector.
             </summary>
            
             <remarks>
             This is equivalent to calling <see cref="M:ArtOfTest.WebAii.Zip.FileSelector.SelectFiles(System.String,System.Boolean)"/> 
             with recurseDirectories = false.
             </remarks>
            
             <param name="directory">
             The name of the directory over which to apply the FileSelector criteria.
             </param>
            
             <returns>
             A collection of strings containing fully-qualified pathnames of files
             that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.SelectFiles(System.String,System.Boolean)">
             <summary>
             Returns the names of the files in the specified directory that fit the selection
             criteria specified in the FileSelector, optionally recursing through subdirectories.
             </summary>
            
             <remarks>
             This method applies the file selection criteria contained in the FileSelector to the 
             files contained in the given directory, and returns the names of files that 
             conform to the criteria. 
             </remarks>
            
             <param name="directory">
             The name of the directory over which to apply the FileSelector criteria.
             </param>
            
             <param name="recurseDirectories">
             Whether to recurse through subdirectories when applying the file selection criteria.
             </param>
            
             <returns>
             An collection of strings containing fully-qualified pathnames of files
             that match the criteria specified in the FileSelector instance.
             </returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.SelectEntries(ArtOfTest.WebAii.Zip.Zip.ZipFile)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
             
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used 
             by the ZipFile class.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.FileSelector.SelectEntries(ArtOfTest.WebAii.Zip.Zip.ZipFile,System.String)">
             <summary>
             Retrieve the ZipEntry items in the ZipFile that conform to the specified criteria.
             </summary>
             <remarks>
             
             <para>
             This method applies the criteria set in the FileSelector instance (as described in
             the <see cref="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria"/>) to the specified ZipFile.  Using this
             method, for example, you can retrieve all entries from the given ZipFile that
             have filenames ending in .txt.
             </para>
            
             <para>
             Normally, applications would not call this method directly.  This method is used 
             by the ZipFile class.
             </para>
            
             <para>
             This overload allows the selection of ZipEntry instances from the ZipFile to be restricted 
             to entries contained within a particular directory in the ZipFile.
             </para>
            
             <para>
             Using the appropriate SelectionCriteria, you can retrieve entries based on size,
             time, and attributes. See <see cref="P:ArtOfTest.WebAii.Zip.FileSelector.SelectionCriteria"/> for a
             description of the syntax of the SelectionCriteria string.
             </para>
            
             </remarks>
            
             <param name="zip">The ZipFile from which to retrieve entries.</param>
            
             <param name="directoryPathInArchive">
             the directory in the archive from which to select entries. If null, then 
             all directories in the archive are used. 
             </param>
             
             <returns>a collection of ZipEntry objects that conform to the criteria.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Zip.EnumUtil">
            <summary>
            Summary description for EnumUtil.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.EnumUtil.GetDescription(System.Enum)">
            <summary>
            Returns the value of the DescriptionAttribute if the specified Enum value has one.
            If not, returns the ToString() representation of the Enum value.
            </summary>
            <param name="value">The Enum to get the description for.</param>
            <returns>The description for the enum value.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.EnumUtil.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more 
            enumerated constants to an equivalent enumerated object.
            Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">A string containing the name or value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Zip.EnumUtil.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more 
            enumerated constants to an equivalent enumerated object.
            A parameter specified whether the operation is case-sensitive.
            Note: use the DescriptionAttribute on enum values to enable this.
            </summary>
            <param name="enumType">The System.Type of the enumeration.</param>
            <param name="stringRepresentation">A string containing the name or value to convert.</param>
            <param name="ignoreCase">Whether the operation is case-sensitive or not.</param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Synchronization.Wait">
            <summary>
            Provide wait functionality for an Element object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Synchronization.Wait._element">
            <summary>
            The element.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Synchronization.Wait._timeout">
            <summary>
            The global timeout.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Synchronization.Wait._syncWait">
            <summary>
            Sync wait object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.#ctor(ArtOfTest.WebAii.ObjectModel.Element,System.Int32)">
            <summary>
            Create a new Wait object.
            </summary>
            <param name="element">The element to associate with the wait object.</param>
            <param name="checkInterval">The interval to use to check the wait condition. (msec)</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Synchronization.Wait.Timeout">
            <summary>
            Gets/Sets the timeout for all Wait.Forxx methods. Default=Settings.ExecuteCommandTimeout
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForExists">
            <summary>
            Wait for this element to exist in the DOM.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForExists(System.Int32)">
            <summary>
            Wait for this element to exist in the DOM.
            </summary>
            <param name="timeout">Wait timeout.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForExists(System.Int32,System.Boolean)">
            <summary>
            Wait for an element and decide on whether to refresh the element.
            </summary>
            <param name="timeout"></param>
            <param name="refreshElement"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForExistsNot">
            <summary>
            Wait for this element not to exist in the DOM
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForExistsNot(System.Int32)">
            <summary>
            Wait for this element not to exist in the DOM.
            </summary>
            <param name="timeout">Wait timeout</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForAttributes(System.String[])">
            <summary>
            Wait for a set of attributes on this element. (Timeout = Wait.Timeout)
            </summary>
            <example>Wait.ForAttribute("src=~foo.png","foo=bar")</example>
            <param name="attributesNameValuePairs">The attributes name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForAttributes(System.Int32,System.String[])">
            <summary>
            Wait for a set of attributes on this element. 
            </summary>
            <example>Wait.ForAttribute("src=~foo.png","foo=bar")</example>
            <param name="attributesNameValuePairs">The attribute name/value pairs</param>
            <param name="timeout">Wait timeout in milliseconds.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForAttributesNot(System.String[])">
            <summary>
            Wait for a set of attributes to no longer be true. (Timeout = Wait.Timeout)
            </summary>
            <param name="attributeNameValuePairs">The attributes name/value pairs</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForAttributesNot(System.Int32,System.String[])">
            <summary>
            Wait for a set of attributes to no longer be true.
            </summary>
            <param name="attributeNameValuePairs">The attributes name/value pairs</param>
            <param name="timeout">Wait timeout in milliseconds.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForContent(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String)">
            <summary>
            Wait for certain content of this element to be true. (Timeout = Wait.Timeout)
            </summary>
            <param name="type">The content type to wait for.</param>
            <param name="value">The content values to wait for. Value can be (p:partialvalue,l:liternal,x:regex)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForContent(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String,System.Int32)">
            <summary>
            Wait for certain content of this element to be true.
            </summary>
            <param name="type">The content type to wait for.</param>
            <param name="value">The content values to wait for. Value can be (p:partialvalue,l:liternal,x:regex)</param>
            <param name="timeout">The time out to wait for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForContentNot(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String)">
            <summary>
            Wait for certain content of this element to no longer be true. (Timeout = Wait.Timeout)
            </summary>
            <param name="type">The content type to wait for.</param>
            <param name="value">The content values to wait for. Value can be (p:partialvalue,l:liternal,x:regex)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForContentNot(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String,System.Int32)">
            <summary>
            Wait for certain content of this element to no longer be true.
            </summary>
            <param name="type">The content type to wait for.</param>
            <param name="value">The content values to wait for. Value can be (p:partialvalue,l:liternal,x:regex)</param>
            <param name="timeout">The time out to wait for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.ForCondition(System.Func{ArtOfTest.WebAii.ObjectModel.Element,System.Object,System.Boolean},System.Boolean,System.Object,System.Int32)">
            <summary>
            Wait for a custom condition on this element.
            </summary>
            <param name="condition">The condition to wait for.</param>
            <param name="invertCondition">True/False whether to invert the condition or not.</param>
            <param name="custom">Any custom data to pass to this condition.</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.WaitForExistsCondition(ArtOfTest.WebAii.ObjectModel.Element,System.Object)">
            <summary>
            Wait for an element to exist on the page.
            </summary>
            <param name="element">The element to test.</param>
            <param name="custom">Not actually used at this level.</param>
            <returns>True/False</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.WaitForAttributesInternal(System.Boolean,System.Int32,System.String[])">
            <summary>
            Wait for attribute internal
            </summary>
            <param name="invertCondition"></param>
            <param name="timeout"></param>
            <param name="attributesNameValuePairs"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.WaitForContentInternal(ArtOfTest.WebAii.ObjectModel.FindContentType,System.String,System.Boolean,System.Int32)">
            <summary>
            Wait for content internal
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <param name="invertCondition"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.WaitForAttributesCondition(ArtOfTest.WebAii.ObjectModel.Element,System.Object)">
            <summary>
            Wait for attributes condition.
            </summary>
            <param name="element">The target element for this wait.</param>
            <param name="custom">Any custom data to pass to the condition.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Synchronization.Wait.WaitForContentCondition(ArtOfTest.WebAii.ObjectModel.Element,System.Object)">
            <summary>
            Wait for content condition.
            </summary>
            <param name="element">The target element for this wait.</param>
            <param name="custom">Any custom data to pass to the condition.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.TestAttributes.FindAttribute">
            <summary>
            The Find attribute may be set on classes or test methods to define a find expression that may be used later in your code to find that element.
            </summary>
            <example>
            <code lang="VB.NET">
            &lt;TestMethod(), Find("inputButton", "id=mySubmitButton")&gt; _
            Public Sub LoginTest()
            .
            .
            .
            </code>
            <code lang="C#">
            [TestMethod, Find("inputButton", "id=mySubmitButton")]
            public void LoginTest()
            {
            .
            .
            .
            </code>
            </example>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._targetType">
            <summary>
            Element's technology target type.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._parentAppKey">
            <summary>
            The parent application key for Silverlight elements.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._key">
            <summary>
            The FindParam object friendly name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._findClauses">
            <summary>
            The list of FindClauses
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._testRegionId">
            <summary>
            The TestRegion Id this FindParam belongs to.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._frameId">
            <summary>
            The frame id information.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._frameName">
            <summary>
            The frame name.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._frameSrc">
            <summary>
            The frame src.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindAttribute._frameIndex">
            <summary>
            The frame index. [This is WebAii's frame search index]
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.FindAttribute.#ctor">
            <summary>
            Create a new FindExpression attribute
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.FindAttribute.#ctor(System.String,System.String[])">
            <summary>
            Create a new FindParamAttribute.
            </summary>
            <param name="key">The friendly name of this element. You will use that name as the key in the 
            dictionary of found elements using Find.Elements[] collection</param>
            <param name="findClauses">The find expression clauses</param>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.Key">
            <summary>
            The friendly name to identify this FindParam and the element it will identify when using Find.All().
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.FindClauses">
            <summary>
            The actualy FindParam object corresponding to this attribute.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.TestRegionId">
            <summary>
            Gets or sets the TestRegion Id this FindParam belongs to.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.FrameId">
            <summary>
            Gets or sets the frame id for this findparam.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.FrameName">
            <summary>
            Gets or sets the frame name for this findparam.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.FrameIndex">
            <summary>
            Gets or sets the frame index
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.FrameSrc">
            <summary>
            Gets or sets the frame src value
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.TargetType">
            <summary>
            Gets or sets the technology type of the target element of this expression
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.ParentAppKey">
            <summary>
            Gets or sets the parent application key that defines the find expression for the Silverlight application that owns this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.DefinesTestRegion">
            <summary>
            Gets whether the FindParam defines a TestRegion
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindAttribute.DefinesFrame">
            <summary>
            Gets whether the FindParam defines a Frame.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestAttributes.DialogAttribute">
            <summary>
            A dialog attribute that can be set on a test method of a test class.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._dialog">
            <summary>
            The dialog to monitor.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._dismissButton">
            <summary>
            The button to use to dismiss the dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._filePath">
            <summary>
            The filepath for the fileupload dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._username">
            <summary>
            The username for the logon dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._password">
            <summary>
            The password for the logon dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.DialogAttribute._type">
            <summary>
            The dialog type.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.DialogAttribute.#ctor(ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create an AlertDialog.
            </summary>
            <param name="dismissButton">The dismiss button to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.DialogAttribute.#ctor(System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a FileUploadDialog
            </summary>
            <param name="filePath">The filepath to use.</param>
            <param name="dismissButton">The dismiss button to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.DialogAttribute.#ctor(System.String,System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a LogonDialog.
            </summary>
            <param name="userName">The username to use.</param>
            <param name="password">The password to use.</param>
            <param name="dismissButton">The dismiss button to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.DialogAttribute.#ctor(ArtOfTest.WebAii.Win32.Dialogs.IDialog)">
            <summary>
            Create a custom dialog.
            </summary>
            <param name="customDialog">The custom dialog</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.DialogAttribute.GetDialog(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Create a dialog object associated with the passed in parent browser.
            </summary>
            <param name="parentBrowser">Parent browser to monitor the dialog for.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.TestAttributes.FindParamAttribute">
            <summary>
            FindParam attribute used to be set on a test method or test class.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._key">
            <summary>
            The FindParam object friendly name
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._findParam">
            <summary>
            The actual FindParam object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._testRegionId">
            <summary>
            The TestRegion Id this FindParam belongs to.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._fileName">
            <summary>
            The FileName of this param object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._frameId">
            <summary>
            The frame id information.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._frameName">
            <summary>
            The frame name.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._frameSrc">
            <summary>
            The frame src.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestAttributes.FindParamAttribute._frameIndex">
            <summary>
            The frame index. [This is WebAii's frame search index]
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.#ctor(System.String,ArtOfTest.WebAii.ObjectModel.FindType,System.String)">
            <summary>
            Create a new FindParamAttribute.
            </summary>
            <param name="key">The friendly name of this FindParam. You will use that name as the key in the 
            dictionary of found elements using Find.Elements[] collection</param>
            <param name="type">The type of the FindParam.</param>
            <param name="value">The value of the FindParam./></param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.#ctor(System.String,ArtOfTest.WebAii.ObjectModel.FindType,System.String,System.String[])">
            <summary>
            Create a new FindParamAttribute.
            </summary>
            <param name="key">The friendly name of this FindParam. You will use that name as the key in the 
            dictionary of found elements using Find.Elements[] collection</param>
            <param name="type">The type of the FindParam.</param>
            <param name="value">The value of the FindParam./></param>
            <param name="attributes">The list of attributes to match.</param>
            <remarks>
            value can be set as (string.empty for FindType.AttributesOnly, "tagName:tagIndex" for FindType.TagIndex,
            "p/l/x:text or expression" for FindType.Content, "xpath" for FindType.XPath, "nodeindexpath" for FindType.NodeIndexPath
            
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.#ctor(System.String)">
            <summary>
            Create a new FindParamAttribute.
            </summary>
            <param name="fileName">The file name that contains the collection of FindParams.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.Key">
            <summary>
            The friendly name to identify this FindParam and the element it will identify when using Find.All().
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FindParam">
            <summary>
            The actualy FindParam object corresponding to this attribute.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FileName">
            <summary>
            The file name that contains the collection of FindParams.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.TestRegionId">
            <summary>
            Gets or sets the TestRegion Id this FindParam belongs to.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FrameId">
            <summary>
            Gets or sets the frame id for this findparam.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FrameName">
            <summary>
            Gets or sets the frame name for this findparam.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FrameIndex">
            <summary>
            Gets or sets the frame index
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.FrameSrc">
            <summary>
            Gets or sets the frame src value
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.DefinesTestRegion">
            <summary>
            Gets whether the FindParam defines a TestRegion
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestAttributes.FindParamAttribute.DefinesFrame">
            <summary>
            Gets whether the FindParam defines a Frame.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestAttributes.DialogType">
            <summary>
            The dialog types supported by the DialogAttribute.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.TestContextWriteLine">
            <summary>
            Delegate used when you wish to perform your own logging into a custom
            logging system.
            </summary>
            <param name="Format">The format string.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.BaseTest">
            <summary>
            Base test class for all WebAii unit/coded tests.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseTest._currentMgr">
            <summary>
            The current manager object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseTest._vsWriteLineDelegate">
            <summary>
            The VS writeline delegate.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseTest._disposeCalled">
            <summary>
            Whether dispose is called.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.GetSettings">
            <summary>
            This method reads the settings object from the App.Config file and returns a Settings object.
            <example>
            The following is a sample config file that holds certain settings. Any settings
            not specified in this section, their values will be set to the system defaults:
            
            <![CDATA[ 
            <?xml version="1.0" encoding="utf-8" ?>
               <configuration>
                   <configSections>
                       <section name="WebAii.Settings" type="ArtOfTest.WebAii.Core.SettingsConfigSectionHandler,ArtOfTest.WebAii, Version=x.x.xxx.x, Culture=neutral, PublicKeyToken=4FD5F65BE123776C"/>
                   </configSections>
            
               <WebAii.Settings
                   defaultBrowser="InternetExplorer"
                   logLocation="D:\Log\"
                   executionTimeout="60000"
                   clientReadyTimeout="50000"
               />
               </configuration>
            ]]>
            </example>
            </summary>
            <returns>The settings object read from App.Config.</returns>
            <remarks>
            If you call this method and there are not settings present in the App.Config, then
            the method will create an empty Setting object and reset it to the system default settings.
            
            Also note that all Initialize() methods will call this method to attempt to load the settings.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize">
            <summary>
            Initialize this test case object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(System.String)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="logLocation">The log location where to do the logging.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(System.Boolean)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="recycleBrowser">True to run all tests in the same browser instance. Make sure
            that the test fixture tear-down calls the static ShutDown method of this class when
            using this setting.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(System.Boolean,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="recycleBrowser">True to run all tests in the same browser instance. Make sure
            that the test fixture tear-down calls the static ShutDown method of this class when
            using this setting.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(System.String,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="logLocation">The log location where to do the logging.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(System.Boolean,System.String,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="recycleBrowser">True to run all tests in the same browser instance. Make sure
            that the test fixture tear-down calls the static ShutDown method of this class when
            using this setting.</param>
            <param name="logLocation">The log location where to do the logging.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(ArtOfTest.WebAii.Core.Settings,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="settings">The settings to use for initialization.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Initialize(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="settings">The settings to use for initialization.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.SetTestMethod(System.Object,System.String)">
            <summary>
            Set the TestMethod executing so that WebAii can extract its attributes.
            </summary>
            <param name="testObject">The test object.</param>
            <param name="testMethodName">The test Method name executing.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.CleanUp">
            <summary>
            Shut down and clean-up.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.ShutDown">
            <summary>
            Shut down all instances if recycle brower is set.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Log_LogWriteLine(System.Object,ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs)">
            <summary>
            Handler the log write event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Wait">
            <summary>
            Gets a wait object that can be used to wait on specific actions or opertions.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Elements">
            <summary>
            Gets the Elements finder to be used to access elements defined by FindAttribute on the test method or class.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Actions">
            <summary>
            Gets the actions object associated with the ActiveBrowser.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Log">
            <summary>
            Gets the Log object associated with the Manager.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.ActiveBrowser">
            <summary>
            Gets the ActiveBrowser object. (The last browser launched).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Manager">
            <summary>
            Gets the Manager object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Find">
            <summary>
            Gets the Find object associated with the ActiveBrowser.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseTest.Desktop">
            <summary>
            Gets the Desktop object from the Manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseTest.Dispose">
            <summary>
            Dispose of this test and all of its resources.
            This method simply calls the CleanUp() method.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.BaseWpfTest">
            <summary>
            Base test class for all WebAii unit/coded tests.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseWpfTest._currentMgr">
            <summary>
            The current manager object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseWpfTest._vsWriteLineDelegate">
            <summary>
            The VS writeline delegate.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.TestTemplates.BaseWpfTest._disposeCalled">
            <summary>
            Whether dispose is called.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.GetSettings">
            <summary>
            This method reads the settings object from the App.Config file and returns a Settings object.
            <example>
            The following is a sample config file that holds certain settings. Any settings
            not specified in this section, their values will be set to the system defaults:
            
            <![CDATA[ 
            <?xml version="1.0" encoding="utf-8" ?>
               <configuration>
                   <configSections>
                       <section name="WebAii.Settings" type="ArtOfTest.WebAii.Core.SettingsConfigSectionHandler,ArtOfTest.WebAii, Version=x.x.xxx.x, Culture=neutral, PublicKeyToken=4FD5F65BE123776C"/>
                   </configSections>
            
               <WebAii.Settings        ///      
                   logLocation="D:\Log\"
                   executionTimeout="60000"
                   clientReadyTimeout="50000"
               />
               </configuration>
            ]]>
            </example>
            </summary>
            <returns>The settings object read from App.Config.</returns>
            <remarks>
            If you call this method and there are not settings present in the App.Config, then
            the method will create an empty Setting object and reset it to the system default settings.
            
            Also note that all Initialize() methods will call this method to attempt to load the settings.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize">
            <summary>
            Initialize this test case object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize(ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize(System.String)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="logLocation">The log location where to do the logging.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize(System.String,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="logLocation">The log location where to do the logging.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize(ArtOfTest.WebAii.Core.Settings,ArtOfTest.WebAii.TestTemplates.TestContextWriteLine)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="settings">The settings to use for initialization.</param>
            <param name="vsWriteLineDelegate">A write line delegate to call when logging from Log.WriteLine.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Initialize(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Initialize this test case object.
            </summary>
            <param name="settings">The settings to use for initialization.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.SetTestMethod(System.Object,System.String)">
            <summary>
            Set the TestMethod executing so that WebAii can extract its attributes.
            </summary>
            <param name="testObject">The test object.</param>
            <param name="testMethodName">The test Method name executing.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.CleanUp">
            <summary>
            Shut down and clean-up.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.ShutDown">
            <summary>
            Shut down all instances if recycle brower is set.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Log_LogWriteLine(System.Object,ArtOfTest.WebAii.EventsArgs.LogWriteEventArgs)">
            <summary>
            Handler the log write event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Wait">
            <summary>
            Gets a wait object that can be used to wait on specific actions or opertions.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Elements">
            <summary>
            Gets the Elements finder to be used to access elements defined by FindAttribute on the test method or class.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Log">
            <summary>
            Gets the Log object associated with the Manager.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.ActiveApplication">
            <summary>
            Gets the ActiveBrowser object. (The last browser launched).
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Manager">
            <summary>
            Gets the Manager object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Desktop">
            <summary>
            Gets the Desktop object from the Manager.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.BaseWpfTest.Dispose">
            <summary>
            Dispose of this test and all of its resources.
            This method simply calls the CleanUp() method.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.ElementContainer`2">
            <summary>
            Base class for element containers (Page, Region, SilverlightApp, etc.) in Project.cs file
            </summary>
            <typeparam name="TElement">The base element type contained; e.g. Element, FrameworkElement</typeparam>
            <typeparam name="TFindExpression">The type of FindExpression used; e.g. HtmlFindExpression, XamlFindExpression</typeparam>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.ElementContainer`2.Get(`1)">
            <summary>
            Finds an element using a FindExpression.
            </summary>
            <param name="expr">The <see cref="T:ArtOfTest.Common.FindExpression`1"/> to use to locate the element.</param>
            <returns>The element or null if no matching element found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.ElementContainer`2.Get(`1,System.Boolean,System.Int32)">
            <summary>
            Finds an element using a FindExpression.
            </summary>
            <param name="expr">The <see cref="T:ArtOfTest.Common.FindExpression`1"/> to use to locate the element.</param>
            <param name="waitOnElement">Whether or not to wait for the element to exist.</param>
            <param name="timeout">The amount of time to wait for the element to exist. If waitOnElement is false, this parameter is not used.</param>
            <returns>The element or null if no matching element found within the timeout period.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.ElementContainer`2.Factory">
            <summary>
            Factory used to create the element find expression in case its data-driven 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.ElementContainer`2.Get(System.String[])">
            <summary>
            Finds an element using a FindExpression.
            </summary>
            <param name="clauses">A list of clauses to use to find the element.</param>
            <returns>The element or null if no matching element found.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer">
            <summary>
            Base class for containers of HTML elements in the Project.cs file
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.#ctor(ArtOfTest.WebAii.Core.Find)">
            <summary>
            Initializes a new HtmlElementContainer object.
            </summary>
            <param name="find">The <see cref="P:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Find"/> object use when searching for this element in the DOM tree.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Get(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find a matching element in the DOM tree. Waits the default amount of time for the element to exist.
            </summary>
            <param name="expr">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> that defines how to find the right element.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> or null if no matching element found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.GetElement(ArtOfTest.WebAii.Core.HtmlFindExpression,System.Boolean,System.Int32)">
            <summary>
            Find a matching element in the DOM tree.
            </summary>
            <param name="expr">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> that defines how to find the right element.</param>
            <param name="waitOnElement">Whether or not to wait for the element to exist.</param>
            <param name="timeout">The amount of time to wait for the element to exist.</param>
            <returns>An <see cref="T:ArtOfTest.WebAii.ObjectModel.Element"/> or null if no matching element found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Get``1(ArtOfTest.WebAii.Core.HtmlFindExpression,System.Boolean,System.Int32)">
            <summary>
            Find a matching element in the DOM tree.
            </summary>
            <typeparam name="TControl">The type of element to search for.</typeparam>
            <param name="expr">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> that defines how to find the right element.</param>
            <param name="waitOnElement">Whether or not to wait for the element to exist.</param>
            <param name="timeout">The amount of time to wait for the element to exist.</param>
            <returns>An element of type TControl or null if no matching element found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Get``1(ArtOfTest.WebAii.Core.HtmlFindExpression)">
            <summary>
            Find a matching element in the DOM tree. Waits the default amount of time for the element to exist.
            </summary>
            <typeparam name="TControl">The type of element to search for.</typeparam>
            <param name="expr">The <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> that defines how to find the right element.</param>
            <returns>An element of type TControl or null if no matching element found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Get``1(System.String[])">
            <summary>
            Find a matching element in the DOM tree. Waits the default amount of time for the element to exist.
            </summary>
            <typeparam name="TControl">The type of element to search for.</typeparam>
            <param name="clauses">An array of <see cref="T:ArtOfTest.WebAii.Core.HtmlFindExpression"/> strings to use to find a matching element in the DOM tree.</param>
            <returns>An element of type TControl or null if no matching element found.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.OwnerBrowser">
            <summary>
            The owner browser of this container.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.HtmlElementContainer.Find">
            <summary>
            Gets the Find object scoped to this container.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.HtmlPage">
            <summary>
            Represents an Html Page objects.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.TestTemplates.XamlElementContainer">
            <summary>
            Base class for containers of Silverlight elements in the Project.cs file
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.XamlElementContainer.EnsureClickable">
            <summary>
            Gets and sets whether to ensure elements are in a clickable region of the browser
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.XamlElementContainer.OwnerApp">
            <summary>
            Gets a reference of the application that owner this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.TestTemplates.XamlElementContainer.Find">
            <summary>
            Gets the Find object scoped to this container.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Annotator">
            <summary>
            Provides annotation support for a browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Annotator.OFF_SET">
            <summary>
            The offset of info annotation
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Annotator._annotateSettings">
            <summary>
            Annotation settings to use.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Annotator._host">
            <summary>
            The target browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Annotator._adornerWindow">
            <summary>
            THe adorner window we will use.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Annotator._annotatorUI">
            <summary>
            The annotator UI.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.#ctor(ArtOfTest.WebAii.IAnnotationHost,ArtOfTest.WebAii.Win32.AnnotatorSettings)">
            <summary>
            Create a new annotator object.
            </summary>
            <param name="browser">The target browser to annotate.</param>
            <param name="annotationSettings">The annotation settings.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.#ctor(ArtOfTest.WebAii.IAnnotationHost)">
            <summary>
            Create a new annotator with default settings.
            </summary>
            <param name="browser">The target browser to annotate.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Annotator.Settings">
            <summary>
            Gets/Sets the annotation settings to use. You can use these settings at any point in execution
            to change how annotation is done.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.String)">
            <summary>
            Annotate a message to the browser. Will use the AnnotateSettings.InfoMessageLocation to place this message on the browser surface.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.String,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Annotate a message to the browser
            </summary>
            <param name="message">The message.</param>
            <param name="displayTime">The display time (msec).</param>
            <param name="location">The display location</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.String,System.Boolean)">
            <summary>
            Annotate a message to the browser. Will use the AnnotateSettings.InfoMessageLocation to place this message on the browser surface.
            </summary>
            <param name="message">The message.</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.Drawing.Point,System.String)">
            <summary>
            Annotate a single point.
            </summary>
            <param name="point">The point.</param>
            <param name="message">The message</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.Drawing.Point,System.String,System.Boolean)">
            <summary>
            Annotate a single point.
            </summary>
            <param name="point">The point.</param>
            <param name="message">The message</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.Drawing.Rectangle,System.String)">
            <summary>
            Annotate and highlight a specific target rectangle on the browser surface with a message to display underneath.
            </summary>
            <param name="targetArea">The target area to highlight.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Clear">
            <summary>
            Clear all annotations
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Close">
            <summary>
            Close the annotator.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.Annotate(System.Drawing.Rectangle,System.String,System.Boolean)">
            <summary>
            Annotate and highlight a specific target rectangle on the browser surface with a message to display underneath.
            </summary>
            <param name="targetArea">The target area to highlight.</param>
            <param name="message">The message.</param>
            <param name="isNative">Internal call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.CreateAdornerWindow">
            <summary>
            Create an Adorner window object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.DisplaySleep(System.Int32)">
            <summary>
            Perform a display sleep
            </summary>
            <param name="msec">The time to sleep for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.AnnotateInternal(System.Drawing.Rectangle,System.String,ArtOfTest.Common.OffsetReference,System.Boolean)">
            <summary>
            Annotate
            </summary>
            <param name="targetArea">Target area, else Rectangle.Empty</param>
            <param name="message">The message.</param>
            <param name="location">The message location.</param>
            <param name="isNative">Called internally</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Annotator.CalculateMessageCoordinates(System.Drawing.SizeF,System.Drawing.Rectangle,ArtOfTest.Common.OffsetReference)">
            <summary>
            Calculate a specific string location on the window rectangle specified an the location specified.
            </summary>
            <param name="stringSize">The string size to calculate.</param>
            <param name="entireWindow">The entire window rectangle.</param>
            <param name="location">The location where to place the message.</param>
            <returns>The actual point where to draw the message.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.AnnotatorSettings">
            <summary>
            Class representing all the annotator settings.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorSettings.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Create a new Annotator settings object.
            </summary>
            <param name="color">The color to use.</param>
            <param name="borderWidth">The border width to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorSettings.#ctor(System.Drawing.Color,System.Single,System.String,System.Single,System.Drawing.FontStyle,System.Boolean,System.Drawing.Color,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Create a new Annotator settings object.
            </summary>
            <param name="color">The color to use.</param>
            <param name="borderWidth">The border width to use.</param>
            <param name="fontFamilyName">The font to use to draw messages.</param>
            <param name="fontemSize">The font size to use.</param>
            <param name="fontStyle">The font style to use.</param>
            <param name="ShowAnnotationMessage">Whether to show annotation messages or not.</param>
            <param name="backgroundAlpha">The background alpha blending 0-255.</param>
            <param name="backgroundColor">The background color of text annotations.</param>
            <param name="borderPadding">The padding between the highlight border and the element.</param>
            <param name="infoLocation">The location where to place text annotations.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorSettings.#ctor">
            <summary>
            Create a new Annotator settings object. Use default settings.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.Color">
            <summary>
            Gets/Sets the color to use to draw the annotations. Default Red.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.CustomDisplayTime">
            <summary>
            Gets or sets the hang time for custom annotations.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.BorderPadding">
            <summary>
            Gets/Sets the border padding between the border and highlighted element. Default 4.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.BorderWidth">
            <summary>
            Gets/Sets the border width that highlights the element. Default 2.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.FontFamilyName">
            <summary>
            The font family name to use to draw the annotation messages. Default Tahoma.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.FontemSize">
            <summary>
            Gets/Sets the font size to use to draw the messages. Default 10.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.FontStyle">
            <summary>
            Gets/Sets the font style to use to draw the messages. Default Bold.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.ShowAnnotationMessage">
            <summary>
            Gets/Sets whether to show message annotation in addition to highlighting the target elements.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.BackColor">
            <summary>
            Gets/Sets the background color for message annotations. Default Yellow.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.BackColorAlpha">
            <summary>
            Gets/Sets the background color alpha blending. Default 240.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.AnnotatorSettings.InfoMessageLocation">
            <summary>
            Gets/Sets the info message location in reference to the window. Default TopCenter.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.AnnotatorUI">
            <summary>
            Interaction logic for AnnotatorUI.xaml
            </summary>
            <summary>
            AnnotatorUI
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.AnnotatorUI._message">
            <summary>
            The message we will show.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorUI.MeasureString(System.String)">
            <summary>
            Measure a string using the provided settings. This method should be called after ApplySettings() is called.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorUI.Clear">
            <summary>
            Clear any annotation
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.AnnotatorUI.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Button">
            <summary>
            Represents a Win32 button on a window or a dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Button._ownerWindow">
            <summary>
            The parent owner window of this button
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Button.#ctor(ArtOfTest.Common.Win32.Window,System.Int32)">
            <summary>
            Create a new button using the button id
            </summary>
            <param name="parentWindow">The parent window object.</param>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Button.#ctor(ArtOfTest.Common.Win32.Window,System.String,System.Boolean)">
            <summary>
            Create a new button using a button text and parent window.
            </summary>
            <param name="parentWindow">The parent window object.</param>
            <param name="buttonCaption">The button caption.</param>
            <param name="isPartial">True/False whether using a partial caption.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Button.#ctor(ArtOfTest.Common.Win32.HWND,System.Int32)">
            <summary>
            Create a new button using its parent and its button id.
            </summary>
            <param name="parentWindow">The parent window.</param>
            <param name="buttonId">The button id.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Button.#ctor(ArtOfTest.Common.Win32.HWND,System.String,System.Boolean)">
            <summary>
            Create a new button using a parent window and the button caption. Can use partial caption.
            </summary>
            <param name="parentWindow">The parent window that contains the button.</param>
            <param name="buttonCaption">The button caption.</param>
            <param name="isPartial">True/False whether the caption is partial.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Button.Click">
            <summary>
            Click this button
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog">
            <summary>
            Class to handle javascript alert dialogs.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.IE70_ALERT_TITLE">
            <summary>
            IE Dialog title. 7.0.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.IE80_ALERT_TITLE">
            <summary>
            IE Dialog title. 8.0
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.OK_BUTTON_ID">
            <summary>
            
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog._handlePerformer">
            <summary>
            Handle performer
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new AlertDialog object to handle the dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The dismiss button to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether the dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs on the desktop.</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.AlertDialog.Handle">
            <summary>
            Handle this dialog.
            </summary>
            <returns>True/False whether this dialog was handled.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog">
            <summary>
            A base implementation for a dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._errorText">
            <summary>
            If the dialog produces an error, this field is set
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._window">
            <summary>
            The window object representing this dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._dismissButton">
            <summary>
            The button to use to dismiss this dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._handlerDelegate">
            <summary>
            The custom handler to use to handle this dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._parentBrowserProcessId">
            <summary>
            The process id of the parent browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._parentBrowser">
            <summary>
            The parent browser object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._parentWpfApp">
            <summary>
            The parent wpf application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._handleCount">
            <summary>
            The number of times this dialog has been handled.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.m_browserVersionMajor">
            <summary>
            The major version of the browser
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog._currentState">
            <summary>
            The current dialog state.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new dialog.
            </summary>
            <param name="parentBrowser">The parent browser. Expect null for non-web dialogs.</param>
            <param name="dismissButton">The button to use to dismiss the dialog.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.ParentProcessId">
            <summary>
            Parent process id of the browser and all the dialogs that this object should handle.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.ParentBrowser">
            <summary>
            The parent browser object of this dialog
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.SetDialogWindow(ArtOfTest.Common.Win32.Window)">
            <summary>
            Set the dialog window.
            </summary>
            <param name="dialogWindow">The dialog window object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.IsDialogActiveByTitle(ArtOfTest.Common.Win32.WindowCollection,System.String)">
            <summary>
            Get whether the dialog is active based on its title.
            </summary>
            <param name="dialogs">The list of dialogs to check.</param>
            <param name="title">The title to check for.</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.IsDialogActiveByTitle(ArtOfTest.Common.Win32.WindowCollection,System.String,System.Boolean)">
            <summary>
            Get whether the dialog is active base on its title.
            </summary>
            <param name="dialogs">The list of dialogs to check.</param>
            <param name="title">The title to check for.</param>
            <param name="partialTitle">True/False whether to do partial match or not.</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.IsDialogActiveByTitleAndTextContent(ArtOfTest.Common.Win32.WindowCollection,System.String,System.Boolean,System.String)">
            <summary>
            Gets whether a dialog is active or not using the title and caption of an inner window contained
            in the dialog
            </summary>
            <param name="dialogs">The list of dialogs to check.</param>
            <param name="title">The title to check for.</param>
            <param name="partialTitle">True/False whether to do partial match or not.</param>
            <param name="childWindowTextContent">The partial content of a child window</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.CurrentState">
            <summary>
            Gets/Sets the dialog current state. State is handled my DialogMonitor.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.Window">
            <summary>
            The dialog Window object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.HandleCount">
            <summary>
            Gets/Sets the number of times this dialog has been handled.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.HandlerDelegate">
            <summary>
            Gets/Sets the dialog custom handler
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.DismissButton">
            <summary>
            Gets/Sets the dismiss button to use to knock down this dialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Detect whether this dialog is active or not.
            Mostly used for HWND-based controls, such as top-level windows.
            </summary>
            <param name="dialogs">The list of all dialogs.</param>
            <returns>True/False whether this dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.Handle">
            <summary>
            Handle the dialog. If HandlerDelegate is set, use the delegate
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.ResetHandleCount">
            <summary>
            Resets the handle count back to zero.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.WaitUntilHandled(System.Int32)">
            <summary>
            Waits for the dialog to be handled atleast once. Always performs a reset at the being of the wait.
            </summary>
            <param name="timeout">The timeout to use. (msec.)</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.WaitUntilHandled">
            <summary>
            Waits for the dialog to be handled atleast once. Always performs a reset at the beginning of the wait.
            Will use the Settings.ClientReadyTimeout.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.WaitUntilHandled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Waits for the dialog to be handled handleCount. You can optionally reset the handle count before waiting.
            </summary>
            <param name="handleCount">The handle count to wait for.</param>
            <param name="timeout">The time out in milli-seconds to wait for count.</param>
            <param name="resetHandleCount">True/False whether to reset the handle count before starting.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.Tags">
            <summary>
            Custom tags for miscellaneous use.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.BaseDialog.InitializationTime">
            <summary>
            Gets/Sets the time to before handling of the dialog starts.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog">
            <summary>
            Class to handle javascript confirm dialogs.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog.IE70_ALERT_TITLE">
            <summary>
            IE Dialog title. 7.0.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog.IE80_ALERT_TITLE">
            <summary>
            IE Dialog title. 8.0
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog._handlePerformer">
            <summary>
            Handle performer
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new AlertDialog object to handle the dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The dismiss button to use.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether the dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs on the desktop.</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.ConfirmDialog.Handle">
            <summary>
            Handle this dialog.
            </summary>
            <returns>True/False whether this dialog was handled.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DialogBatch">
            <summary>
            A group of dialogs to be monitored together.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.DialogBatch.Dialogs">
            <summary>
            Dialogs to be monitored.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.DialogBatch.AutoRemove">
            <summary>
            Indicates whether batch will be auto removed from dialog monitoring when all its dialogs are handled.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.IDownloadCompleteDialog">
            <summary>
            Common interface between download complete dialogs.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IDownloadCompleteDialog.IsDownloadCompeteDialog(ArtOfTest.Common.Win32.Window)">
            <summary>
            Determine if window is download complete dialog.
            </summary>
            <param name="window">The window to check.</param>
            <returns>True if window is download complete dialog, otherwise false.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IDownloadCompleteDialog.ModifyMessageParams(System.IntPtr@,ArtOfTest.Common.Win32.NativeMethods.COPYDATASTRUCT@)">
            <summary>
            Modify window handle and lParams to be sent to monitored window.
            </summary>
            <param name="a">The window handle.</param>
            <param name="lParam">The message lParams.</param>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.HandlerPerformersConstants.OK_BUTTON_TITLE">
            <summary>
            Dialog control title of OK button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.HandlerPerformersConstants.CANCEL_BUTTON_TITLE">
            <summary>
            Dialog control title of Cancel button
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.PromptDialog.Text">
            <summary>
            Gets/Sets UserName
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.PromptDialog.CreatePromptDialog(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String)">
            <summary>
            Creates a prompt dialog.
            </summary>
            <param name="parentBrowser">The current browser.</param>
            <param name="dismissButton">Dismiss button.</param>
            <param name="text">Text of the propmpt.</param>
            <returns>Prompt dialog for a specific browser.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog">
            <summary>
            Class to handle javascript onbeforeunload Confirm Navigation dialogs.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IE80_CONFIRM_EXIT_TITLE">
            <summary>
            IE8/9 dialog title
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IE80_SUBTITLE">
            <summary>
            IE8 confirm navigation subtext
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IE90_OK_BUTTON_TITLE">
            <summary>
            IE9 OK button title
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IE90_CANCEL_BUTTON_TITLE">
            <summary>
            IE9 Cancel button title
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IE11_CONFIRM_EXIT_TITLE">
            <summary>
            IE11 dialog title
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.CreateOnBeforeUnloadDialog(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Creates a OnBeforeUnloadDialog object to handle the dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The dismiss button to use.</param>
            <returns>A new OnBeforeUnloadDialog object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether the dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs on the desktop.</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OnBeforeUnloadDialog.Handle">
            <summary>
            Handle this dialog.
            </summary>
            <returns>True/False whether this dialog was handled.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor">
            <summary>
            Class implementation for a dialog monitor to handle dialogs during execution.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._dialogsToMonitor">
            <summary>
            The list of dialogs to monitor.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._dialogBatches">
            <summary>
            Contains batch dialogs to monitor.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._isMonitoring">
            <summary>
            Determines if monitor is started.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._downloadCompleteThread">
            <summary>
            We need to track the downloadComplete dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._manager">
            <summary>
            The manager associated with this dialogmonitor
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor._dispatcher">
            <summary>
            Dispatches calls form UI Automation framework.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.#ctor">
            <summary>
            Create a new DialogMonitor object and start the monitoring.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.#ctor(System.Boolean)">
            <summary>
            Create a new DialogMonitor object, associated with the current Manager
            </summary>
            <param name="startMonitoring">Whether to start monitoring the dialogs. If false, monitoring can start by calling Start().</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.#ctor(System.Boolean,ArtOfTest.WebAii.Core.Manager)">
            <summary>
            Create a new DialogMonitor object, associated with a specific Manager
            </summary>
            <param name="startMonitoring">Whether to start monitoring the dialogs. If false, monitoring can start by calling Start().</param>
            <param name="manager">The manager to associate with the dialog monitor</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.Dialogs">
            <summary>
            Gets the collection of dialogs the monitor is monitoring.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.IsMonitoring">
            <summary>
            Gets whether the DialogMonitor object is currently monitoring dialogs or not.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.AddDialog(ArtOfTest.WebAii.Win32.Dialogs.IDialog)">
            <summary>
            Add a dialog to be monitored.
            </summary>
            <param name="dialog">The dialog to add.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.RemoveDialog(ArtOfTest.WebAii.Win32.Dialogs.IDialog)">
            <summary>
            Remove a single dialog from the list of dialogs to monitor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.RemoveDialogs(ArtOfTest.WebAii.Win32.Dialogs.IDialog[])">
            <summary>
            Remove any number of dialogs from the list of dialogs to monitor.
            </summary>
            <param name="specifiedDialogsToRemove">The dialogs to remove. If empty, it will remove all of them.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.Start">
            <summary>
            Start dialog monitoring.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.Stop">
            <summary>
            Stop dialog monitoring.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.RemoveAllBatchDialogs">
            <summary>
            Remove all dialog batches
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.HandleExistingWin32Dialogs(System.Diagnostics.Process)">
            <summary>
            Handle already opened WIN32 dialogs from a specific process.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.HandleExistingFireFoxCustomDialogs(System.Windows.Automation.AutomationElement,System.String)">
            <summary>
            Handle exising custom dialogs - like FF4 alert dialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.HandleExistingBrowserDialogs(ArtOfTest.WebAii.Core.Browser)">
            <summary>
            Handle already opened dialogs.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.HandleExistingApplicationDialogs(ArtOfTest.WebAii.Wpf.WpfApplication)">
            <summary>
            Handle already opened dialogs.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.HandleElement(System.Windows.Automation.AutomationElement)">
            <summary>
            
            </summary>
            <remarks>With per-element checks, expect a lot of legitimate noise. Not the end of the world as it would be with a stray top-level dialog.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.FindUIAEDialog(System.Windows.Automation.AutomationElement)">
            <summary>
            Find dialog from UIA element.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.AttachToDownloadCompleteDialog(ArtOfTest.Common.Win32.Window)">
            <summary>
            Creates a thread that waits on a download complete dialog to signal that it has finished downloading
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.DownloadCompleteThread(System.Object)">
            <summary>
            Waits on a signal from a download complete dialog
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DialogMonitor.GetAllDialogs">
            <summary>
            Returns a collection of all top level dialogs of the current desktop.
            </summary>
            <returns>The collectin of dialogs.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler">
            <summary>
            The download dialogs handler. Wraps all the download dialog sequences for IE/Firefox into a simple API call.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler._anyDialogsToWaitFor">
            <summary>
            If even one of these dialogs meets the condition, the wait is successful.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler.SaveLocation">
            <summary>
            Gets/Sets the save location when doing a SAVE.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create the dialog passing it the parent browser and the button to use 
            to dismiss the instance of this dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss the dialog. Accepts: SAVE or CANCEL.</param>
            <param name="saveLocation">The location to save the file if dismiss button is SAVE, else is ignored.</param>
            <param name="desktopObject">The desktop object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler.SetupMonitoring">
            <summary>
            Setup the monitoring.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler.WaitUntilHandled">
            <summary>
            Wait until all dialogs handled. Uses the Settings.ClientReadyTimeout as the timeout.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.DownloadDialogsHandler.WaitUntilHandled(System.Int32)">
            <summary>
            Wait until all dialogs are handled using the timeout passed in.
            SetupMonitoring() must be called before every use.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.FFOpenDownloadDialog">
            <summary>
            Firefox OpenDialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FFOpenDownloadDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create the dialog passing it the parent browser and the button to use 
            to dismiss the instance of this dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss the dialog. Accepts: SAVE, OPEN or CANCEL.</param>
            <param name="desktopObject">The desktop object to use for mouse events if needed.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FFOpenDownloadDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether the dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs to check.</param>
            <returns>True/False whether the dialog is active.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FFOpenDownloadDialog.Handle">
            <summary>
            Handle this dialog.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.SafariDownloadDialog">
            <summary>
            Handles all the unique file download dialogs that appear under the Safari browser.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SafariDownloadDialog._desktop">
            <summary>
            The desktop object to use.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SafariDownloadDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Constructs a new SafariDownloadDialog object.
            </summary>
            <param name="parentBrowser">The browser object initiating the download.</param>
            <param name="dismissButton">Which button of the download dialog to click to dismiss the dialog.</param>
            <param name="desktop">The desktop object used to search for Win32 windows.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SafariDownloadDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Determines whether or not one of the download dialog windows is currently open.
            </summary>
            <param name="dialogs">The collection of Win32 windows to search for.</param>
            <returns>True if one of the specified windows was found on the desktop and is attached to this browser.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SafariDownloadDialog.Handle">
            <summary>
            Handles an open download dialog window according to the properties set on this object.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog">
            <summary>
            Class to handle the FileUpload dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.OPEN_BUTTON_ID">
            <summary>
            Items accessed via their ids
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.IE_FILEUPLOAD_TITLE">
            <summary>
            IE's upload dialog title. Localized.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.SILVERLIGHT_TITLE">
            <summary>
            Silverlight open file title. Localized.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog._filePathToSet">
            <summary>
            The path of the file to upload
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.FilePath">
            <summary>
            Gets/Sets the file path to set for this dialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new FileUploadDialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="filePath">The file path of the file to upload.</param>
            <param name="dismissButton">The dismiss button to use to close the dialog.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String)">
            <summary>
            Create a new FileUploadDialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="filePath">The file path of the file to upload.</param>
            <param name="dismissButton">The dismiss button to use to close the dialog.</param>
            <param name="title">The dialog title.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Is dialog active.
            </summary>
            <param name="dialogs">The list of dialogs</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.FileUploadDialog.Handle">
            <summary>
            Handle the dialog.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog">
            <summary>
            A generic dialog handler that can be used for quick and easy way to write a dialog handler
            for a simply dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog._title">
            <summary>
            The title of the generic dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog._buttonText">
            <summary>
            The button text to handle
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog._buttonId">
            <summary>
            The button id to handle
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog._childTextContext">
            <summary>
            The child text content of the dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog._partialTitle">
            <summary>
            Partial title.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.ButtonText">
            <summary>
            Gets/Sets the button text to click.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.ButtonId">
            <summary>
            Gets/Sets the button id to click.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.PartialTitle">
            <summary>
            Gets/Sets whether the title is partial title.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.ChildTextContext">
            <summary>
            Gets/Sets the child text of a child window of this dialog.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.Title">
            <summary>
            Gets/Sets the title of this dialog.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            All-encompassing base constructor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog to handle.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <remarks>Will simply close this dialog.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean,System.String)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog to handle.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean,System.Int32)">
            <summary>
            Create a new generic dialog
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonId">The button id to click on the dialog.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Create a new generic dialog
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonId">The button id to click on the dialog.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.String,System.Boolean)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog.</param>
            <param name="buttonText">The button caption to click.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonText">The button caption to click.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            All-encompassing base constructor.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog to handle.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <remarks>Will simply close this dialog.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean,System.String)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog to handle.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean,System.Int32)">
            <summary>
            Create a new generic dialog
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonId">The button id to click on the dialog.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Create a new generic dialog
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonId">The button id to click on the dialog.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.String,System.Boolean)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog.</param>
            <param name="buttonText">The button caption to click.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a new generic dialog.
            </summary>
            <param name="parentBrowser">The parent WpfApplication.</param>
            <param name="title">The title of the dialog.</param>
            <param name="partialTitle">Whether the title provided is partial or complete.</param>
            <param name="buttonText">The button caption to click.</param>
            <param name="childTextContent">A partial text that might be found on that dialog. This can help isolate
            this dialog from other dialogs that might have similar titles.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            If dialog is active.
            </summary>
            <param name="dialogs">The list of all dialogs</param>
            <returns>True/False if the dialog is active.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.GenericDialog.Handle">
            <summary>
            Handle this generic dialog
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DialogHandlerDelegate">
            <summary>
            A dialog handler that allows for users to do their own handling of a dialog
            instead of calling Handle().
            </summary>
            <param name="dialog">The dialog being handled.</param>
            <returns>True/False whether the dialog has been handled.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.IDialog">
            <summary>
            Interface to implement for dialogs to be monitored and handled by the DialogMonitor object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.Window">
            <summary>
            The Window object that represents this dialog. 
            IsDialogActive() should set this property if it is returning true.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.HandleCount">
            <summary>
            Gets/Sets the number of times this dialog has been handled.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.CurrentState">
            <summary>
            The dialogs current state. This property is Managed by the dialog monitor.
            Implementors should simply provide a private field to store this value for get/set operations.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.HandlerDelegate">
            <summary>
            Gets/Sets a dialog handler delegate that will be used instead of the Handle() function.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.SkipHandling">
            <summary>
            Gets/Sets a dialog delegate that will be used if handling dialog will be skipped.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether the dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs present on the desktop.</param>
            <returns>True/False whether the dialog is active/present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IDialog.Handle">
            <summary>
            If a HandlerDelegate is set, this function should call the delegate, otherwise handle the dialog itself.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.ErrorText">
            <summary>
            When a dialog encounters an error and needs to abort, this property is set
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.IDialog.InitializationTime">
            <summary>
            Gets/Sets the time to before handling of the dialog starts.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IDialog.MatchesUIAutomationElement(System.Windows.Automation.AutomationElement)">
            <summary>
            Detect whether this UI element completes the awaited conditions. For situations where window handles do not or need not apply.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadCompleteDialog">
            <summary>
            The IE download complete dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadCompleteDialog._desktopObject">
            The desktop object to click the dialogs.
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadCompleteDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create the dialog passing it the parent browser and the button to use 
            to dismiss the instance of this dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss the dialog. Accepts: RUN, OPEN or CLOSE.</param>
            <param name="desktopObject">The desktop object to use to invoke mouse/keyboard events.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadCompleteDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Check whether the dialog is present or not. This function is
            called by the dialogmonitor object
            </summary>
            <param name="dialogs">This is a list of dialog passes in 
            the by the DialogMonitor object.</param>
            <returns>True/False whether this dialog is present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadCompleteDialog.Handle">
            <summary>
            This is called by the DialogMonitor whenever IsDialogActive returns true.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog">
            <summary>
            IE's initial download dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog._desktopObject">
            The desktop object to click the dialogs.
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create the dialog passing it the parent browser and the button to use 
            to dismiss the instance of this dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss the dialog. Accepts: RUN, CANCEL, SAVE or OPEN.</param>
            <param name="desktop">The desktop object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Check whether the dialog is present or not. This function is
            called by the dialogmonitor object
            </summary>
            <param name="dialogs">This is a list of dialog passes in 
            the by the DialogMonitor object.</param>
            <returns>True/False whether this dialog is present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog.Handle">
            <summary>
            This is called by the DialogMonitor whenever IsDialogActive returns true.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.IEDownloadDialog.IsMatchingWindowsVistaTaskDialog(ArtOfTest.Common.Win32.HWND,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            Gets whether the provided window is a dialog created by TaskDialog() or TaskDialogIndirect(), according to the given criteria.
            </summary>
            <param name="hDialog"></param>
            <param name="titleRegexOrString">A Regex or String describing the main window title.</param>
            <param name="mainInstructionRegexOrString">A Regex or String describing the "MainInstruction" automation element name.</param>
            <param name="contentTextRegexOrString">A Regex or String describing the "ContentText" automation element name.</param>
            <param name="expectedButtonTextRegexesOrStrings">A Regex or String describing each expected Win32 button caption.</param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog">
            <summary>
            SaveAs Dialog handler.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.WPF_TITLE">
            <summary>
            WPF's Save As title.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.IE_TITLE">
            <summary>
            IE's Save As title.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.SUB_TITLE">
            <summary>
            The subtitle found in a desired dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.SAVE_BUTTON_ID">
            <summary>
            Button/control ids
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog._filePath">
            <summary>
            File name to use to save.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog._desktopObject">
            <summary>
            The desktop.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.#ctor(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create the dialog passing it the parent browser and the button to use 
            to dismiss the instance of this dialog.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss the dialog. Accepts SAVE or CANCEL.</param>
            <param name="filePath">The full file path to the save location.</param>
            <param name="desktopObject">The desktop object.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.#ctor(ArtOfTest.WebAii.Wpf.WpfApplication,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,System.String,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Returns an Save As Dialog for use with WPF applications.
            </summary>
            <param name="application">The host application.</param>
            <param name="dismissButton">The dismiss button to use. Accepts SAVE or CANCEL.</param>
            <param name="filePath">The location of the file to open.</param>        
            <param name="title">The title of the dialog. Pass string.Empty to use default value or overwrite it in case of custom dialog.</param>
            <returns>A new SaveAsDialog.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.CreateSaveAsDialog(ArtOfTest.WebAii.Core.Browser,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Returns an Save As Dialog for use with web applications.
            </summary>
            <param name="parentBrowser">Parent browser object.</param>
            <param name="dismissButton">The dismiss button to use. Accepts OPEN or CANCEL.</param>
            <param name="filePath">The location of the file to open.</param>        
            <param name="title">The title of the dialog. Pass string.Empty to use default value or overwrite it in case of custom dialog.</param>
            <param name="desktopObject">Desktop object.</param>
            <returns>A new SaveAsDialog.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.CreateSaveAsDialog(ArtOfTest.WebAii.Wpf.WpfApplication,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,System.String)">
            <summary>
            Returns an Save As Dialog for use with WPF applications.
            </summary>
            <param name="application">The host application.</param>
            <param name="dismissButton">The dismiss button to use. Accepts SAVE or CANCEL.</param>
            <param name="filePath">The location of the file to open.</param>        
            <param name="title">The title of the dialog. Pass string.Empty to use default value or overwrite it in case of custom dialog.</param>
            <returns>A new SaveAsDialog.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.SaveFileName">
            <summary>
            Gets/Sets the save file name/path to use if you are saving the file. Else set to string.empty.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Check whether the dialog is present or not. This function is
            called by the dialogmonitor object
            </summary>
            <param name="dialogs">This is a list of dialog passes in 
            the by the DialogMonitor object.</param>
            <returns>True/False whether this dialog is present.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.SaveAsDialog.Handle">
            <summary>
            This is called by the DialogMonitor whenever IsDialogActive returns true.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.IE9NotificationBar.NotificationBar">
            <summary>
            Reference to notification bar element. If this field is null Handle method will fail.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.OPEN_BUTTON_ID">
            <summary>
            Items accessed via their ids
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog._filePathToSet">
            <summary>
            the path of the file to open
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog._titleToCheckFor">
            <summary>
            The title of the dialog to check.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.COMDLG_TITLE">
            <summary>
            WPF's Open File Dialog Title
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.CreateOpenFileDialog(ArtOfTest.WebAii.Wpf.WpfApplication,ArtOfTest.WebAii.Win32.Dialogs.DialogButton,System.String,System.String)">
            <summary>
            Returns an Open File Dialog for use with WPF applications.
            </summary>
            <param name="application">The host application.</param>
            <param name="dismissButton">The dismiss button to use. Accepts OPEN or CANCEL.</param>
            <param name="filePath">The location of the file to open.</param>        
            <param name="title">The title of the dialog. Pass null to use default value or overwrite it in case of custom dialog.</param>
            <returns>A new OpenFileDialog.</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.FilePath">
            <summary>
            Gets/Sets the file path.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Is dialog active.
            </summary>
            <param name="dialogs">The list of dialogs</param>
            <returns>True/False whether the dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.OpenFileDialog.Handle">
            <summary>
            Handle the dialog.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DialogButton">
            <summary>
            Possible buttons for to click for a dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.CANCEL">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.OPEN">
            <summary>
            Open button for the Upload dialog.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.YES">
            <summary>
            Yes button.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.NO">
            <summary>
            No button.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.CLOSE">
            <summary>
            The window close button (X).
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.RUN">
            <summary>
            The run button of a File Download dialog (IE)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.SAVE">
            <summary>
            The save button of a File Download dialog (SaveFile for Firefox)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogButton.NOTSET">
            <summary>
            Not using the default dismiss buttons
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState">
            <summary>
            Different states the dialog can be set to.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState.NotActive">
            <summary>
            The dialog is not active
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState.ActivePendingHandling">
            <summary>
            The dialog was detected active and currently pending handling
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState.Handled">
            <summary>
            The dialog was handled
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState.InErrorTryAgain">
            <summary>
            The dialog should be handled, but if the window is still open we have an error
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.DialogCurrentState.InError">
            <summary>
            The dialog was not handled successfully
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog">
            <summary>
            Class to handle the logon dialog (username/password)
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.WIN7_IE_LOGONDIALOG_TITLE">
            <summary>
            Windows 7 uses a different logon dialog in IE
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.IE_LOGONDIALOG_TITLE">
            <summary>
            IE's window title.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.OK_BUTTON_TITLE">
            <summary>
            Dialog control title of OK button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.CANCEL_BUTTON_TITLE">
            <summary>
            Dialog control title of Cancel button
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.SYSCREDENTIAL_ID">
            <summary>
            Dialog control ID of the SysCredential window of an IE logon dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.USER_FIELD_ID">
            <summary>
            Dialog control ID of the User Name combobox of an IE logon dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.PASSWORD_FIELD_ID">
            <summary>
            Dialog control ID of the Password window of an IE logon dialog
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog._userName">
            <summary>
            The user name to set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog._password">
            <summary>
            The password to set.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog._handlePerformer">
            <summary>
            Handle performer
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.#ctor(ArtOfTest.WebAii.Core.Browser,System.String,System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new LogonDialog handler.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss this dialog.</param>
            <param name="userName">The username to set.</param>
            <param name="password">The password to set.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.CreateLogonDialog(ArtOfTest.WebAii.Core.Browser,System.String,System.String,ArtOfTest.WebAii.Win32.Dialogs.DialogButton)">
            <summary>
            Create a new LogonDialog handler.
            </summary>
            <param name="parentBrowser">The parent browser.</param>
            <param name="dismissButton">The button to use to dismiss this dialog.</param>
            <param name="userName">The username to set.</param>
            <param name="password">The password to set.</param>
            <returns>A new LogonDialog handler</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.UserName">
            <summary>
            Gets/Sets UserName
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.Password">
            <summary>
            Gets/Sets Password
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.IsDialogActive(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Whether this dialog is active or not.
            </summary>
            <param name="dialogs">The list of dialogs to check.</param>
            <returns>True/False whether this dialog is active or not.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Dialogs.LogonDialog.Handle">
            <summary>
            Handle this dialog.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.UIADispatcherProvider">
            <summary>
            Provides common dispatcher for UIA operations.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.UIADispatcherProvider.Dispatcher">
            <summary>
            Get common dispatcher for UIA operations.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.UIADispatcherProvider.ClearDispatcher">
            <summary>
            Clear common dispatcher for UIA operations.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.VisualMouseProxy.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.VisualMouseProxy.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.VisualMouseProxy.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.OSInformation">
            <summary>
            Provides detailed information about the host operating system.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.OSInformation.UserDefaultBrowser">
            <summary>
            Gets the logged in user default browser.
            </summary>
            <value>The system default browser.</value>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.INPUT">
            <summary>
            Input structure for SendInput API
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Input">
            <summary>
            The main input structure
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.KEYBDINPUT">
            <summary>
            Keyboard input structure
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.HARDWAREINPUT">
            <summary>
            Hardware input structure
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.MOUSEINPUT">
            <summary>
            Mouse input structure
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.SendInput(System.UInt32,ArtOfTest.WebAii.Win32.Input[],System.UInt32)">
            <summary>
            SendInput API
            </summary>
            <param name="nInputs">Number of input arrays in 'pInputs'</param>
            <param name="pInputs">The inputs array to be used</param>
            <param name="cbSize">Size of the input array</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.VkKeyScan(System.Char)">
            <summary>
            Converts a character to a virtual key code based on the current keyboard layout (may not be the right keyboard layout to use)
            </summary>
            <param name="ch">The character to convert</param>
            <returns>A short containing the virtual key code corresponding to the ch parameter</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.VkKeyScanEx(System.Char,System.IntPtr)">
            <summary>
            Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.
            </summary>
            <param name="ch">Specifies the character to be translated into a virtual-key code.</param>
            <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the LoadKeyboardLayout function.</param>
            <returns>The low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
            Retrieves the handle to a control in the specified dialog box.
            </summary>
            <param name="hWnd">Handle to the dialog box that contains the control.</param>
            <param name="nIDDlgItem">Specifies the identifier of the control to be retrieved.</param>
            <returns>The window handle of the specified control indicates success.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.SetDlgItemText(System.IntPtr,System.Int32,System.String)">
            <summary>
            Sets the title or text of a control in a dialog box.
            </summary>
            <param name="hDlg">Handle to the dialog box that contains the control.</param>
            <param name="nIDDlgItem">Identifies the control with a title or text that is to be set.</param>
            <param name="lpString">String that contains the text to be copied to the control.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.GetLastWin32Error">
            <summary>
            Retrieves the last Win32 error.
            </summary>
            <returns>The last recorded Win32 error.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32NativeMethods.SendInputInternal(ArtOfTest.WebAii.Win32.Input[])">
            <summary>
            Sends the input through the Win32 API and verifies the output
            </summary>
            <param name="inputData">The input structure</param>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Win32Error">
            <summary>
            Static class used to retrieve last error strings from Win32 calls.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Win32Error._lastErrorString">
            <summary>
            The last error string
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Win32Error.LastErrorString">
            <summary>
            Gets/Sets last error string
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Win32Error.SetLastWin32Error">
            <summary>
            Set the formatted  Win32Error string.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.KeyBoard">
            <summary>
            Keyboard events class.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.KeyBoard._desktop">
            <summary>
            Owner desktop object. 
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.#ctor(ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create a new keyboard object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.SendString(System.String)">
            <summary>
            Sends an unmodified string to the active application using SendKeys
            </summary>
            <param name="text">The string to send</param>
            <remarks>This method uses the System.Windows.Forms.SendKeys.SendWait() method which is not reliable in some cases.
            You can use the TypeText and KeyPress for a more reliable key typing simulation</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.SendPreservedString(System.String)">
            <summary>
            Sends a string to the active application using SendKeys,
            but only after converting each escapable character to its escaped representation.
            This will prevent it from being misinterpreted.
            </summary>
            <param name="text">The string to send</param>
            <remarks>This method uses the System.Windows.Forms.SendKeys.SendWait() method which is not reliable in some cases.
            You can use the TypeText and KeyPress for a more reliable key typing simulation</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.TypeText(System.String,System.Int32)">
            <summary>
            Types text one character at a time with a specific type speed. This function does not 
            support special keywords (i.e {TAB}, {SPACE}) or special characters like ^,+..etc. to simulate special keys 
            use KeyPress if you want to send special characters like Ctrl/Shift..etc.
            </summary>
            <param name="text">The text to type</param>
            <param name="keyPressTime">The delay time between key presses.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.TypeText(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Types text one character at a time with a specific type speed. This function does not 
            support special keywords (i.e {TAB}, {SPACE}) or special characters like ^,+..etc. to simulate special keys 
            use KeyPress if you want to send special characters like Ctrl/Shift..etc.
            </summary>
            <param name="text">The text to type</param>
            <param name="delayBetweenKeypresses">The delay time between key presses.</param>
            <param name="keyHoldTime">The delay between pressing and releasing a key</param>
            <param name="supportUnicode">
            Whether to support Unicode input in this call. By default, supportUnicode is true.
            See remarks regarding keyboard events and Unicode input.
            </param>
            <remarks>
            When Unicode support is enabled, KeyDown and KeyUp events are not fired by target controls.
            If KeyDown and KeyUp events are required, you must call TypeText with supportUnicode = false.
            </remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.TypeText(System.String,System.Int32,System.Int32)">
            <summary>
            Types text one character at a time with a specific type speed. This function does not 
            support special keywords (i.e {TAB}, {SPACE}) or special characters like ^,+..etc. to simulate special keys 
            use KeyPress if you want to send special characters like Ctrl/Shift..etc.
            </summary>
            <param name="text">The text to type</param>
            <param name="delayBetweenKeypresses">The delay time between key presses.</param>
            <param name="keyHoldTime">The delay between pressing and releasing a key</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.UnicodeKeyDown(System.Int16,System.Boolean)">
            <summary>
            Simulates a key down. (Press-Hold)
            </summary>
            <param name="code">The key code</param>
            <param name="delay">Whether to wait a delay period after sending the keydown before returning from the call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.UnicodeKeyUp(System.Int16,System.Boolean)">
            <summary>
            Simulates a key up. (Key-Release)
            </summary>
            <param name="code">The key code</param>
            <param name="delay">Whether to wait a delay period after sennding the keyup before returning from the call</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.UnicodeKeyPress(System.Int16,System.Int32)">
            <summary>
            Simulates a keyboard key press with a hold delay.
            </summary>
            <param name="code">The key code</param>
            <param name="holdFor">The length of the key hold in msec.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.InitializeUnicodeKeyBoardEvent(ArtOfTest.WebAii.Win32.Input@,System.Int16,System.Boolean)">
            <summary>
            Initialize Unicode keyboard events
            </summary>
            <param name="inputEvent"></param>
            <param name="key"></param>
            <param name="down"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyDown(System.Windows.Forms.Keys)">
            <summary>
            Simulates a key down. (Press-Hold)
            </summary>
            <param name="key">The key code</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyUp(System.Windows.Forms.Keys)">
            <summary>
            Simulates a key up. (Key-Release)
            </summary>
            <param name="key">The key code.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyDown(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Simulates a key down. (Press-Hold)
            </summary>
            <param name="code">The key code</param>
            <param name="delay">Whether or not to delay after sending the KeyDown event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyUp(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Simulates a key up. (Key-Release)
            </summary>
            <param name="code">The key code to send for the KeyUp event.</param>
            <param name="delay">Whether or not to delay after sending the KeyUp event.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyPress(System.Windows.Forms.Keys)">
            <summary>
            Simulates a keyboard key press (down/up).
            </summary>
            <param name="code">The key code</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyPress(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Simulates a keyboard key press with a hold delay
            </summary>
            <param name="code">The key code for the key to press.</param>
            <param name="holdFor">How long to hold the key down, in milliseconds.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeyPress(System.Windows.Forms.Keys,System.Int32,System.Int32)">
            <summary>
            Repeat a set of key presses x number of times
            </summary>
            <param name="code">The key code</param>
            <param name="holdFor">Hold it for (msec)</param>
            <param name="repeatCount">The number of time to repeat it</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.TypeTextNU(System.String,System.Int32,System.Int32)">
            <summary>
            Types text one character at a time with a specific type speed. This function does not 
            support special keywords (i.e {TAB}, {SPACE}) or special characters like ^,+..etc. to simulate special keys 
            use SendString if you want to send special characters like Ctrl/Shift..etc.
            </summary>
            <param name="text">The text to type</param>
            <param name="keyPressTime">The delay time between key presses.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.KeysFromString(System.String)">
            <summary>
            Converts a key combination i.e CTRL+R or SHIFT+CTRL+R to
            a System.Windows.Keys value
            </summary>
            <param name="keyCombination">The key combination to translate</param>
            <returns>The Keys value or Keys.None if it can't convert it</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.KeyBoard.DoKeyPressDelay">
            <summary>
            Perform the processing delay.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.KeyBoard.KeyDownDelay">
            <summary>
            The amount of time a key is held down for during simulated typing
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Mouse">
            <summary>
            Mouse events class.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Win32.Mouse.MOUSEEVENTF">
            <summary>
            Mouse input event types
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Mouse._mouseMoveIntervalTime">
            <summary>
            The default interval time.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Mouse._desktop">
            <summary>
            The owner desktop object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Mouse.CLICK_DELAY">
            <summary>
            Default number of ms to hold the mouse down for when we click
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.#ctor(ArtOfTest.WebAii.Core.Desktop)">
            <summary>
            Create a new Mouse object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Mouse.FreezeModeClientX">
            <summary>
            Used for coordinate identification while in freeze mode
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Win32.Mouse.FreezeMode">
            <summary>
            Identifies when to use the actual mouse coordinates versus the freeze mode values
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Win32.Mouse.MouseMoveIntervalTime">
            <summary>
            Gets/Sets the mouse interval time between mouse move intervals.
            The default is set at 15msec. Typically you don't need to change this.
            If you want to configure the speed of the mouse move, use the Settings.SimulatedMouseMoveSpeed.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.TurnWheel(System.Int32,ArtOfTest.WebAii.Core.MouseWheelTurnDirection)">
            <summary>
            Move the mouse wheel by a certain delta
            </summary>
            <param name="delta">The delta to use.</param>
            <param name="direction">The direction to turn the mouse wheel in.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse event.
            </summary>
            <param name="clickType">The type of the click mouse to simulate.</param>
            <param name="x">Absolute X coordinate to click on.</param>
            <param name="y">Absolute Y coordinate to click on.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse event.
            </summary>
            <param name="clickType">The type of the click mouse to simulate.</param>
            <param name="x">Absolute X coordinate to click on.</param>
            <param name="y">Absolute Y coordinate to click on.</param>
            <param name="wheelDelta">If a Wheel click then the wheel's turn delta, else ignored</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Point)">
            <summary>
            Simulate a mouse event (Target as a point object)
            </summary>
            <param name="clickType">The type of the click mouse to simulate.</param>
            <param name="pointToClick">The point to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Rectangle)">
            <summary>
            Simulate a mouse event (Target a rectangle). Will click absolute center of target rectangle.
            </summary>
            <param name="clickType">The type of the click mouse to simulate.</param>
            <param name="target">The target rectangle to click the center for.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Click(ArtOfTest.WebAii.Core.MouseClickType,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Simulate a mouse event (Target as a rectangle with offset)
            </summary>
            <param name="clickType">The type of the click mouse to simulate.</param>
            <param name="target">The target rectangle.</param>
            <param name="offset">The offset in X/Y (negatives represents opposite direction).
            <remarks>
                For offset:
                Positive X : Represents the right direction.
                Negative X : Represents the left direction.
                Positive Y : Represents the down direction.
                Negative Y : Represents the up direction.
            
            Keep these in mind when calculating the offset from a reference point.
            </remarks>
            </param>
            <param name="reference">The reference point to offset within the rectangle.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.HoverOver(System.Int32,System.Int32)">
            <summary>
            Simulates a mouse hover over. Simply moves the mouse pointer over the X,Y passed in. 
            Can also be used to move the mouse to a certain location.
            </summary>
            <param name="x">Absolute X coordinate to click.</param>
            <param name="y">Absolute Y coordinate to click.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.HoverOver(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Simulates a mouse hover over.  Simply moves the mouse pointer over the X, Y passed in.
            Can also be used to move the mouse to a certain location.
            </summary>
            <param name="x">Absolute X coordinate to click.</param>
            <param name="y">Absolute Y coordinate to click.</param>
            <param name="useExecutionDelay">Whether to wait the execution delay after moving the mouse cursor</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.HoverOver(System.Drawing.Point)">
            <summary>
            HoverOver (Target a point).
            </summary>
            <param name="pointToHoverOver">Point to hover over.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.HoverOver(System.Drawing.Rectangle)">
            <summary>
            Hover over (Target the center of the target rectangle).
            </summary>
            <param name="target">The target rectangle.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.HoverOver(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Hover over (Target is a rectangle with an offset).
            </summary>
            <param name="target">The target rectangle.</param>
            <param name="offset">The offset in X/Y (negatives represents opposite direction).</param>
            <param name="reference">The reference point to offset within the rectangle.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startX">Move start X position.</param>
            <param name="startY">Move start Y position.</param>
            <param name="endX">Move end X position.</param>
            <param name="endY">Move end Y position.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startX">Move start X position.</param>
            <param name="startY">Move start Y position.</param>
            <param name="endX">Move end X position.</param>
            <param name="endY">Move end Y position.</param>
            <param name="intervals">Number of intervals for this Move operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="start">Move start point.</param>
            <param name="end">Move end point.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="start">Move start point.</param>
            <param name="end">Move end point.</param>
            <param name="intervals">Number of intervals for this Move operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startTarget">Move start rectangle.</param>
            <param name="startOffset">Move start offset.</param>
            <param name="startReference">Move start offsetReference</param>
            <param name="endTarget">Move end rectangle.</param>
            <param name="endOffset">Move end offset.</param>
            <param name="endReference">Move end offsetReference.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startTarget">Move start rectangle.</param>
            <param name="startOffset">Move start offset.</param>
            <param name="startReference">Move start offsetReference</param>
            <param name="endTarget">Move end rectangle.</param>
            <param name="endOffset">Move end offset.</param>
            <param name="endReference">Move end offsetReference.</param>
            <param name="intervals">Number of intervals for this Move operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startTarget">Move start rectangle.</param>
            <param name="startOffsetX">Move start offset x.</param>
            <param name="startOffsetY">Move start offset y.</param>
            <param name="startReference">Move start offsetReference</param>
            <param name="endTarget">Move end rectangle.</param>
            <param name="endOffsetX">Move end offset x.</param>
            <param name="endOffsetY">Move end offset y.</param>
            <param name="endReference">Move end offsetReference.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="startTarget">Move start rectangle.</param>
            <param name="startOffsetX">Move start offset x.</param>
            <param name="startOffsetY">Move start offset y.</param>
            <param name="startReference">Move start offsetReference</param>
            <param name="endTarget">Move end rectangle.</param>
            <param name="endOffsetX">Move end offset x.</param>
            <param name="endOffsetY">Move end offset y.</param>
            <param name="endReference">Move end offsetReference.</param>
            <param name="intervals">Number of intervals for this Move operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="start">start point of the move.</param>
            <param name="end">end point of the move</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.Move(System.Drawing.Point,System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Move the mouse from the start to the end location
            </summary>
            <param name="start">start point of the move.</param>
            <param name="end">end point of the move</param>
            <param name="intervals">Number of intervals for this Move operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DetectHotSpot(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.Int32)">
            <summary>
            Given a rectangle and optionally a cursor, this 
            function will detect the cursor change
            </summary>
            <param name="rectangle">The rectangle to you to detect the host spot within.</param>
            <param name="hotSpotCursor">The cursor that the hot spot will be. If null, the function will
            assume a hot spot if the cursor simple changes.</param>
            <param name="radius">The number of pixels from the center point to scan.</param>
            <returns>The actual point the ended up activating the cursor change.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.BuildPointList(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Given a rectangle, we will build a list of points
            within that rectangle to check hot spot within.
            </summary>
            <param name="area">The rectangle to build a list of points starting at the center.</param>
            <param name="range">How much area to cover from the center. This may be less than the total area of the rectangle.</param>
            <returns>The points list</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.MatchCursor(System.IntPtr)">
            <summary>
            Tests whether or not the current mouse handle matches a specified handle.
            Can be used to check if the current mouse cursor is a particular value.
            </summary>
            <param name="handle">The mouse handle to compare.</param>
            <returns>True/False indicating whether or not the current mouse cursor handle matches.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetCursorHandle">
            <summary>
            Get the current cursor handle
            </summary>
            <returns>The cursor handle.</returns>
            <remarks>System.Windows.Forms.Cursor.Handle does not work. Seems like it is
            always cached.</remarks>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Simulates a mouse drag and drop.
            </summary>
            <param name="startX">Absolute X coordinate to start the drag.</param>
            <param name="startY">Absolute Y coordinate to start the drag.</param>
            <param name="endX">Absolute X coordinate to do the drop.</param>
            <param name="endY">Absolute Y coordinate to do the drop.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Simulate a mouse drag and drop. (Uses center point of each rectangle)
            </summary>
            <param name="start">Start target.</param>
            <param name="end">End target.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="startTarget">The start rectangle.</param>
            <param name="startOffset">The start offset.</param>
            <param name="startReference">The start offset reference.</param>
            <param name="endTarget">The end rectangle.</param>
            <param name="endOffset">The end offset.</param>
            <param name="endReference">The end offset reference.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="startTarget">The start rectangle.</param>
            <param name="startOffsetX">The x start offset.</param>
            <param name="startOffsetY">The y start offset.</param>
            <param name="startReference">The start offset reference.</param>
            <param name="endTarget">The end rectangle.</param>
            <param name="endOffsetX">The x end offset.</param>
            <param name="endOffsetY">The y end offset.</param>
            <param name="endReference">The end offset reference.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="start">The start drag point.</param>
            <param name="end">The end drop point.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Simulates a mouse drag and drop.
            </summary>
            <param name="startX">Absolute X coordinate to start the drag.</param>
            <param name="startY">Absolute Y coordinate to start the drag.</param>
            <param name="endX">Absolute X coordinate to do the drop.</param>
            <param name="endY">Absolute Y coordinate to do the drop.</param>
            <param name="intervals">Number of intervals for this DragDrop operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Point,System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="start">The start drag point.</param>
            <param name="end">The end drop point.</param>
            <param name="intervals">Number of intervals for this dragdrop operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse drag and drop. (Uses center point of each rectangle)
            </summary>
            <param name="startTarget">Start target.</param>
            <param name="endTarget">End target.</param>
            <param name="intervals">Number of intervals for this dragdrop operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="startTarget">The start rectangle.</param>
            <param name="startOffset">The start offset.</param>
            <param name="startReference">The start offset reference.</param>
            <param name="endTarget">The end rectangle.</param>
            <param name="endOffset">The end offset.</param>
            <param name="endReference">The end offset reference.</param>
            <param name="intervals">Number of intervals for this dragdrop operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.DragDrop(System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Int32,System.Int32,ArtOfTest.Common.OffsetReference,System.Int32,System.Int32)">
            <summary>
            Simulate a mouse drag and drop.
            </summary>
            <param name="startTarget">The start rectangle.</param>
            <param name="startOffsetX">The x start offset.</param>
            <param name="startOffsetY">The y start offset.</param>
            <param name="startReference">The start offset reference.</param>
            <param name="endTarget">The end rectangle.</param>
            <param name="endOffsetX">The x end offset.</param>
            <param name="endOffsetY">The y end offset.</param>
            <param name="endReference">The end offset reference.</param>
            <param name="intervals">Number of intervals for this dragdrop operation.</param>
            <param name="intervalDelay">The delay in msec. between each interval.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetDistance(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the number of mouse move intervals depending on the current set speed and interval time.
            Any negative coordinates will be reset to zero automatically.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetRelativeNumOfMouseMoveIntervals(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Gets the number of mouse move intervals depending on the current set speed and interval time.
            Uses the absolute centers of passed in rectangles.
            </summary>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <returns>The number of intervals</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetRelativeNumOfMouseMoveIntervals(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference,System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Returns the relative number of mouse move intervals given a start/end locations.
            </summary>
            <param name="startTarget">Start rectangle.</param>
            <param name="startOffset">Start offset.</param>
            <param name="startReference">Start offset reference.</param>
            <param name="endTarget">End rectangle.</param>
            <param name="endOffset">End offset.</param>
            <param name="endReference">End offset reference.</param>
            <returns>The number of intervals</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetRelativeNumOfMouseMoveIntervals(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets the number of mouse move intervals depending on the current set speed and interval time.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
            <returns>return the number of intervals</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.GetRelativeNumOfMouseMoveIntervals(System.Int32)">
            <summary>
            Gets the number of mouse move intervals depending on the current set speed and interval time.
            DistanceInPixels(pixels) = NumOfIntervals(const) * IntervalTime(msec) * Speed(pixels/msec)
            </summary>
            <param name="distanceInPixels">The distance in pixels.</param>
            <returns>The number of intervals.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.CalculateOffset(System.Drawing.Rectangle,System.Drawing.Point,ArtOfTest.Common.OffsetReference)">
            <summary>
            Calculates the offset from the rectangles given a reference.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="offset">The offset.</param>
            <param name="reference">The offset reference type.</param>
            <returns>The adjusted point.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.InitializeMouseEvent(ArtOfTest.WebAii.Win32.Input@,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes an input structure.
            </summary>
            <param name="inputEvent">The event structure to initialize.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="flag">Event flag.</param>
            <param name="absoluteMove">Whether the mouse event is using absolute coordinates</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.AdjustXYToScreen(System.Int32,System.Int32)">
            <summary>
            Adjusts the coordinates to the current screen resolution.
            </summary>
            <param name="x">The X coordinate to adjust.</param>
            <param name="y">The Y coordinate to adjust.</param>
            <returns>A point object that is the adjusted coordinate.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Win32.Mouse.ValidateNonNegativePoint(System.Drawing.Point@)">
            <summary>
            Validate that the specified point coordinates is non-negative.
            If it is negative, it will be reset to zero.
            </summary>
            <param name="point">The point to validate.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication">
            <summary>
            Represents an ASP.NET Hosted Application
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._appId">
            <summary>
            Application ID
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._current">
            <summary>
            The current application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.Current">
            <summary>
            Return current AspNetApplication object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._host">
            <summary>
            The host object that is hosting this application domain.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._virtualPath">
            <summary>
            The virtual path for this application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._physicalPath">
            <summary>
            The physical path for this application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._lastResponse">
            <summary>
            Last response processed by the application.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication._lastRequest">
            <summary>
            Last request processed by the application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.LastRequest">
            <summary>
            Last request processed by this application
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.LastResponse">
            <summary>
            Last response processed by this application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.IsHostRegistered">
            <summary>
            The host object hosting this application object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.#ctor(System.String,System.String)">
            <summary>
            Create a new Asp.Net application.
            </summary>
            <param name="virtualPath">virtual path.</param>
            <param name="physicalPath">physical path.</param>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.ProcessRequest(ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest)">
            <summary>
            Process a Request
            </summary>
            <param name="request">The request object.</param>
            <returns>The response object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.ProcessRequest(System.String)">
            <summary>
            Process a request.
            </summary>
            <param name="requestPath">The request path.</param>
            <returns>The response object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.ProcessRequest(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Byte[],System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Byte[]@)">
            <summary>
            Process a request
            </summary>
            <param name="requestFilePath">The file to process.</param>
            <param name="requestPathInfo">The path to file.</param>
            <param name="requestQueryString">Any query strings/</param>
            <param name="requestMethod">Request method.</param>
            <param name="requestHeaders">Any request headers.</param>
            <param name="requestBody">The request body.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="responseBody">The response body.</param>
            <returns>The response status code.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.GetHost">
            <summary>
            Get the Asp.Net host of this application.
            </summary>
            <returns>The host. If null, create one.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.Create(ArtOfTest.WebAii.Core.Settings)">
            <summary>
            Create a new AspNetApplication
            </summary>
            <param name="settings">Settings to use.</param>
            <returns>The newly created application</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.CreateWorkerAppDomainWithHost(System.String,System.String,System.Type)">
            <summary>
            Create an app domain so we can load the application in.
            </summary>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="hostType"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.HostStopped">
            <summary>
            Set the host to null.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.End">
            <summary>
            End the AspNet host application.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication.InitializeLifetimeService">
            <summary>
            Object will live for ever.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm">
            <summary>
            Class representing an asp.net form. <![CDATA[ <form id="foo" runat="server" > </form>]]>
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm._method">
            <summary>
            The form method
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm._action">
            <summary>
            The form action
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.#ctor(System.String,ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Create a new form
            </summary>
            <param name="requestVirtualPath">The request virtual path.</param>
            <param name="htmlForm">The html form element</param>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.Method">
            <summary>
            Gets/Sets the form method.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.Action">
            <summary>
            Gets/Sets the form action.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.GenerateFormPostRequest">
            <summary>
            Craft an AspNetRequest to process given this form's fields.
            </summary>
            <returns>The AspNetRequest object.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.GenerateFormDataAsString">
            <summary>
            Generate the form data as a string for GET requests.
            </summary>
            <returns>Return the form data as a string.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.RetrieveFormFields(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Populates this form's fields given the form element
            </summary>
            <param name="node">The form element</param>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.AddFormField(ArtOfTest.WebAii.ObjectModel.Element)">
            <summary>
            Add a form field.
            </summary>
            <param name="node">The node to add.</param>
            <returns>True/False whether the node is a form field.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetForm.AddFieldValue(ArtOfTest.WebAii.ObjectModel.Element,System.String)">
            <summary>
            Add a field value.
            </summary>
            <param name="node">The node to add.</param>
            <param name="fieldValue">The field value.</param>
        </member>
        <member name="T:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost">
            <summary>
            Asp.Net Runtime Hosting Object.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost._virtualPath">
            <summary>
            The virtual path of this host
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost._physicalPath">
            <summary>
            The physical path of this host
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost._app">
            <summary>
            The Asp.Net Application hosted by this host
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost.#ctor">
            <summary>
            Create the host. Register it with the hosting enviroment.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost.InitializeLifetimeService">
            <summary>
            Object lives forever.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost.System#Web#Hosting#IRegisteredObject#Stop(System.Boolean)">
            <summary>
            Stop this host and unregister it.
            </summary>
            <param name="immediate"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost.Configure(ArtOfTest.WebAii.WebServers.AspNetHost.AspNetApplication,System.String,System.String)">
            <summary>
            Configure this application with host.
            </summary>
            <param name="app"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetHost.ProcessRequest(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Byte[],System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.Byte[]@)">
            <summary>
            Process a request
            </summary>
            <param name="requestFilePath"></param>
            <param name="requestPathInfo"></param>
            <param name="requestQueryString"></param>
            <param name="requestMethod"></param>
            <param name="requestHeaders"></param>
            <param name="requestBody"></param>
            <param name="responseHeaders"></param>
            <param name="responseBody"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest">
            <summary>
            Represents an Asp.Net Request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._filePath">
            <summary>
            The file path of this request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._pathInfo">
            <summary>
            The path information of this request
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._queryString">
            <summary>
            Query String.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._method">
            <summary>
            Request method
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._headers">
            <summary>
            Headers
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._body">
            <summary>
            Body
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest._fullRequestUrl">
            <summary>
            The full request Url
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Byte[])">
            <summary>
            Create a new request
            </summary>
            <param name="requestFilePath">Full request url.</param>
            <param name="requestPathInfo"></param>
            <param name="requestQueryString"></param>
            <param name="requestMethod"></param>
            <param name="requestHeaders"></param>
            <param name="requestBody"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.#ctor(System.String)">
            <summary>
            Create a new request
            </summary>
            <param name="requestPath">The request path.</param>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.FullRequestUrl">
            <summary>
            Gets the full request url as passed in to this request object.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.FilePath">
            <summary>
            Gets the file path portion only of the request without any query strings.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.PathInfo">
            <summary>
            Gets the Path info.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.QueryString">
            <summary>
            Gets the query string.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.Method">
            <summary>
            Gets the request method
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetRequest.Body">
            <summary>
            Gets the body.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse">
            <summary>
            Asp.Net Response object.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.#ctor(System.String,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="requestVirtualPath"></param>
            <param name="status"></param>
            <param name="headers"></param>
            <param name="body"></param>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.Status">
            <summary>
            Gets the response status.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.Headers">
            <summary>
            Gets the response headers.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.Body">
            <summary>
            Gets the response body as a byte array.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.BodyAsString">
            <summary>
            Gets the response body as a string.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.WebServers.AspNetHost.AspNetResponse.ToEntireResponseString">
            <summary>
            Returns the entire response as a string including headers, status and body.
            </summary>
            <returns>The entire response string.</returns>
        </member>
        <member name="T:ArtOfTest.WebAii.Wpf.WpfAppSnoop">
            <summary>
            Used as a HWND_MESSAGE window (message-only).
            AoT.Connector sends messages back to this window to relay information about Wpf apps.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Wpf.WpfProxy">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the real rectangle of an elements
            </summary>
            <param name="peer"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.GetRectangle(ArtOfTest.WebAii.Silverlight.IAutomationPeer,ArtOfTest.WebAii.Silverlight.IAutomationPeer)">
            <summary>
            Get the rectangle of one element relative to another
            </summary>
            <param name="peer"></param>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.PublishKnownControlTypes(System.Collections.Generic.List{System.String})">
            <summary>
            Publish Known Control types
            </summary>
            <param name="knownTypes"></param>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.HitTest(System.Drawing.Point)">
            <summary>
            Gets a list of all FrameworkElements under the specified point
            </summary>
            <param name="p">The point to hit test</param>
            <returns>List of all elements under the point</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.HitTestLight(System.Int32,System.Int32)">
            <summary>
            Returns a string containing the uid and rectangle of the top element at the specified point in the application
            </summary>
            <param name="x">x-coordinate of the point</param>
            <param name="y">y-coordinate of the point</param>
            <returns>A string in the format (uid);(left);(top);(width);(height)</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.CreateCommand(ArtOfTest.WebAii.Silverlight.SilverlightCommand)">
            <summary>
            Create a browser command from the SilverlightCommand
            </summary>
            <param name="SlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.ExecuteSLCommand(ArtOfTest.WebAii.Silverlight.SilverlightCommand)">
            <summary>
            Push the command to the browser.
            </summary>
            <param name="cmd">The command to push</param>
            <returns>The command response</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfProxy.ParsePropertyList(System.String)">
            <summary>
            Parses the string we get from ClientServices.GetPropertyList() into a useable Property Name -> Type map
            </summary>
            <param name="toParse"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.#ctor(ArtOfTest.WebAii.Core.Manager,System.Int32,System.String)">
            <summary>
            Create a new WPF application wrapper
            </summary>
            <param name="manager">The Manager object that manages this application wrapper</param>
            <param name="pid">The process id of the application</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.GetWindow(System.String)">
            <summary>
            Given a window caption get the corresponding window object.
            </summary>
            <param name="caption">The full caption or partial caption of the window. (case-insensitive)</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.WaitForWindow(System.String)">
            <summary>
            Wait for a window to show up and be ready for automation.
            Uses the Settings.ClientReadyTimeout
            </summary>
            <param name="caption">The caption of the window</param>
            <returns>The window if found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.WaitForWindow(System.String,System.Int32)">
            <summary>
            Wait for a window to show up and be ready for automation 
            </summary>
            <param name="caption">The caption of the window</param>
            <param name="timeout">The timeout to wait in msec.</param>
            <returns>The window if found.</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.AddWindow(ArtOfTest.WebAii.Wpf.WpfWindow)">
            <summary>
            Adds a window to this application's window collection
            </summary>
            <param name="win">The window object to add</param>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfApplication.RemoveWindow(System.IntPtr)">
            <summary>
            Removes a window from this application's window collection
            </summary>
            <param name="hwnd">The window's handle</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.Windows">
            <summary>
            The application's collection of windows
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.Pid">
            <summary>
            The application's process id
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.AppFileName">
            <summary>
            Gets the application file name
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.QuitOnDetach">
            <summary>
            Whether to close all of this application's windows when the testing framework detaches
            from the application.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.DebugMode">
            <summary>
            Whether to open a trace listener output window.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Wpf.WpfApplication.Manager">
            <summary>
            The Manager object that owns this application
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Wpf.WpfCommand">
            <summary>
            This class is used for channel commands to WPF applications
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfUtils.GetInteropHandle(System.Windows.Interop.WindowInteropHelper)">
            <summary>
            Get the HWND for a WPF Window that may not have been shown yet
            </summary>
            <param name="interop">WindowInteropHelper for the WPF Window</param>
            <returns></returns>
        </member>
        <member name="E:ArtOfTest.WebAii.Wpf.WpfWindow.WindowClosed">
            <summary>
            This event is triggered when the wrapped window closes
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._hwnd">
            <summary>
            The window handle of the window this object wraps
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._clientId">
            <summary>
            String uniquely identifying the communication channel between this wrapper and the wrapped window
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._manager">
            <summary>
            Owning Manager
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._commProxy">
            <summary>
            Communication object
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._annotator">
            <summary>
            Annotator bound to the wrapped window
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._lazyLock">
            <summary>
            Lock object for lazy-initialized properties
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._desktop">
            <summary>
            Desktop object handle
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._window">
            <summary>
            Win32.Window wrapper for this window
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Wpf.WpfWindow._popupTrees">
            <summary>
            All open Popups' visual trees
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfWindow.LocateInHost(System.String[])">
            <summary>
            Locate an element in this host or any of the children of this host using an expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Wpf.WpfWindow.RefreshVisualTrees">
            <summary>
            Refreshes the main visual tree for the application as well as any open Popup visual trees.
            </summary>
        </member>
        <member name="T:ArtOfTest.WebAii.Xaml.VisualTreeHost">
            <summary>
            Abstraction for something that contains a visual tree root.  Silverlight applications and Popups.
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Xaml.VisualTreeHost._visualTree">
            <summary>
            Our visual tree
            </summary>
        </member>
        <member name="F:ArtOfTest.WebAii.Xaml.VisualTreeHost._ownerApp">
            <summary>
            The application containing the visual tree
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.#ctor">
            <summary>
            Base constructor used by SilverlightApp for its main visual tree
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.#ctor(ArtOfTest.WebAii.Silverlight.IApplication,ArtOfTest.WebAii.Silverlight.VisualTree)">
            <summary>
            Used for Popup visual trees
            </summary>
            <param name="ownerApp">The application containing the Popup</param>
            <param name="tree">Popup's VisualTree to wrap</param>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.OwnerApp">
            <summary>
            The SilverlightApp containing this visual tree
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.VisualTree">
            <summary>
            The visual tree wrapped by this host object
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.EnsureStateIsCurrent">
            <summary>
            Will force the VisualTree to Refresh. Identical to VisualTree.Refresh().
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.TechnologyType">
            <summary>
            VisualTreeHosts are only used for Silverlight
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.LocateInHost(System.String[])">
            <summary>
            Locate an element from the root of this host using an expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.UniqueId">
            <summary>
            A unique identifier that identifies this plugin instance.
            This id is updated only when the plug-in is reloaded on a postback or a browser refresh.
            </summary>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.StateHashCode">
            <summary>
            Gets a unique identifier that identifies the state of this host
            </summary>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.GetHostRoot">
            <summary>
            Returns the root target element of this host. VisualTree.Root
            </summary>
            <returns>The VisualTree.Root element</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.GetChildHosts">
            <summary>
            Get all contained hosts.
            </summary>
            <returns>Contained Hosts</returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.LocateAllInHost(System.String[])">
            <summary>
            Locate all in host. 
            </summary>
            <param name="expression">The expression to use.</param>
            <returns>The list of target elements</returns>
        </member>
        <member name="P:ArtOfTest.WebAii.Xaml.VisualTreeHost.FriendlyName">
            <summary>
            Returns a friendly name for this host
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.WebAii.Xaml.VisualTreeHost.UpdateInterHostLinks">
            <summary>
            Silverlight hosts have no inter-host links to update
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.AddProjectReference">
            <summary>
            Indicates to the designer to add a reference to this assembly when generating a code
            behind file.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.AddProjectReference.#ctor">
            <summary>
            Initializes a new instance of the AddProjectReference class
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.BackCompat.BackCompatFindType">
            <summary>
            
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.BackCompat.IFindParam">
            <summary>
            
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BackCompat.IFindParam.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BackCompat.IFindParam.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BackCompat.IFindParam.PartialAttributes">
            <summary>
            
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.BackCompat.IiAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BackCompat.IiAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BackCompat.IiAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.BaseDependencyLoader">
            <summary>
            The resopnsibility of this class is to ensure that the test studio binary directory is checked for
            dependent assemblies.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.CompareUtils">
            <summary>
            Class to provide the most commonly used comparison types the framework can incorporate into a test.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.StringCompare(System.String,System.String,ArtOfTest.Common.FindCompareType)">
            <summary>
            Perform a string comparison
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The string to compare to.</param>
            <param name="compareType">The comparison type.</param>
            <returns>True/False whether the comparison passed</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.NumberCompareRange(System.Int32,System.Int32,System.Int32,ArtOfTest.Common.NumberRangeCompareType)">
            <summary>
            Do numerical range comparison.
            </summary>
            <param name="number">The number to compare.</param>
            <param name="lowerEnd">The lower end of the range.</param>
            <param name="upperEnd">The upper end of the range.</param>
            <param name="compareType">The compare type.</param>
            <returns>True/False whether the comparison passed.</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.NumberCompare(System.Int32,System.Int32,ArtOfTest.Common.NumberCompareType)">
            <summary>
            Do numerical comparison
            </summary>
            <param name="leftPortion">Left side</param>
            <param name="rightPortion">Right side</param>
            <param name="compareType">The compare type.</param>
            <returns>True/False whether the compare passed</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.NumberCompare(System.Double,System.Double,ArtOfTest.Common.NumberCompareType)">
            <summary>
            Do numerical comparison
            </summary>
            <param name="leftPortion">Left side</param>
            <param name="rightPortion">Right side</param>
            <param name="compareType">The compare type.</param>
            <returns>True/False whether the compare passed</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.NumberCompare(System.Double,System.Double,ArtOfTest.Common.NumberCompareType,System.Double)">
            <summary>
            Do numerical comparison
            </summary>
            <param name="leftPortion">Left side</param>
            <param name="rightPortion">Right side</param>
            <param name="compareType">The compare type.</param>
            <param name="delta">How close the value must be to be accepted as a match.</param>
            <returns>True/False whether the compare passed</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.StringCompare(System.String,System.String,ArtOfTest.Common.StringCompareType)">
            <summary>
            Perform a string comparison
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The string to compare to.</param>
            <param name="compareType">The comparison type.</param>
            <returns>True/False whether the comparison passed</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.ImageCompare(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Performs a compare of two images and returns whether they are the same within a specific tolerance.
            </summary>
            <param name="imageA">The first image to compare</param>
            <param name="imageB">The second image to compare</param>
            <param name="selectionArea">An area within the image to compare. Pass in Rectangle.Empty if you want to compare the entire image</param>
            <param name="tolerance">The % tolerance of difference between the two images.</param>
            <returns>Returns true/false on whether the images match or not.</returns>
        </member>
        <member name="M:ArtOfTest.Common.CompareUtils.ImageExactCompare(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Validate whether two images are exactly the same.
            </summary>
            <param name="imageA">The first image to compare</param>
            <param name="imageB">The second image to compare</param>
            <returns>Whether the images match</returns>
        </member>
        <member name="T:ArtOfTest.Common.DispatcherFactory">
            <summary>
            Provides common dispatchers.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.DispatcherFactory.CreateDispatcher(System.String,System.Threading.ApartmentState)">
            <summary>
            Creates new dispatcher with specific thread name and apartment state.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Extensibility.CustomSilverlightTypesProviderAttribute">
            <summary>
            This attribute specifies that the assembly it decorates contains custom Silverlight type assemblies and specifies
            a type within the assembly that implements the ICustomSilverlightTypesProvider interface to provide a collection of
            custom Silverlight type assemblies.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Extensibility.CustomSilverlightTypesProviderAttribute.#ctor(System.Type)">
            <summary>
            Creates a new CustomSilverlightTypesProviderAttribute object.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:ArtOfTest.Common.Extensibility.CustomSilverlightTypesProviderAttribute.Provider">
            <summary>
            Gets the type of the object within the assembly that implements ICustomSilverlightTypesProvider.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Extensibility.ICustomSilverlightTypesProvider">
            <summary>
            Objects that implement this interface provide a collection of custom Silverlight type assemblies to load into the browser-side
            Silverlight extension for WebAii tests.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Extensibility.ICustomSilverlightTypesProvider.GetCustomSilverlightTypes">
            <summary>
            Gets a collection of custom Silverlight type assemblies to load into the browser-side Silverlight extension
            </summary>
            <returns>A collection mapping assembly names to their file contents.  These assemblies will be loaded into the Silverlight
            application that is to be recorded and automated.</returns>
        </member>
        <member name="T:ArtOfTest.Common.IAutomationHost">
            <summary>
            Implemented by automation hosts that contain ITargetElement.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.EnsureStateIsCurrent">
            <summary>
            Force the automation host to be up to date. (i.e. RefreshDomTree in Html)
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IAutomationHost.TechnologyType">
            <summary>
            Get the technology type of the host
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IAutomationHost.UniqueId">
            <summary>
            Returns a unique id that identifies this host
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IAutomationHost.StateHashCode">
            <summary>
            Returns a hashcode that uniquely identifies the current
            content state of this host.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.GetHostRoot">
            <summary>
            Return the root target element of this host.
            </summary>
            <returns>The root target element</returns>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.GetChildHosts">
            <summary>
            Return a list of child automation host that this host contains.
            </summary>
            <returns>An array of child hosts</returns>
        </member>
        <member name="P:ArtOfTest.Common.IAutomationHost.FriendlyName">
            <summary>
            A friendly name that represents this host.
            </summary>
            <returns>A friendly name that represents this host at its current state.</returns>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.UpdateInterHostLinks">
            <summary>
            Ensures that any links between hosts are up-to-date (Infrastructure use only)
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.Capture">
            <summary>
            Return a bitmap of the host
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.ValidateMouseLocation(System.Drawing.Point)">
            <summary>
            Validate the location of the mouse.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHost.SetWindowFocus">
            <summary>
            Makes the window containing this host active
            </summary>
            <returns>Whether we successfully set the window to active</returns>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHostState.GetStateAsString">
            <summary>
            Get the automation host state as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.IAutomationHostState.GetStateAsImage">
            <summary>
            Get the automation host state as an image
            </summary>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.Common.ISupportSearchHost">
            <summary>
            Implemented by hosts that support search
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ISupportSearchHost.LocateInHost(System.String[])">
            <summary>
            Find a target element from the root of this host.
            </summary>
            <param name="expression">The expression parameters to use.</param>
        </member>
        <member name="M:ArtOfTest.Common.ISupportSearchHost.LocateAllInHost(System.String[])">
            <summary>
            Find all target elements from the root of this host.
            </summary>
            <param name="expression">The expression to match</param>
            <returns>The list of matching elements</returns>
        </member>
        <member name="T:ArtOfTest.Common.ITargetElement">
            <summary>
            Represents a target element for a specific technology.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.Match(ArtOfTest.Common.IFindExpression)">
            <summary>
            Match this target element against an expression.
            </summary>
            <param name="findExpr">The FindExpression.</param>
            <returns>Returns true/false whether the expression matches.</returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.SetDepth(System.Int32)">
            <summary>
            Set the depth of this element.
            </summary>
            <param name="depth">The depth to set it to.</param>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.AddChildNode(ArtOfTest.Common.ITargetElement)">
            <summary>
            Add a child node to this element.
            </summary>
            <param name="child">The child node.</param>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.SetClosingTag(ArtOfTest.Common.ITargetElement)">
            <summary>
            Set the closing tag for this element.
            </summary>
            <param name="closingElement">The closing element</param>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetChildren">
            <summary>
            Get the children of this element.
            </summary>
            <returns>An array of the children of this element.</returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetParent">
            <summary>
            Gets the parent of this element.
            </summary>
            <returns>The parent of this element.</returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetHostParent">
            <summary>
            Gets the ITargetElement representing the host of this element in an outer container, if one exists.  For example,
            this will return an IFRAME element for a page contained within an IFRAME on another page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.SetParent(ArtOfTest.Common.ITargetElement)">
            <summary>
            Set the parent of this node.
            </summary>
            <param name="parent">The parent node.</param>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.Refresh">
            <summary>
            Ensure current state.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetUniqueHashCode">
            <summary>
            Returns a unique ID that identifies this target element.
            </summary>
            <returns>The unique ID</returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetRectangle">
            <summary>
            Return the rectangle of this element
            </summary>
            <returns>The rectangle of this element</returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.Capture">
            <summary>
            Return the visual representation of this element
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.ITargetElement.GetStringPresentation">
            <summary>
            Return a string representation of this element
            </summary>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.Common.ITargetElement.TechnologyType">
            <summary>
            Get the technology type of this element.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ITargetElement.Depth">
            <summary>
            Get the depth within the tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ITargetElement.IsTestRegion">
            <summary>
            Get whether this element is a test region or not
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ITargetElement.ParsedElement">
            <summary>
            Get the parsed element
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ITargetElement.Host">
            <summary>
            Get the automation host.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.TechnologyType">
            <summary>
            Technology type supported.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.TechnologyType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.TechnologyType.Html">
            <summary>
            Html
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.TechnologyType.Silverlight">
            <summary>
            Silverlight
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.TechnologyType.Wpf">
            <summary>
            Windows Presentation Framework
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.TechnologyType.Xaml">
            <summary>
            XAML-based technologies (WPF and Silverlight)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Histogram.histogramSize">
            <summary>
            Histogram size.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Histogram.graph">
            <summary>
            The histogram data.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Histogram.#ctor">
            <summary>
            Create the histogram data.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Histogram.#ctor(System.Double[])">
            <summary>
            Initialize a histogram it an initial value set.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:ArtOfTest.Common.Histogram.FromPixelMap(ArtOfTest.Common.PixelMap)">
            <summary>
            Build a histogram from the pixel map.
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Histogram.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Given a bitmap, returns its histogram.
            </summary>
            <param name="bitmap">The bitmap to use.</param>
            <returns>The histogram of the bitmap.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Histogram.Compare(ArtOfTest.Common.Histogram)">
            <summary>
            Compare two histograms and return the difference.
            This number represents the percent of pixels that different between the
            two histograms.
            </summary>
            <param name="histogramToCompare"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.Common.Histogram.Data">
            <summary>
            The data for the comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.PixelMap._pixels">
            <summary>
            Pixels representing the bitmap.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.PixelMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new pixel map.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ArtOfTest.Common.PixelMap.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Create a pixel map from a bitmap.
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.PixelMap.GetHistogram">
            <summary>
            Return the histogram of this image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.PixelMap.Compare(ArtOfTest.Common.PixelMap,System.Double)">
            <summary>
            Compare this map to another map and return whether they match within the 
            tolerance percent
            0 tolerance means they both need to be exact matches
            1% means we can tolerate 1% of the pixels being difference
            </summary>
            <param name="map"></param>
            <param name="tolerancePercent"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.PixelMap.AreExact(ArtOfTest.Common.PixelMap)">
            <summary>
            Whether two pixel maps are exactly the same.
            </summary>
            <param name="map">The other map.</param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.Common.PixelMap.Item(System.Int32,System.Int32)">
            <summary>
            Access the color of a pixel.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.Common.PixelMap.Width">
            <summary>
            The width of the map
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.PixelMap.Height">
            <summary>
            The height of the map
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.MUI.MUIDirectory">
            <summary>
            The current culture's MUI directory
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.MUI.GetString(System.String,System.Int32,System.String,System.Func{System.String,System.String})">
            <summary>
            Retreive a localized string from a DLL.
            </summary>
            <param name="module">The DLL which contains the string</param>
            <param name="Id">The resource Id of the string</param>
            <param name="defaultValue">If for any reason the localized string cannot be loaded, this default value will be used</param>
            <param name="func">An operation to perform on the string before returning it</param>
            <returns>The result of performing func on the localized string loaded from the DLL, or defaultValue</returns>
        </member>
        <member name="M:ArtOfTest.Common.MUI.GetString(System.String,System.Int32,System.String)">
            <summary>
            Retreive a localized string from a DLL.
            </summary>
            <param name="module">The DLL which contains the string</param>
            <param name="Id">The resource Id of the string</param>
            <param name="defaultValue">If for any reason the localized string cannot be loaded, this default value will be used</param>        
            <returns>The localized string loaded from the DLL, or defaultValue</returns>
        </member>
        <member name="M:ArtOfTest.Common.MUI.GetString(System.String,System.Int32)">
            <summary>
            Retreive a localized string from a DLL.
            </summary>
            <param name="module">The DLL which contains the string</param>
            <param name="Id">The resource Id of the string</param>        
            <returns>The localized string loaded from the DLL</returns>
        </member>
        <member name="T:ArtOfTest.Common.BaseTreeBuilder`1">
            <summary>
            This class builds the a strongly-typed 
            markup elements tree.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._parsedElements">
            <summary>
            The flat array of parsed element objects
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._root">
            <summary>
            The root element node
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._docType">
            <summary>
            The doctype element if present
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._currentNode">
            <summary>
            Used to indicate currnet parsing location
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._queue">
            <summary>
            Queue used for parsing
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._parser">
            <summary>
            The raw text parser
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._host">
            <summary>
            The owner browser of this DOM tree.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._openTagsOptionalClosing">
            <summary>
            The stack of openned tag elements, that don't have a
            closing tag but according to the parsing rules have
            optional closing tags
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.BaseTreeBuilder`1._depthCounter">
            <summary>
            The depth of the element within the tree.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.#ctor(ArtOfTest.Common.IAutomationHost)">
            <summary>
            Creates a new Dom tree builder.
            </summary>
            <param name="ownerHost">The host that owns the tree.</param>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.#ctor">
            <summary>
            Create a new Dom tree builder with browser being null.
            </summary>
            <remarks>When using this constructor all Element objects will have their OwnerBrowser properties to null
            Also Element.Refresh will throw a null exception. 
            This contructor is meant to be used by the designer only.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.BuildDomTree(System.String,System.Boolean)">
            <summary>
            Parse and build the Dom. This method will initialize the Root property with 
            the root element of the Dom.
            </summary>
            <param name="text">The text to build the tree for</param>
            <param name="trimWhiteSpace">Whether to trim the white spaces or not in the text between tags.</param>
            <returns>The root document element.</returns>
        </member>
        <member name="P:ArtOfTest.Common.BaseTreeBuilder`1.Host">
            <summary>
            Gets the owner Browser object of this Dom Tree.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BaseTreeBuilder`1.DocType">
            <summary>
            Gets the DOCTYPE element if present in the document. Otherwise null.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.BaseTreeBuilder`1.Root">
            <summary>
            Gets the root Element node. You can access the tree using this node.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.CreateNewElement(ArtOfTest.Common.ParsedElement,ArtOfTest.Common.IAutomationHost)">
            <summary>
            Called by the builder when a new element of type T needs
            to be created.
            </summary>
            <param name="parsedElement">The parsed element object.</param>
            <param name="host">The automation host object</param>
            <returns>The elmenet of Type T</returns>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.TestRegionDetected(`0)">
            <summary>
            Called by the builder when a TestRegion is detected.
            </summary>
            <param name="regionElement">The test region element.</param>
        </member>
        <member name="P:ArtOfTest.Common.BaseTreeBuilder`1.RecursiveContainerTags">
            <summary>
            Gets a list of tags for elements that can contain a host of the same type as the host containing the element.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.BuildTree">
            <summary>
            The main method that initializes the full tree object
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.BuildNode(`0,ArtOfTest.Common.ParsedElement)">
            <summary>
            Given an Element node and a RawElement, create the tree.
            </summary>
            <param name="rootNode">The root node to start the tree with.</param>
            <param name="rawElement">The corresponding root ParsedElement to use for parsing.</param>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.StartTagCloses(System.String,System.String)">
            <summary>
            Determines whether to close an open tag with an optional closing tag based on the new tag we're parsing
            </summary>
            <param name="startTag">The start tag we've just started parsing</param>
            <param name="stackTag">The optional-closing tag on top of the stack</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.HasMatchingClosingTag(ArtOfTest.Common.ParsedElement)">
            <summary>
            Finds matching closing tags (if any).
            </summary>
            <param name="element">The element to see if it has a closing tag.</param>
            <returns>True/False whether it has one.</returns>
        </member>
        <member name="M:ArtOfTest.Common.BaseTreeBuilder`1.IsMatchingClosingElement(`0,ArtOfTest.Common.ParsedElement)">
            <summary>
            Checks if a ParsedElement is the matching closing element of a BeginElement.
            </summary>
            <param name="beginElement">Begin Element.</param>
            <param name="endElement">End Element.</param>
            <returns>True/False whether the Being/End tags match.</returns>
        </member>
        <member name="T:ArtOfTest.Common.ITestRegion">
            <summary>
            A test region interface definition.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ITestRegion.Id">
            <summary>
            The ID of the test region.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.ParsedElement">
            <summary>
            Class that represents a markup element that is being parsed. This
            is the intermediate state between raw text of the mark-up and the fully
            parsed, strongly typed Element object that represents it
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.attributesPattern">
            <summary> 
            The regular expression to parse attributes for a certain markup element
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.tagPattern">
            <summary>
            Regex for parsing out a tag. Usually that is done in the parser but if you instantiate a ParsedElement directly, then 
            this object will do the parsing instead of the parser
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._type">
            <summary> The type of the element parsed </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._content">
            <summary> String content of the element </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._remainingString">
            <summary>
            RemainingString buffer that contains the attributes.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._isBeginTagParsed">
            <summary> Whether internal parsing has occurred or not </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._isBeginTag">
            <summary>Is Begin Tag </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._isEndTag">
            <summary>Is End Tag </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._isSelfClosing">
            <summary>Is Closing Tag </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._tagName">
            <summary> Tag name of this element if it is a valid markup elment </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._tagNameIndex">
            <summary> The tag index with similar name </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._absoluteTagIndex">
            <summary> The absolute tag index on the page</summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement._attributes">
            <summary> The list of attributes for this element </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.tagNameParserRegEx">
            <summary>
            Regex for parsing a tag Name and initializing _tagName and _remainingString
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.attributesRegEx">
            <summary>
            Regex to parse the attributes
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.DoubleQuote">
            <summary>
            Double Quote "
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElement.SingleQuote">
            <summary>
            Single Quote '
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.#ctor(ArtOfTest.Common.ParsedElementType,System.String,System.Boolean)">
            <summary>
            Create a new ParsedElement object.
            </summary>
            <param name="elementType">The type of element to create.</param>
            <param name="content">The raw content for the element.</param>
            <param name="validateIllegal">Whether to validate for illegal formats.</param>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.#ctor(ArtOfTest.Common.ParsedElementType,System.String,System.String,System.String)">
            <summary>
            Create a new ParsedElement object.
            </summary>
            <param name="elementType">The type of element to create.</param>
            <param name="content">The raw content for the element.</param>
            <param name="tagName">The tag name of the element.</param>
            <param name="remainder">The rest of the tag text except for the tag name.</param>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.Tag">
            <summary>
            A tag associated with this element
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.IsBeginTag">
            <summary>
            Gets whether the element is a begin tag or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.IsEndTag">
            <summary>
            Gets whether the element is an end tag or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.IsSelfClosing">
            <summary>
            Gets whether the element is a self closing tag (i.e. <![CDATA[ <font ... /> ]]>)
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.TagName">
            <summary>
            Gets the tagName of the element.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.Attributes">
            <summary>
            Gets the parsed attributes of the element.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.ParsingType">
            <summary>
            Gets the parsed element type.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.TagNameIndex">
            <summary>
            Gets the TagName index within the page. (Only valid tags are counted, no comments)
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsedElement.AbsoluteTagIndex">
            <summary>
            Gets the absolute tag index on the page. (Only Open/valid tags are counted, no comments)
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.ToString">
            <summary>
            The string representation of this element.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.ChangeTypeToOrphanedClosingTag">
            <summary>
            Allows for the type of the element to be changed to MisAligned end tag.
            This is done when the tree is built.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.SetTagIndices(System.Int32,System.Int32)">
            <summary>
            Set the tag indices.
            </summary>
            <param name="tagNameIndex">The tag index of similar name.</param>
            <param name="absoluteTagIndex">The absolute tag index on the page.</param>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.ValidateIllegalFormats">
            <summary>
            Validates some illegal formats of a tag that we should simply mark MalFormed.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.ParseTagName">
            <summary>
            Only parse the tagname while also initializing the remainingString to be used later to
            parse the attributes.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.ParseAttributes">
            <summary>
            Parse the attributes for this tag.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsedElement.CanIgnoreAttribute(System.String)">
            <summary>
            We will ignore certain attributes that are a result in how we construct the DOM string
            on the client side. 
            </summary>
            <param name="name">The name of the attribute to check if we can ignore.</param>
        </member>
        <member name="T:ArtOfTest.Common.Parser">
            <summary>
            Parser object that handles the core parsing of the markup text. 
            Produces an array of ParsedElements exposed as a public property
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.LessThan">
            <summary>
            Lessthan char
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.Bang">
            <summary>
            ! char
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.QuestionMark">
            <summary>
            ? char
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.DocTypePattern">
            <summary>
            Regex used to match a doctype
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.XmlDeclPattern">
            <summary>
            Regex used to match an XML declaration
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.ScriptTag">
            <summary>
            Regex used to match a script declaration
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.NoscriptTag">
            <summary>
            Regex used to match a noscript declaration. We want to skip the noscript content.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.IFrameTag">
            <summary>
            Regex used to match an iframe declaration. We want to skip the noframes content.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.XmlDataIslandTag">
            <summary>
            Regex used to match xml data elements (used by IE only).
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.CommentPattern">
            <summary>
            Regex used to match a comment
            </summary>        
        </member>
        <member name="F:ArtOfTest.Common.Parser.CommentTestRegionPattern">
            <summary>
            Regex used to match a test region comment
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.TagPattern">
            <summary>
            Regex used to match a tag
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._text">
            <summary>Holds the raw text to be parsed</summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._textLength">
            <summary>
            Holds the length of the string
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._currentPosition">
            <summary>The position of _currentChar</summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._initialParsedString">
            <summary>Holds the initial parsed string</summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._tagNameIndices">
            <summary> Hash table to keep track of the tags of similar type and their count </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._absoluteTagIndexCounter">
            <summary> Absolute tag count on the page (Open/Valid tags are counted only) </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._trimWhiteSpace">
            <summary> Ignores all Spaces/Tabs/NewLine characters trims them out. If set to true,
            the parser will include these are ParsedElement of type TextLiterals</summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._endTagsMap">
            <summary>
            End tag maps that helps look ahead on whether a certain tag has a corresponding closing tag
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser._supportCommentRegions">
            <summary>
            if true, will support comments as regions
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Parser.docTypeRegEx">
            <summary>
            Compiled regex for this instance of the parser
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.#cctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.#ctor">
            <summary>
            Create a new parser
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new Parser object.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="trimWhiteSpace">True/False whether to trim the whitespace or preserve it.</param>
        </member>
        <member name="P:ArtOfTest.Common.Parser.EndTagsMap">
            <summary>
            Gets the end tags map to help with markup fix up if needed.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Parser.ParsedElements">
            <summary>
            Gets the flat array of initially parsed elements of tags/literal text ..etc.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Parser.TrimWhiteSpace">
            <summary>
            Gets/Sets whether to trim white space during the parsing or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Parser.SupportCommentRegions">
            <summary>
            Gets/Sets whether the parser supports parsing regions that are comments.
            <![CDATA[
            For example:
            <!--testregion id="foo" --> ... <!--/testregion-->
            ]]>
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.Parse(System.String)">
            <summary>
            Do the parsing.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>An array of ParsedElement used for post processing.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Parser.Parse">
            <summary>
            Core method of this class that performs the actual parsing of the string
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.ParseBetweenTags(System.Int32)">
            <summary>
            Parse any text between tags.
            </summary>
            <param name="endPosition">The end position to parse to.</param>
        </member>
        <member name="M:ArtOfTest.Common.Parser.AddLiteralText(System.String)">
            <summary>
            Add a literal text to the parsed strings.
            </summary>
            <param name="text">The literal text to add.</param>
        </member>
        <member name="M:ArtOfTest.Common.Parser.SkipWhiteSpace">
            <summary>
            Skip all the white spaces.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Parser.MatchDocTypeAndComment(System.Int32,System.Int32@)">
            <summary>
            This function tries to match a comment/doctype at the StartPosition.
            </summary>
            <param name="startPosition">Location to start the match</param>
            <param name="length">The length of the match</param>
            <returns>-1 if no match, else the length of the matched string</returns>
        </member>
        <member name="M:ArtOfTest.Common.Parser.UpdateIndexes(ArtOfTest.Common.ParsedElement@)">
            <summary>
            Updates the global and internal indexes for this tag.
            </summary>
            <param name="element">the element to set the indices for</param>
        </member>
        <member name="M:ArtOfTest.Common.Parser.MarkEndTagMap(System.String,System.Int32)">
            <summary>
            Set a mark at Index that there is a closing tag of type TagName.
            </summary>
            <param name="tagName">The tagname for the closing tag.</param>
            <param name="index">Its sequential index.</param>
        </member>
        <member name="M:ArtOfTest.Common.Parser.GetNextTag(System.Int32,System.Int32@,System.String@,System.String@,System.String@)">
            <summary>
            Using the tag pattern, return the next tag at the StartPosition.
            </summary>
            <param name="startPosition">StartPosition to use to start the search</param>
            <param name="tagLength">Length of the tag</param>
            <param name="tagContent">The content of the tag</param>
            <param name="tagName">The tag name</param>
            <param name="tagRemainder">The remainder text of the tag without the tagname and brackets</param>
            <returns>The next tag position.</returns>
        </member>
        <member name="T:ArtOfTest.Common.EndTagRule">
            <summary>
            Html tag rules.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.ParsingRules">
            <summary>
            This class provides parsing rules for different markups. Currently it is used only for Html parsing rules
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsingRules._htmlTagsRules">
            <summary>
            Html tag rules.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.ParsingRules.#cctor">
            <summary>
            Initialize 
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.ParsingRules.HtmlTagsRules">
            <summary>
            Gets the Html tag rules
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.XmlGenerator.GetNodeAsXmlString(System.Boolean,System.Xml.XmlNode)">
            <summary>
            Given an XmlNode, will write it out as a string.
            </summary>
            <param name="indent">Whether to indent the string or not.</param>
            <param name="node">The node.</param>
            <returns>The xml string representation.</returns>
        </member>
        <member name="M:ArtOfTest.Common.XmlGenerator.GetXmlDocument(ArtOfTest.Common.ITargetElement)">
            <summary>
            Creates an XmlDocument of this node and all its children.
            </summary>
            <param name="root">The root node to use</param>
            <returns>The generated XmlDocument.</returns>
        </member>
        <member name="M:ArtOfTest.Common.XmlGenerator.BuildXml(System.Xml.XmlDocument,System.Xml.XmlNode,ArtOfTest.Common.ITargetElement)">
            <summary>
            Build the xml under a parent node.
            </summary>
            <param name="doc">The root document.</param>
            <param name="parent">The parent node.</param>
            <param name="element">The element.</param>
        </member>
        <member name="T:ArtOfTest.Common.ParsedElementType">
            <summary>
            The type set by the parser when an element is parsed.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.TextLiteral">
            <summary>
            A literal text element.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.Markup">
            <summary>
            Any markup element.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.OrphanedClosingTag">
            <summary>
            An orphaned closing tag with no open tag.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.MalFormed">
            <summary>
            A malformed tag. (example: <![CDATA[ </foo/> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.Comment">
            <summary>
            A markup comment tag. (example: <![CDATA[ <!-- comment --> ]]>)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ParsedElementType.DocType">
            <summary>
            A DOCTYPE tag.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.FindClause">
            <summary>
            Represents an atomic search expression i.e foo=~bar
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._compareType">
            <summary>
            The compare type defined in the expression.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._name">
            <summary>
            The expression name compare
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._value">
            <summary>
            The expression value to compare
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._clause">
            <summary>
            The full raw expression.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._isHierarchical">
            <summary>
            Whether this clause requires the root search (i.e. xpath, tagindex searches)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindClause._priority">
            <summary>
            The search priority of this
            clause.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.#ctor">
            <summary>
            Create a new Search expression.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.#ctor(System.String)">
            <summary>
            Create a new FindClause.
            </summary>
            <param name="clause">A clause expression. (i.e. foo=bar)</param>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.Clause">
            <summary>
            Gets or sets the search expression.
            On setting the value, the expression will be parsed.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.Name">
            <summary>
            Gets the name part of the expression.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.Value">
            <summary>
            Gets the value part of the expression.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.IsHierarchical">
            <summary>
            Gets whether this search clause is relative to
            the root of the search.
            </summary>
            <remarks>FindExpression implementations set this. Does not need to be serialized.</remarks>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.Priority">
            <summary>
            Gets the search priority of this clause.
            0 is the highest. 10 lowest.
            </summary>
            <remarks>FindExpression implementations set this. Does not need to be serialized.</remarks>
        </member>
        <member name="P:ArtOfTest.Common.FindClause.CompareType">
            <summary>
            Gets the expression compare type.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.Parse(System.String)">
            <summary>
            Parse an expression.
            </summary>
            <param name="clause">clause to parse.</param>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.ToString">
            <summary>
            Return the string representation of this expression.
            </summary>
            <returns>The string representation of this expression.</returns>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.GetSpecialCharForCompareType(ArtOfTest.Common.FindCompareType)">
            <summary>
            Does a reverse look up and returns the special character for
            a certain compare type.
            </summary>
            <param name="compareType">The compare type to lookup.</param>
            <returns>The special compare type.</returns>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.OnParsed">
            <summary>
            Called once the expression is parsed. Extenders can override this
            method to allow for post processing after parsing.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.Match(ArtOfTest.Common.ITargetElement)">
            <summary>
            Match this expression.
            </summary>
            <param name="element">The element to match</param>
            <returns>True/False whether the clause matches this element.</returns>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.Match(ArtOfTest.Common.ITargetElement,ArtOfTest.Common.ITargetElement)">
            <summary>
            Match this expression starting at a specific element
            </summary>
            <param name="element"></param>
            <param name="startElement"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.FindClause.ExtractValue(System.String,ArtOfTest.Common.ITargetElement)">
            <summary>
            Given a specific search term, get the actual value from the passed in
            target element.
            </summary>
            <param name="searchType">Search type as a string. (i.e. TagName/TextContent..etc)</param>
            <param name="element">The target element to use.</param>
            <returns>The actual value of that search term.</returns>
        </member>
        <member name="T:ArtOfTest.Common.FindExpression`1">
            <summary>
            Holds the definition of a Find Expression.
            </summary>
            <typeparam name="T">A <see cref='T:ArtOfTest.Common.FindClause'/>.</typeparam>
        </member>
        <member name="F:ArtOfTest.Common.FindExpression`1._clauses">
            <summary>
            All find clauses.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindExpression`1._chainStops">
            <summary>
            The list of chain stops.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindExpression`1._constraints">
            <summary>
            Get the constraints
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindExpression`1._hasRootClause">
            <summary>
            Internal flag used to detect double root dependency within
            one chain.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.#ctor">
            <summary>
            Create an empty expression.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.#ctor(System.String[])">
            <summary>
            Create a new FindExpression.
            </summary>
            <param name="findClauses">A string array of find clauses.</param>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.AppendChain(ArtOfTest.Common.IFindExpression)">
            <summary>
            Append the passed in expression as a chain to the
            end of the expression.
            </summary>
            <param name="expression">The expression to append.</param>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.AppendClauses(System.Boolean,System.String[])">
            <summary>
            Append a set of clauses
            </summary>
            <param name="asChain">Whether to append as a chain or simply to the end of the expression</param>
            <param name="clausesToAppend">The clauses to append.</param>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.Initialize(System.String[])">
            <summary>
            Initialize this expression with a set of clauses.
            </summary>
            <param name="clauses">The clauses to use.</param>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.Match(ArtOfTest.Common.ITargetElement)">
            <summary>
            Match this expression against a target.
            </summary>
            <param name="target">The target to match</param>
            <returns>True/False is this target matches</returns>
            <remarks>This call with throw an ArgumentException if the expression has a hierarchical dependency.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.Match(ArtOfTest.Common.ITargetElement,System.Collections.Generic.IList{ArtOfTest.Common.FindClause},System.Boolean)">
            <summary>
            Match a set of clauses against a target.
            </summary>
            <param name="target">The target element to match.</param>
            <param name="clauses">The list of clauses to use during the match test.</param>
            <param name="ignoreConstraints">Whether or not to ignore any contraints contained in the clauses.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.CheckConstraints(ArtOfTest.Common.ITargetElement)">
            <summary>
            Check the constraints of this target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.GetClauses(System.Int32)">
            <summary>
            Get the list of clauses
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.AddHierarchyConstraint(ArtOfTest.Common.HierarchyConstraint)">
            <summary>
            Add a hierarchy constraint.
            </summary>
            <param name="constraint">The constraint to add</param>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.ToString">
            <summary>
            Returns the string representation of this FindExpression.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.Update(System.String[])">
            <summary>
            Update this expression with the new expression
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.FindClauses">
            <summary>
            Gets or sets the find statement.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.IsChained">
            <summary>
            Gets whether the search is chained.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.HasConstraints">
            <summary>
            Gets whether this expression have hierarchy constraints
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.Constraints">
            <summary>
            Get any hierarchy constraints.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.ChainStops">
            <summary>
            Gets the list of chain locations in the clauses.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.HasHierarchicalDependency">
            <summary>
            Gets whether this expression has any hierarchal dependencies.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.StringRepresentation">
            <summary>
            Get the string representation of this expression.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.Clauses">
            <summary>
            Gets the expression clauses
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.AddClause(System.String)">
            <summary>
            Add the clause to the collection. 
            </summary>
            <param name="clause">The clause to add.</param>
        </member>
        <member name="P:ArtOfTest.Common.FindExpression`1.SupportedSearchType">
            <summary>
            Gets the supported search type as a Type object.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.MarkEndChain">
            <summary>
            Marks the last FindClause as an end chain.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.IsPipe(System.String)">
            <summary>
            Whether the clause is a pipe clause
            </summary>
            <param name="s">The clause</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.FindExpression`1.OrderByPriority(System.Collections.Generic.List{`0})">
            <summary>
            Order a set of clauses within each chain.
            </summary>
            <param name="clauses">The list of clauses.</param>
            <returns>The ordered list</returns>
        </member>
        <member name="T:ArtOfTest.Common.HierarchyConstraint">
            <summary>
            A Hierarchy constraint can be used to constraint the FindExpression
            match to a specific hierarchy setup.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.HierarchyConstraint.PathSeparator">
            <summary>
            Path separator used in the PathReference.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.HierarchyConstraint._pathReference">
            <summary>
            The Path Reference
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.HierarchyConstraint._expression">
            <summary>
            The FindExpression.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.#ctor(ArtOfTest.Common.IFindExpression,System.String)">
            <summary>
            Create a new hierarchy constraint.
            </summary>
            <param name="expression">The expression to use.</param>
            <param name="pathReference">The path reference string example "1,3,2". Negative values refer to parent nodes, positive values
            refer to child nodes. For example: The first child of a parent can be expressed as "-1,1".</param>
            <remarks>Indexes are 1 based given that a zero can't be positive or negative.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.#ctor(ArtOfTest.Common.IFindExpression,System.Int32[])">
            <summary>
            Create a new hierarchy constraint.
            </summary>
            <param name="expression">The expression to use.</param>
            <param name="pathReference">The path reference string example "1,3,2". Negative values refer to parent nodes, positive values
            refer to child nodes. For example: The first child of a parent can be expressed as "-1,1".</param>
            <remarks>Indexes are 1 based given that a zero can't be positive or negative.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.ParsePath(System.String)">
            <summary>
            Parse the path string.
            </summary>
            <param name="path">The path to use.</param>
        </member>
        <member name="P:ArtOfTest.Common.HierarchyConstraint.Expression">
            <summary>
            Get the Find Expression.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.HierarchyConstraint.PathReference">
            <summary>
            Get the path reference for this constraint.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.Validate(ArtOfTest.Common.ITargetElement)">
            <summary>
            Validate this constraint against a target element.
            </summary>
            <param name="target">The target element.</param>
            <returns>True/False whether this constraint validates against this element.</returns>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.GetElementFromPath(ArtOfTest.Common.ITargetElement,System.Int32[])">
            <summary>
            Given node and a reference path, return the target element pointed to by the path reference.
            </summary>
            <param name="referenceNode">The node to start the search at.</param>
            <param name="pathReference">The path reference to use.</param>
            <returns>The target element, else null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.HierarchyConstraint.GetNextNode(ArtOfTest.Common.ITargetElement,System.Int32)">
            <summary>
            Helper routine for GetElementFromPath. Given a node and a single path index,
            return the next node in the path.
            </summary>
            <param name="referenceNode">The reference node.</param>
            <param name="path">The path node.</param>
            <returns>The target element found, else null.</returns>
        </member>
        <member name="T:ArtOfTest.Common.IFindExpression">
            <summary>
            Interface implemented by all FindExpression.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.Match(ArtOfTest.Common.ITargetElement)">
            <summary>
            Match this expression with a target.
            </summary>
            <param name="target">The target.</param>
            <returns>True/False whether the target matches the expression.</returns>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.Match(ArtOfTest.Common.ITargetElement,System.Collections.Generic.IList{ArtOfTest.Common.FindClause},System.Boolean)">
            <summary>
            Match a specific set of clauses.
            </summary>
            <param name="target">The target element to match.</param>
            <param name="clauses">A list of clauses to test for a match.</param>
            <param name="ignoreConstraints">Whether or not to ignore any constraints attached to the clauses.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.GetClauses(System.Int32)">
            <summary>
            Get the list of FindClauses contained in this
            FindExpression.
            </summary>
            <param name="chainIndex">The chain index clauses. -1 to get everything.</param>
            <returns>The list of clauses.</returns>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.Initialize(System.String[])">
            <summary>
            Initialize this expression with a set of clauses
            </summary>
            <param name="clauses">The set of clauses to use.</param>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.IsChained">
            <summary>
            Gets whether this expression is a chained search.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.Constraints">
            <summary>
            Get the list of hierarchy constraints.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.ChainStops">
            <summary>
            Get the list of chain stops.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.HasHierarchicalDependency">
            <summary>
            Gets whether this expression has a hierarchial dependency
            (i.e. IsChained or has a FindClause that has IsHierarchical set)
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.StringRepresentation">
            <summary>
            Get the string representation of this expression
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.SupportedSearchType">
            <summary>
            Gets the supported search type
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.IFindExpression.Clauses">
            <summary>
            Gets the list of clauses as a string array
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.AppendChain(ArtOfTest.Common.IFindExpression)">
            <summary>
            Append an expression as a chain.
            </summary>
            <param name="expression">The expression to append.</param>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.AppendClauses(System.Boolean,System.String[])">
            <summary>
            Append a set of clauses
            </summary>
            <param name="asChain">Whether to append as a chain or simply to the end of the expression</param>
            <param name="clausesToAppend">The clauses to append.</param>
        </member>
        <member name="M:ArtOfTest.Common.IFindExpression.Update(System.String[])">
            <summary>
            Update the expression with the passed in values.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="T:ArtOfTest.Common.TreeCrawler`3">
            <summary>
            Crawls an element hierarchy tree.
            </summary>
            <typeparam name="T">The target element type</typeparam>
            <typeparam name="V">The FindExpression type</typeparam>
            <typeparam name="R">The FindClause type</typeparam>
        </member>
        <member name="F:ArtOfTest.Common.TreeCrawler`3._lastUsedExpr">
            <summary>
            The last FindExpression used by this Crawler.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.TreeCrawler`3.LastUsedExpression">
            <summary>
            The last FindExpression used by this Crawler.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.TreeCrawler`3.SearchRoot">
            <summary>
            Gets the SearchRoot for this crawler.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.ByExpression(`0,`1)">
            <summary>
            Finds the first element in the tree that matches the find expression.
            </summary>
            <param name="startNode">The root node of the tree to search.</param>
            <param name="expression">The find expression.</param>
            <returns>The first element it finds else null.</returns>
            <remarks>This overload does not include the root node in the search.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.ByExpression(`1)">
            <summary>
            Finds the first element in the tree that matches the find expression.
            </summary>
            <param name="expression">The find expression.</param>
            <returns>The first element it finds else null.</returns>
            <remarks>This overload does not include the root node in the search.</remarks>
            <remarks>Uses this.SearchRoot as the search root</remarks>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.ByExpression(`1,System.Boolean)">
            <summary>
            Finds the first element in the tree that matches the find expression.
            </summary>
            <param name="expression">The find expression.</param>
            <param name="includeRoot">Whether to include the root node in the search</param>
            <returns>The first element it finds else null.</returns>
            <remarks>Uses this.SearchRoot as the search root</remarks>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.AllByExpression(`1)">
            <summary>
            Finds all the elements in the tree that match the find expression.
            </summary>
            <param name="expression">The find expression.</param>
            <returns>A list of all elements that match the expression or an empty list if nothing is
            found.</returns>
            <remarks>Uses this.SearchRoot as the search root</remarks>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.ByExpression(`0,`1,System.Boolean)">
            <summary>
            Finds the first element in the tree that matches the find expression.
            </summary>
            <param name="startNode">The root node of the tree to search.</param>
            <param name="expression">The find expression.</param>
            <param name="includeRoot">Whether to include the root node in the search.</param>
            <returns>The first element it finds, else null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.AllByExpression(`0,`1)">
            <summary>
            Finds all the elements in the tree that match the find expression.
            </summary>
            <param name="startNode">The root node of the tree to search.</param>
            <param name="expression">The find expression.</param>
            <returns>A list of all elements that match the expression or an empty list if nothing is
            found.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.FindUsingHierarchicalClause(`0,`2)">
            <summary>
            Find a node using a hierarchical clause (XPATH, TagIndex...etc)
            </summary>
            <param name="startNode">The node to start with.</param>
            <param name="clause">The clause to use</param>
            <returns>The found element else null;</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.FindUsingHierarchicalClause(`0,`2,System.Boolean)">
            <summary>
            Find a node using a hierarchical clause (XPATH, TagIndex...etc)
            </summary>
            <param name="startNode"></param>
            <param name="clause"></param>
            <param name="includeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.GenerateExpressionPath(`0,`0)">
            <summary>
            Generate an expression path for a node relative to another node. 
            Currently used by the Designer.
            </summary>
            <param name="node"></param>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.Find(`0,System.Collections.Generic.IList{ArtOfTest.Common.FindClause},`1,System.Boolean,System.Boolean)">
            <summary>
            The Core Internal Find Method used by all Find Expressions.
            </summary>
            <param name="startNode"></param>
            <param name="clauses"></param>
            <param name="expression"></param>
            <param name="includeRoot"></param>
            <param name="ignoreContraints"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.SearchUsingNonHierarchialMatch(ArtOfTest.Common.ITargetElement,System.Collections.Generic.IList{ArtOfTest.Common.FindClause},`1,System.Boolean)">
            <summary>
            Finds the first element in the tree that matches the find expression.
            </summary>
            <param name="startNode">The root node of the tree to search.</param>
            <param name="clauses">A list of clauses to use in the search.</param>
            <param name="expression">The find expression.</param>
            <param name="ignoreConstraints">Whether or not to ignore any contraints contained in the clauses.</param>
            <returns>The first element it finds else null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.FindAllRecursively(ArtOfTest.Common.ITargetElement,`1,System.Collections.Generic.IList{ArtOfTest.Common.ITargetElement}@,System.Boolean)">
            <summary>
            Recursively walk the tree and try to match each node.
            </summary>
            <param name="startNode">The start of the search.</param>
            <param name="expression">The expression to use.</param>
            <param name="elements">The list of elements to use.</param>
            <param name="includeRoot">Whether or not to include the root node in the search.</param>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.ByCustom(`0,System.Predicate{`0},System.Boolean)">
            <summary>
            Find using custom logic.
            </summary>
            <param name="startNode">The start node.</param>
            <param name="customLogic">Custom predicate.</param>
            <param name="includeRoot">True/False whether to search the root node.</param>
            <returns>The found element else null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.AllByCustom(`0,System.Predicate{`0},System.Boolean)">
            <summary>
            Find all matches that match custom search logic
            </summary>
            <param name="startNode">The start node of the search</param>
            <param name="customLogic">The custom logic to use</param>
            <param name="includeRoot">Whether to include the root or not.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.FindUsingExpressionPath(`0,System.String,`0@)">
            <summary>
            Find an element using expression paths starting at startNode.
            </summary>
            <param name="startNode">The start node.</param>
            <param name="expPath">The expression path</param>
            <param name="failureLocation">In case it didn't find a target, will return the failure location in the tree,
            where the search stopped</param>
            <returns>The found node, else null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.IsIndexed(System.String,System.String@,System.Int32@,System.String@)">
            <summary>
            Is the segement indexed. (i.e. DIV[0])
            </summary>
            <param name="segment">The segment to test.</param>
            <param name="nodeName">Where to store the node name.</param>
            <param name="nodeIndex">Where to store the node index.</param>
            <param name="clause">where to write the clause.</param>
            <returns>true if the segment is indexed.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.CreateClause(System.String)">
            <summary>
            Creates a <see cref="T:ArtOfTest.Common.FindClause"/> object from a string.
            </summary>
            <param name="clause"></param>
            <returns>A <see cref="T:ArtOfTest.Common.FindClause"/> object.</returns>
        </member>
        <member name="M:ArtOfTest.Common.TreeCrawler`3.GetTagIndexAmongSiblings(ArtOfTest.Common.ITargetElement)">
            <summary>
            Get a child index within a parent only.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.Common.FindSpecialChars">
            <summary>
            List of special characters that FindExpressions and FindParams recognize.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Contains">
            <summary>
            ~ = Contains
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.NotContain">
            <summary>
            ! = NotContains
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.StartsWith">
            <summary>
            ^ = Starts with
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.EndsWith">
            <summary>
            ? = Ends with
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.RegEx">
            <summary>
            # = this is a regex
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Pipe">
            <summary>
            | = chain two expressions together
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Equal">
            <summary>
            = = Equals
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Escape">
            <summary>
            ' = escape the following character and treat it as a regular character
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Missing">
            <summary>
            - = missing
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.Exists">
            <summary>
            + = exists
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindSpecialChars.ExpPathSeparator">
            <summary>
            / = expression path separator
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.FindCompareType">
            <summary>
            The different types of string compares the framework supports.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.Exact">
            <summary>
            The strings match exactly.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.Contains">
            <summary>
            String a contains the substring b.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.NotContain">
            <summary>
            String a does not contain substring b.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.StartsWith">
            <summary>
            String a starts with substring b.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.EndsWith">
            <summary>
            String a ends with substring b.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.RegEx">
            <summary>
            String a matches the regex string b.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.Missing">
            <summary>
            The string is null or empty.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindCompareType.Exists">
            <summary>
            The string is not null or empty.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.FindOperators">
            <summary>
            List of find operators used in FindExpressions
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindOperators.AND">
            <summary>
            An AND operation (a AND b must be true)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindOperators.OR">
            <summary>
            An OR operation (a OR b must be true)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.FindOperators.PIPE">
            <summary>
            A PIPE operation (find A then find B)
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.JsonKnownTypeConverter">
            <summary>
            This class is used in serializing using JSON.Net.  Note that it DOES carry state, so the same instance should
            not be used simultaneously in 2 different serialization operations.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.IXmlPersistable">
            <summary>
            Interface for persisting XML formatted data
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Serialization.IXmlPersistable.RootName">
            <summary>
            Gets the tag name to use for the implementing object when it is serialized as the root of a document
            </summary>
            <remarks>
            This is only used for a document's root node.  Interior nodes are stored with a tag name specified
            by the node's parent.
            </remarks>
        </member>
        <member name="P:ArtOfTest.Common.Serialization.IXmlPersistable.CurrentVersion">
            <summary>
            Gets the version string to use when serializing the object to XML.  This string will be added as an attribute
            to the object's start tag.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.IXmlPersistable.SaveTo(ArtOfTest.Common.Serialization.XmlStoreNode)">
            <summary>
            Called when an object is serialized.  The object should add any data that is needed to reconstitute the
            object to the store.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.IXmlPersistable.LoadFrom(ArtOfTest.Common.Serialization.XmlStoreNode)">
            <summary>
            Called when an object is deserialized.  The object should read any data it needs to reconstitute itself from the store.
            </summary>
            <param name="store"></param>
            <remarks>
            The object's empty constructor is called before this method is called.
            </remarks>
        </member>
        <member name="P:ArtOfTest.Common.Serialization.IXmlPersistable.XmlBlob">
            <summary>
            Opaque storage for serialized XML information the deserializer doesn't understand.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.XmlBlob">
            <summary>
            The XmlBlob class is an opaque store for serialized XML information the deserializer doesn't understand.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Serialization.XmlBlob.Unknowns">
            <summary>
            Gets the list of XML fragments we were unable to deserialize into objects
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.XmlPersistableList`1">
            <summary>
            This class provides an XmlPersistable version of the standard generic List object
            </summary>
            <typeparam name="T">The type of the contained objects</typeparam>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.XmlPersistedAttribute">
            <summary>
            This attribute specifies that a property is already serialized via IXmlPersistable, so the
            IXmlPersistable system shouldn't automatically serialize it with the DataMember compatibility
            stuff.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Serialization.XmlPersistenceException">
            <summary>
            Signals an error during serialization or deserialization
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlPersistenceException.#ctor">
            <summary>
            Initializes a new instance of the XmlPersistenceException class
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlPersistenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XmlPersistenceException class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlPersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the XmlPersistenceException class with a specified error message and
            a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or null if no inner exception is specified
            </param>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlPersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the XmlPersistenceException class with serialized data
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown</param>
            <param name="context">Contains contextual information about the source or destination</param>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlStore.SaveToStream(System.IO.Stream,ArtOfTest.Common.Serialization.IXmlPersistable,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Saves the object to a stream. This can be used with a file stream to save multiple objects to disk
            as a sequential-access file.
            </summary>
            <param name="stream">The stream to which we will write the object</param>
            <param name="value">The object to serialize</param>
            <param name="knownTypes">A Type collection, used for DataContract types contained within the object
            we're serializing</param>
        </member>
        <member name="M:ArtOfTest.Common.Serialization.XmlStoreNode.AddBlob(ArtOfTest.Common.Serialization.XmlBlob)">
            <summary>
            Adds the contents of a blob as children of this element's backing element
            </summary>
            <param name="blob">Blob containing unrecognized XML that we're carrying</param>
        </member>
        <member name="T:ArtOfTest.Common.WaitAsync">
            <summary>
            Enables asynchronized waiting on custom conditions
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.WaitAsync.WaitCompleted">
            <summary>
            Triggered when the wait operation is completed
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.WaitAsync.WaitParams`2">
            <summary>
            Custom structure used by the waiting thread.
            </summary>
            <typeparam name="T">Target Control</typeparam>
            <typeparam name="V">Custom object to pass for GenericInvokes</typeparam>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._timeout">
            <summary>
            The timeout to use.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._cancelled">
            <summary>
            Whether a worker thread is cancelled.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._errorInfo">
            <summary>
            Any error info that occurred during the wait operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._result">
            <summary>
            The wait result from the waiting thread
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._conditionCheckInterval">
            <summary>
            The condition check interval to use.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitAsync._cancel">
            <summary>
            Cancel invoked for the wait.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new WaitAsync object.
            </summary>
            <param name="timeout">The global timeout to use for this wait async object.</param>
            <param name="checkInterval">The check interval to use for condition checking.</param>
        </member>
        <member name="P:ArtOfTest.Common.WaitAsync.CheckInterval">
            <summary>
            Gets or sets the check interval for this wait object.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.For``2(System.Func{``0,``1,System.Boolean},``0,``1,System.Boolean,System.Int32)">
            <summary>
            Wait for an action async. Attach to WaitCompleted to get notification when wait is completed 
            </summary>
            <typeparam name="T">The object type to pass to wait function.</typeparam>
            <typeparam name="V">Addition object to pass to wait function.</typeparam>
            <param name="func">The wait function delegate</param>
            <param name="target">The target object instance we are waiting on.</param>
            <param name="custom">The custom object instance to pass to the wait function.</param>
            <param name="invertCondition">True/false whether to invert the condition</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.For``1(System.Predicate{``0},``0,System.Boolean,System.Int32)">
            <summary>
            Wait for an action async. Attach to WaitCompleted to get notification when wait is completed
            </summary>
            <typeparam name="T">The object type to pass to predicate</typeparam>
            <param name="predicate">The function delegate</param>
            <param name="target">The actual target object instance</param>
            <param name="invertCondition">Whether to invert the condition</param>
            <param name="timeout">The timeout to use.</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.ForInternal``2(ArtOfTest.Common.WaitAsync.WaitParams{``0,``1},System.Int32,ArtOfTest.Common.WaitResultType)">
            <summary>
            Internal wait function.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="waitParams"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync._worker_RunWorkerCompleted``2(ArtOfTest.Common.WaitAsync.WaitParams{``0,``1})">
            <summary>
            Background worked completed.
            </summary>
            <param name="waitParams">Wait information</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync._worker_DoWork``2(System.Object)">
            <summary>
            Do the wait as you perform the condition.
            </summary>
            <param name="waitParam">The wait information</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.CallRefreshIfNeeded``1(``0)">
            <summary>
            Function needed for backward compatibility
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.WaitAsync.OnWaitComplete(ArtOfTest.Common.WaitCompleteEventArgs)">
            <summary>
            Invoke the wait complete event.
            </summary>
            <param name="args">WaitCompleteEventArgs</param>
        </member>
        <member name="T:ArtOfTest.Common.WaitCompleteEventArgs">
            <summary>
            Wait complete event args.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitCompleteEventArgs._waitResult">
            <summary>
            The wait result.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitCompleteEventArgs.#ctor(ArtOfTest.Common.WaitResult)">
            <summary>
            Create a new WaitCompleteEventArgs.
            </summary>
            <param name="waitResult">The wait result.</param>
        </member>
        <member name="P:ArtOfTest.Common.WaitCompleteEventArgs.WaitResult">
            <summary>
            Gets the wait result of this wait operation.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.WaitInCallingThread">
            <summary>
            Performs a sync wait within the same thread that called the wait. Not threading is used period.
            During the wait, this pump messages using DoEvents().
            !USE THIS CLASS WITH CAUTION!
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitInCallingThread.For``1(System.Predicate{``0},``0,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Perform a wait in a single thread.
            </summary>
            <typeparam name="T">The predicate type.</typeparam>
            <param name="predicate">The predicate to test during the wait.</param>
            <param name="target">The target to examine during the test.</param>
            <param name="timeout">The maximum time to wait for the predicate to be true.</param>
            <param name="checkInterval">How often to test the predicate on the target.</param>
            <param name="ignoreExceptions">Whether or not to ignore any exceptions thrown during the predicate test.</param>
        </member>
        <member name="T:ArtOfTest.Common.WaitResult">
            <summary>
            Represents a wait result.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResult._resultType">
            <summary>
            The wait condition result type
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResult._error">
            <summary>
            If the wait resulted in an error, this message will
            contain information about the error.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitResult.#ctor">
            <summary>
            Empty constructor needed for serialization.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitResult.#ctor(ArtOfTest.Common.WaitResultType,System.String)">
            <summary>
            Create a new WaitConditionResult object.
            </summary>
            <param name="resultType">The result type.</param>
            <param name="error">The error if any.</param>
        </member>
        <member name="P:ArtOfTest.Common.WaitResult.ResultType">
            <summary>
            Gets the result type of this wait condition.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.WaitResult.Error">
            <summary>
            Gets the error if the ResultType = ErrorAbort
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitResult.ToString">
            <summary>
            Creates a string that describes this object.
            </summary>
            <returns>The string describing this object.</returns>
        </member>
        <member name="M:ArtOfTest.Common.WaitResult.ThrowExceptionIfInError">
            <summary>
            Throw an exception if the 
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.WaitSync">
            <summary>
            Waits Synchronously for a condition.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitSync._waitResult">
            <summary>
            The wait result
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitSync._waitSignal">
            <summary>
            Event synchronization
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitSync._autoCheckResult">
            <summary>
            Whether to auto check the result after the wait is over.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new synchronous wait object.
            </summary>
            <param name="timeout">The global timeout to use for all waits on this method.</param>
            <param name="checkInterval">The condition wait interval to use.</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.WaitSync_WaitCompleted(System.Object,ArtOfTest.Common.WaitCompleteEventArgs)">
            <summary>
            Occurs when wait is complete.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ArtOfTest.Common.WaitSync.SyncWaitResult">
            <summary>
            Gets the result of the last synchronous wait.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.WaitSync.AutoCheckResult">
            <summary>
            Gets or sets whether to automatically check for timeouts
            or errors once the wait is done. Default is true.
            </summary>
            <remarks>If this value is set to false then the user calling .For will
            need to manually check the SyncWaitResult when the call comes back.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.CheckResult(ArtOfTest.Common.WaitSync)">
            <summary>
            Check the result of a WaitSync.
            </summary>
            <param name="wait">The wait object.</param>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.CheckResult(ArtOfTest.Common.WaitSync,System.String,System.Object)">
            <summary>
            Check the sync wait result.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.For``2(System.Func{``0,``1,System.Boolean},``0,``1,System.Int32)">
            <summary>
            Wait for a custom condition defined by func on a pooled thread.
            </summary>
            <typeparam name="T">target type to pass to function. </typeparam>
            <typeparam name="V">custom type to pass to function.</typeparam>
            <param name="func">The function delegate</param>
            <param name="target">The target object instance to pass to function.</param>
            <param name="custom">The custom object instance to pass to function.</param>
            <param name="timeout">The time out to use.</param>
            <remarks>Function does not throw on timeout. Check the SyncWaitResult to figure out if the call timed-out..etc.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.For``2(System.Func{``0,``1,System.Boolean},``0,``1,System.Boolean,System.Int32)">
            <summary>
            Wait for a custom condition defined by func on a pooled thread.
            </summary>
            <typeparam name="T">target type to pass to function. </typeparam>
            <typeparam name="V">custom type to pass to function.</typeparam>
            <param name="func">The function delegate</param>
            <param name="target">The target object instance to pass to function.</param>
            <param name="custom">The custom object instance to pass to function.</param>
            <param name="invertCondition">True/false to invert the condition.</param>
            <param name="timeout">The time out to use.</param>
            <remarks>Function does not throw on timeout. Check the SyncWaitResult to figure out if the call timed-out..etc.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.For``1(System.Predicate{``0},``0,System.Boolean,System.Int32)">
            <summary>
            Wait for a custom condition defined by predicate on a pooled thread.
            </summary>
            <typeparam name="T">target type to pass to function. </typeparam>
            <param name="predicate">Predicate function to call.</param>
            <param name="target">The target object instance to pass to predicate.</param>
            <param name="invertCondition">True/false to invert the condition.</param>
            <param name="timeout">The time out to use.</param>
            <remarks>Function does not throw on timeout. Check the SyncWaitResult to figure out if the call timed-out..etc.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.For``1(System.Predicate{``0},``0,System.Int32)">
            <summary>
            Wait for a custom condition defined by predicate on a pooled thread.
            </summary>
            <typeparam name="T">target type to pass to function. </typeparam>
            <param name="predicate">Predicate function to call.</param>
            <param name="target">The target object instance to pass to predicate.</param>
            <param name="timeout">The time out to use.</param>
            <remarks>Function does not throw on timeout. Check the SyncWaitResult to figure out if the call timed-out..etc.</remarks>
        </member>
        <member name="M:ArtOfTest.Common.WaitSync.For``1(System.Func{``0,System.Boolean},``0,System.Int32,System.Int32,System.Object)">
            <summary>
            Wait for a specific assert.
            </summary>
            <typeparam name="T">The type of the control</typeparam>
            <param name="assert">The assert to use. Control.AssertXXXX</param>
            <param name="control">The target control</param>
            <param name="timeout">The timeout to use</param>
            <param name="checkInterval">The check interval to use.</param>
            <param name="target">Target object to execute this method against</param>
        </member>
        <member name="T:ArtOfTest.Common.WaitResultType">
            <summary>
            The different Wait results possible.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResultType.NotSet">
            <summary>
            Result is not set yet.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResultType.ConditionMet">
            <summary>
            The condition that we were waiting for was met.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResultType.TimedOut">
            <summary>
            The condition was not met, timed out.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResultType.ErrorAbort">
            <summary>
            An unexpected error occurred. Aborted the wait operation.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitResultType.ElementNotFound">
            <summary>
            Error finding the element.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.WaitType">
            <summary>
            The types of waits supported by the Wait objects.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitType.SimplePredicate">
            <summary>
            Wait on a simply predicate
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.WaitType.GenericInvoke">
            <summary>
            A generic invoke Func
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Utils">
            <summary>
            Class to provide simple functions for the rest of the framework.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Utils.s_HashAlg">
            <summary>
            The hash algorithm to use.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Utils.GenerateHash(System.String)">
            <summary>
            Computes the hash of the given string. The default is to use the SHA1 algorithm.
            </summary>
            <param name="str">The string to compute the hash of.</param>
            <returns>The Bas64 string of the computed hash.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.CropBitmap(System.Drawing.Bitmap,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Cuts a bitmap at the specified cut rectangle.
            </summary>
            <param name="original">The original bitmap.</param>
            <param name="originalRects">
            The original bitmap rects. We assume that this rectangle describes the origin and size
            of the bitmap.
            </param>
            <param name="cutArea">The desired cut area. This must be in the same coordinate system as originalRects.</param>
            <returns>The new cut bitmap.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.CropBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Cuts a bitmap at the specified cut rectangle.
            </summary>
            <param name="original">The original bitmap.</param>
            <param name="cutArea">The desired cut area.</param>
            <returns>
            The new cut bitmap. If cutArea extends beyond the boundaries of original, the area that
            does fit within original will be returned.
            </returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.CropBitmap(System.Drawing.Bitmap,System.Drawing.RectangleF)">
            <summary>
            Cuts a bitmap at the specified cut rectangle.
            </summary>
            <param name="original">The original bitmap.</param>
            <param name="cutArea">The desired cut area.</param>
            <returns>
            The new cut bitmap. If cutArea extends beyond the boundaries of original, the area that
            does fit within original will be returned.
            </returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.ConvertToMediaColor(System.Drawing.Color)">
            <summary>
            Convert a System.Drawing.Color to a WPF System.Windows.Media.Color
            </summary>
            <param name="color">The color to convert</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.GetBitmapImage(System.IO.MemoryStream)">
            <summary>
            Get the BitmapImage from the MemoryStream.
            </summary>
            <param name="stream">The memory stream.</param>
            <returns>The BitmapImage.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.TryEnterRunOnceNamedLock(System.Boolean,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="bGlobal">If true, creates a named mutex. If false, uses the process-local name set.</param>
            <param name="strNamePrefix"></param>
            <param name="hashCodeSuffixSources"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.Compress(System.IO.FileInfo)">
            <summary>
            Compresses a file
            </summary>
            <param name="inFileInfo">FileInfo about the file to compress</param>
            <returns>FileInfo about the compressed file, or null if InFileInfo is hidden or already compressed</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.Decompress(System.IO.FileInfo)">
            <summary>
            Decompresses a previously compressed file
            </summary>
            <param name="inFileInfo">The file to decompress</param>
            <returns>The original, decompressed file</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.GetDateTimeIntersection(System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Given two sets of DateTimes return the TimeSpan for which they overlap
            </summary>
            <param name="mainStart">Beginning of first DateTime pair</param>
            <param name="mainEnd">End of first DateTime pair</param>
            <param name="intervalStart">Beginning of second DateTime pair</param>
            <param name="intervalEnd">End of second DateTime pair</param>
            <returns>The timespan for which the two sets overlap</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.DateTimeToEpoch(System.DateTime)">
            <summary>
            A method to convert DateTime to Epoch (number of seconds from 01.01.1970) used in JavaScript
            </summary>
            <param name="dateTime">DateTime to convert</param>
            <returns>Number of seconds from 01.01.1970 to the provided DateTime</returns>
        </member>
        <member name="M:ArtOfTest.Common.Utils.DeleteDirectoryWithFilesAndSubdirectories(System.String)">
            <summary>
            Deletes a directory and all its files and subdirectories.
            </summary>
            <param name="pathToDirectoryToDelete">Full path to the directory that should be deleted.</param>
        </member>
        <member name="M:ArtOfTest.Common.Utils.SafelyDeleteDirectoriesRecursively(System.IO.DirectoryInfo)">
            <summary>
            Recursively deletes a directory with its files and subdirectories.
            Removes special directory and file attributes (like read-only) to ensure successful deletion.
            </summary>
            <param name="baseDirectory">The directory to delete.</param>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHWINFO.cbSize">
            <summary>
            The size of the structure in bytes.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHWINFO.hwnd">
            <summary>
            A Handle to the Window to be Flashed. The window can be either opened or minimized.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHWINFO.dwFlags">
            <summary>
            The Flash Status.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHWINFO.uCount">
            <summary>
            The number of times to Flash the window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHWINFO.dwTimeout">
            <summary>
            The rate at which the Window is to be flashed, in milliseconds. If Zero, the function uses the default cursor blink rate.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_STOP">
            <summary>
            Stop flashing. The system restores the window to its original stae.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_CAPTION">
            <summary>
            Flash the window caption.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_TRAY">
            <summary>
            Flash the taskbar button.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_ALL">
            <summary>
            Flash both the window caption and taskbar button.
            This is equivalent to setting the FLASHW_CAPTION | FLASHW_TRAY flags.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_TIMER">
            <summary>
            Flash continuously, until the FLASHW_STOP flag is set.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.FlashWindow.FLASHW_TIMERNOFG">
            <summary>
            Flash continuously until the window comes to the foreground.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.FlashWindow.Flash(System.IntPtr)">
            <summary>
            Flash the specified Window until it recieves focus.
            </summary>
            <param name="handle">The Window to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.FlashWindow.Flash(System.IntPtr,System.Int32)">
            <summary>
            Flash the specified Window for the specified number of times
            </summary>
            <param name="handle">The Window to Flash.</param>
            <param name="count">The number of times to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.FlashWindow.Start(System.IntPtr)">
            <summary>
            Start Flashing the specified Window.
            </summary>
            <param name="handle">The Window to Flash.</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.FlashWindow.Stop(System.IntPtr)">
            <summary>
            Stop Flashing the specified Window.
            </summary>
            <param name="handle">The window to stop flashing.</param>
            <returns></returns>
        </member>
        <member name="P:ArtOfTest.Common.Win32.FlashWindow.Win2000OrLater">
            <summary>
            A boolean value indicating whether the application is running on Windows 2000 or later.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowActivationEventArgs">
            <summary>
            Event args for window activation or deactivation events
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowActivationEventArgs.#ctor(System.IntPtr)">
            <summary>
            Creates arguments for a new window activation event and sets the other involved window (the one that was activated when this window
            was deactivated or deactivated when this one was activated).
            </summary>
            <param name="handle">The other window's window handle</param>
        </member>
        <member name="P:ArtOfTest.Common.Win32.WindowActivationEventArgs.Handle">
            <summary>
            Gets the handle of the window (other than this one) that is being activated or deactivated
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowsMessageEventArgs">
            <summary>
            EventArgs class that wraps a Windows message
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.GenericWindow">
            <summary>
            Wrapper for a Win32 window that provides events for Win32 window messages
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardHookEventArgs.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Create a Keyboard event argument from a keyboard message
            from the keyboard hook
            </summary>
            <param name="wParam">The wParam of the</param>
            <param name="lParam"></param>
        </member>
        <member name="P:ArtOfTest.Common.Win32.KeyboardHookEventArgs.KeyData">
            <summary>
            The KeyData including any modifiers (ALT/CTRL/SHIFT)
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.KeyboardHookEventArgs.IsUp">
            <summary>
            Whether the key was pressed or released
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.KeyboardHookEventArgs.RepeatCount">
            <summary>
            Auto-repeat count
            You can check the repeat count to determine whether a keystroke message represents more than one keystroke. 
            The system increments the count when the keyboard generates WM_KEYDOWN or WM_SYSKEYDOWN messages faster 
            than an application can process them. This often occurs when the user holds down a key long enough to start 
            the keyboard's automatic repeat feature. Instead of filling the system message queue with the resulting key-down messages, 
            the system combines the messages into a single key down message and increments the repeat count. 
            Releasing a key cannot start the automatic repeat feature, so the repeat count for WM_KEYUP and WM_SYSKEYUP messages is always set to 1.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.KeyboardHookEventArgs.AsciiChar">
            <summary>
            THE ASCII character of the Key. 
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardHookEventArgs.GetAsciiCharacter(System.Int32,System.Int32)">
            <summary>
            Get an Ascii Character from a key code
            </summary>
            <param name="iKeyCode"></param>
            <param name="iFlags"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.KeyboardMessageProcessor">
            <summary>
            Help process keyboard events as simple Key Up/Down/Press events
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardMessageProcessor.ProcessMessage(System.Windows.Forms.Message)">
            <summary>
            Process the raw keyboard message
            </summary>
            <param name="m">Message information</param>
        </member>
        <member name="T:ArtOfTest.Common.Win32.KeyboardWatcher">
            <summary>
            Will attach a LL Keyboard hook to the current process
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.KeyboardWatcher.KeyUp">
            <summary>
            Public events.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardWatcher._keyboardHook">
            <summary>
            Local hook instance
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardWatcher.Start(System.IntPtr)">
            <summary>
            Start the hook
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardWatcher.Stop">
            <summary>
            Stop the hook
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardWatcher._keyboardHook_HookInvoked(System.Object,ArtOfTest.Common.Win32.HookEventArgs)">
            <summary>
            Hook event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardWatcher.OnKeyUp(ArtOfTest.Common.Win32.KeyboardHookEventArgs)">
            <summary>
            On KeyUp
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.KeyboardWatcher.OnKeyDown(ArtOfTest.Common.Win32.KeyboardHookEventArgs)">
            <summary>
            OnKeyDown
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:ArtOfTest.Common.Win32.LocalWindowsHook">
            <summary>
            From MSDN
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.LocalWindowsHook.Install">
            <summary>
            Install against a process (LL hooks)
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.TunnelingMouseEventArgs">
            <summary>
            Event arguments for mouse events coming through a wrapped Win32 window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.TunnelingMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new TunnelingMouseEventArgs object.
            </summary>
            <param name="button">The mouse button.</param>
            <param name="clicks">Number of clicks.</param>
            <param name="x">The mouse x position.</param>
            <param name="y">The mouse y position.</param>
            <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
        </member>
        <member name="P:ArtOfTest.Common.Win32.TunnelingMouseEventArgs.StopTunneling">
            <summary>
            Controls whether or not to stop processing mouse messages.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.Window">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.Click">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.DoubleClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.MouseClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.MouseDoubleClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.MouseDown">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.MouseUp">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.PreMouseDown">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.PreMouseClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.PreMouseUp">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.MouseMove">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.WindowMoved">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.KeyUp">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.KeyDown">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.KeyPressed">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.WindowClosed">
            <summary>
            For internal use only. 
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.Window.WindowsMessageReceived">
            <summary>
            Fired whenever a Windows message is received by the wrapped window.  Keep processing to a minimum in any event handlers for this.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnKeyPressed(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnWindowMoved">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnDoubleClick">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseClick(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="button">A MouseButtons that specifiesd which mouse button is associated with this event.</param>
            <param name="clicks">An int specifying the number of times the mouse button was pressed and released.</param>
            <param name="x">The x-coordinate in pixels of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate in pixels of the mouse during the generating mouse event.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseDoubleClick(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="button">A MouseButtons that specifiesd which mouse button is associated with this event.</param>
            <param name="clicks">An int specifying the number of times the mouse button was pressed and released.</param>
            <param name="x">The x-coordinate in pixels of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate in pixels of the mouse during the generating mouse event.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseDown(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="button">A MouseButtons that specifiesd which mouse button is associated with this event.</param>
            <param name="x">The x-coordinate in pixels of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate in pixels of the mouse during the generating mouse event.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseUp(System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="button">A MouseButtons that specifiesd which mouse button is associated with this event.</param>
            <param name="x">The x-coordinate in pixels of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate in pixels of the mouse during the generating mouse event.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnPreMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnPreMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnPreMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.OnMouseMove(System.Int32,System.Int32)">
            <summary>
            For internal use only.
            </summary>
            <param name="x">The x-coordinate in pixels of the mouse during the generating mouse event.</param>
            <param name="y">The y-coordinate in pixels of the mouse during the generating mouse event.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.#ctor(System.IntPtr)">
            <summary>
             Constructs a new instance of this class for
             the specified Window Handle.
            </summary>
            <param name="hWnd">The Window Handle</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.#ctor">
            <summary>
            Create  a new window. Must use SetHwnd later.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._hWnd">
            <summary>
            The window handle.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._process">
            <summary>
            The process owner of this window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._parentWindow">
            <summary>
            The parent window. Null if does not exists.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._caption">
            <summary>
            Caption of this window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._waiter">
            <summary>
            The wait for window visiblity.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._children">
            <summary>
            The children of this window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.Window._wrappedWindow">
            <summary>
            Wrapper for the Win32 window's WndProc
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.IsHwndDialog(ArtOfTest.Common.Win32.HWND)">
            <summary>
            Gets whether the provided window handle represents a dialog
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.ContainsText(System.String,System.Boolean)">
            <summary>
            Returns true/false whether the text is present within this window.
            </summary>
            <param name="text">The text to check.</param>
            <param name="refreshChildren">True/False whether to refresh the Children of 
            this window or simply use the cached collection.</param>
            <returns>True/False whether the text exists.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetText">
            <summary>
            Get the text contained in this window and all its children windows. 
            </summary>
            <returns>Returns a text concatenation of this window and all its children</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetWindowText">
            <summary>
            Get current text of the window.
            </summary>
            <returns>Current text of the window.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.ContainsControl(System.Int32)">
            <summary>
            Returns true/false whether the Win32 control id is a child
            of this window
            </summary>
            <param name="controlId">The control id.</param>
            <returns>True/False whether the control exits</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Move(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Move this window to a new location
            </summary>
            <param name="newLocation">The new location to move the window to.</param>
            <param name="redraw">True/False whether to redraw the window.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Center">
            <summary>
            Get the center point of this window
            </summary>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Show">
            <summary>
            Show this window and make it visible
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Maximize">
            <summary>
            Maximize the window
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Minimize">
            <summary>
            Minimize the window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Restore">
            <summary>
            Restore the window to its default size/location
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Update">
            <summary>
            Update the window. Invalidates all areas and forces a redraw.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.WaitForVisibility(System.Boolean,System.Int32)">
            <summary>
            Waits for a certain visibility state for a window
            </summary>
            <param name="visibilityState">The visibility state of the window to wait for. True: wait until window is visible (The window
            needs to have its handle created before calling this method), False, wait until window is invisible.</param>
            <param name="timeout">The wait timeout in msecs.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.WaitForVisibility(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Waits for a certain visibility state for a window
            </summary>
            <param name="visibilityState">The visibility state of the window to wait for. True: wait until window is visible (The window
            needs to have its handle created before calling this method), False, wait until window is invisible.</param>
            <param name="timeout">The wait timeout in msecs.</param>
            <param name="suppressException">Whether to throw or return false if the window does not reach the desired visibility state.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.WaitForVisibility(System.Boolean,System.Int32,System.Boolean,ArtOfTest.Common.IDisposableWithState)">
            <summary>
            Internal only method which allows the wait clause to return when the manager is shutting down
            </summary>
            <param name="visibilityState"></param>
            <param name="timeout"></param>
            <param name="suppressException"></param>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetBitmap(System.Drawing.RectangleF)">
            <summary>
            Returns a bitmap of a specified target area within this window.
            </summary>
            <param name="targetArea">The target area to return the bitmap for.</param>
            <returns>The bitmap of that target area as it appears in the window.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetBitmap(System.Drawing.Size)">
            <summary>
            Capture the entire window bitmap and returns it.
            </summary>
            <returns>A bitmap of the window, otherwise will return null</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetHashCode">
            <summary>
            The hash code is the window's hwnd.
            </summary>
            <returns>The Window Handle of this window</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.SetFocus">
            <summary>
            Restores and Brings the window to the front, 
            assuming it is a visible application window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.SetActive">
            <summary>
            Set this window to active.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Close">
            <summary>
            Close the window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.Hide">
            <summary>
            Hide the window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.MakeRelative(System.Drawing.Rectangle)">
            <summary>
            Make the absolute rects passed in relative to this window.
            </summary>
            <param name="absoluteRects">The absolute rects</param>
            <returns>The relative coordinates to this window.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.MakeAbsolute(System.Drawing.Rectangle)">
            <summary>
            Return the absolute coordinate of the relative rectangle.
            </summary>
            <param name="windowRelativeRects">The relative rectangle with respect to this window.</param>
            <returns>The absolute</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.RefreshChildren">
            <summary>
            Refresh the list of child windows (Window.Children) of this window
            </summary>
            <returns>The WindowsCollection of children</returns>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.AllChildren">
            <summary>
            Gets a collection of all child windows (at any level) of 
            this window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.IsDialog">
            <summary>
            Gets whether this Window is a dialog
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Enabled">
            <summary>
            Gets whether this window is enabled or not.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Handle">
            <summary>
            Gets the handle of the window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.OwnerProcess">
            <summary>
            The owner process that created this window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.ParentWindow">
            <summary>
            Get parent window of this window. Returns null if there is no parent window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Caption">
            <summary>
            Gets the window's caption.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.ClassName">
            <summary>
            Gets the window's class name.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.IsMinimized">
            <summary>
            Gets whether the window is minimized.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.IsMaximized">
            <summary>
            Gets whether the window is maximized.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Exists">
            <summary>
            Gets whether the window handle represents a live native window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.IsVisible">
            <summary>
            Gets whether the window is visible.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.IsForegroundWindow">
            <summary>
            Gets whether the window is currently in use by the user.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Rectangle">
            <summary>
            Gets the rectangle of the window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Location">
            <summary>
            Gets the top left point of the location of the window relative to the screen.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.Window.Size">
            <summary>
            Gets the size of the window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.SetHwnd(ArtOfTest.Common.Win32.HWND)">
            <summary>
            Set the hwnd of this window.
            </summary>
            <param name="hwnd">The hwnd</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.WaitForStable(System.Int32,System.Int32)">
            <summary>
            Attempt to wait for a window's position and size to stabilize.  
            </summary>
            <param name="pollPeriod">How long to wait (ms) between checks</param>
            <param name="timeout">How long to wait (ms) total</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.AttachWrappedWindow">
            <summary>
            Attach to the wrapper window handle. This call is needed to allow 
            for events to fire on this window.
            </summary>
            <remarks>The window attached to must be in the same process as this window object for it to
            intercept its messages and fire its events</remarks>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.DetachWrappedWindow">
            <summary>
            Detach from the window handle.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.CheckVisibilityState(System.Object)">
            <summary>
            Thread to check on window's visibility.
            </summary>
            <param name="stateToCheck">The visibility state to check.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetRectangle">
            <summary>
            Get the rectangle of the native window.
            WARNING: Different results will be obtained based on whether or not this window is in the same process as the caller
            When calling from outside the process, the HWND bounds will be returned
            When calling from within the process, if the window is WPF, and the HwndSource.RootVisual is not visible, the bounds of the first visible control will be returned, else the window bounds
            </summary>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.GetWindowBitmap(System.Drawing.Size)">
            <summary>
            Return the raw bitmap of this window.
            </summary>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Window.InitializeWrappedWindow(ArtOfTest.Common.Win32.GenericWindow)">
            <summary>
            Hook into the underlying window
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowCollection">
            <summary>
            A Window object collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.#ctor">
            <summary>
            Constructs a new EnumWindowsCollection object.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.Add(System.IntPtr)">
            <summary>
            Add a new Window to the collection. 
            </summary>
            <param name="hwnd">Window handle to add.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.Add(ArtOfTest.Common.Win32.Window)">
            <summary>
            Add a window object.
            </summary>
            <param name="window">The window to add.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.Add(ArtOfTest.Common.Win32.WindowCollection)">
            <summary>
            Add a collection of windows
            </summary>
            <param name="windows">The collection to add.</param>
        </member>
        <member name="P:ArtOfTest.Common.Win32.WindowCollection.Item(System.Int32)">
            <summary>
            Gets the Window at the specified index.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowCollection.GetList">
            <summary>
            Return a copy of this collection.
            </summary>
            <returns>The copied list</returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowEventArgs">
            <summary>
            windowWatcher events arg
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.WindowEventArgs.Window">
            <summary>
            Get the Window
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowEventArgs.#ctor(ArtOfTest.Common.Win32.Window,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="window">Window</param>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowManager">
            <summary>
            Provides basic Win32 window management services like searching ...etc.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WindowManager._items">
            <summary>
            The collection of windows that fills GetWindows()
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WindowManager._visibleWindowsOnly">
            <summary>
            Find visible windows only.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.#ctor">
            <summary>
            Create a new window manager
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.WindowManager.Items">
            <summary>
            Returns the collection of windows populated by a call to GetWindows()
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.WindowManager.VisibleWindowsOnly">
            <summary>
            Gets or sets whether to filter window to visible windows only.
            Default is false.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.GetWindows">
            <summary>
            Populate the Items collection with all top level windows.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.GetWindows(System.IntPtr)">
            <summary>
            Populate the Items collection with all child windows of the parent window passed in (Recursive)
            </summary>
            <param name="parentHwnd">The parent window.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.GetWindows(System.Diagnostics.Process)">
            <summary>
            Populate the Items collection with all non-child windows associated with this process.
            </summary>
            <param name="process">The process</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.GetAllWindows(System.Diagnostics.Process)">
            <summary>
            Populate the Items collection with all windows associated with this process including
            child windows of each.
            </summary>
            <param name="process">The process</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.AppendWindows(System.IntPtr)">
            <summary>
            Append all child windows of the passed in parentHwnd to the current collection. (Items)
            </summary>
            <param name="parentHwnd">The window to append children of.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.WindowThreadEnum(System.IntPtr,System.IntPtr)">
            <summary>
            EnumThreadWindow call back.
            </summary>
            <param name="window">The windows</param>
            <param name="lParam">NotUsed</param>
            <returns>Always True</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.WindowEnum(System.IntPtr,System.Int32)">
            <summary>
            Windows enum call back.
            </summary>
            <param name="window">Window Handle</param>
            <param name="lParam">Application defined value</param>
            <returns>1 to continue enumeration, 0 to stop</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.FindWindowsRecursively(System.IntPtr,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Finds all windows of a given class under the parent window.
            </summary>
            <param name="parentHwnd">The parent window to search under.  If Zero, will search all desktop windows.</param>
            <param name="classNames">A list of class names to search for (case-insensitive)</param>
            <param name="delaySearchPeriod">
            The number of milliseconds to delay the start of the search to allow the window
            we are searching for to be constructed.</param>
            <returns>A list of all windows of the specified class under the parent window</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.FindWindowRecursively(System.IntPtr,System.String,System.Int32)">
            <summary>
            Find a window recusively under the parent window. 
            Will return the first window that matches the class name.
            </summary>
            <param name="parentHwnd">The parent window to search under. If Zero, will search all desktop windows.</param>
            <param name="className">The class name to search for. (case-insensitive)</param>
            <param name="delaySearchPeriod">The number of milli-seconds to delay the start of the search to allow
            the window we are searching for to be constructed. (if 0, no delay will occur)</param>
            <returns>The window that matches, otherwise null.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.FindWindowRecursively(System.IntPtr,System.String,System.Boolean,System.Int32)">
            <summary>
            Find a window recursively using its caption.
            </summary>
            <param name="parentHwnd">The parent window to search under. If Zero, will search all deskop windows.</param>
            <param name="caption">The caption to find.</param>
            <param name="partialCaption">Use partial caption matching or exact. (In both cases the
            matching is case-insensitive).</param>
            <param name="delaySearchPeriod">The number of milli-seconds to delay the start of the search to allow
            the window we are searching for to be constructed. (if 0, no delay will occur)</param>
            <returns>The found window or null;</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.FindWindowRecursively(System.IntPtr,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Find a window recursively using its caption.
            </summary>
            <param name="parentHwnd">The parent window to search under. If Zero, will search all deskop windows.</param>
            <param name="caption">The caption to find.</param>
            <param name="partialCaption">Use partial caption matching or exact. (In both cases the
            matching is case-insensitive).</param>
            <param name="delaySearchPeriod">The number of milli-seconds to delay the start of the search to allow
            the window we are searching for to be constructed. (if 0, no delay will occur)</param>
            <param name="maxDepth">The maximum depth level at which we will try to get the proper window.</param>
            <returns>The found window or null;</returns>        
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.TileWindows(ArtOfTest.Common.Win32.Window,ArtOfTest.Common.Win32.Window,ArtOfTest.Common.Win32.TileWindowsOption,System.Drawing.Size)">
            <summary>
            Tiles two windows
            </summary>
            <param name="window1">The first window</param>
            <param name="window2">The second window</param>
            <param name="option">Tiling option</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.GetActiveScreen">
            <summary>
            Returns the active screen the user is using.
            </summary>
            <returns>The active screen the user is using</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.CenterSize(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Calculate the correct point (x,y) for a specific size to be centered within a specific rectangle.
            </summary>
            <param name="sizeToCenter">The size to center</param>
            <param name="areaToCenterIn">The target location to center</param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowManager.RecommendSize(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Recommend the actual size of the window to use. 
            </summary>
            <param name="desiredSize"></param>
            <param name="minSize"></param>
            <returns></returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowsMessageUtils">
            <summary>
             This class contains utility methods that are helpful when dealing with Windows messages.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowsMessageUtils.GetXLParam(System.IntPtr)">
            <summary>
            Gets the X coordinate from an lParam value as passed with the WM_LBUTTONDOWN, etc. messages (the low word of the lParam)
            </summary>
            <param name="lParam">The lParam value from the message</param>
            <returns>An integer constructed from the low 16 bits of the lParam</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowsMessageUtils.GetYLParam(System.IntPtr)">
            <summary>
            Gets the Y coordinate from an lParam value as passed with the WM_LBUTTONDOWN, etc. messages (the high word of the lParam)
            </summary>
            <param name="lParam">The lParam value from the message</param>
            <returns>An integer constructed from the high 16 bits of the lParam</returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WindowWatcher">
            <summary>
            Class to monitor window creation async.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WindowWatcher.WindowCreated">
            <summary>
            Occurs when a new window is created event.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WindowWatcher.WindowDestroyed">
            <summary>
            Occurs when an existing window is destroyed.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WindowWatcher.WindowMovedSized">
            <summary>
            When window moves or resizes
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WindowWatcher._windowsWatcherHook">
            <summary>
            Reusable window manager object.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WindowWatcher._threadId">
            <summary>
            The thread id of the window to watch
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WindowWatcher._isWatching">
            <summary>
            Whether the watcher is active
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.#ctor">
            <summary>
            Create a new windows watcher
            </summary>
            <param name="pollInterval">The polling interval for the watcher</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.#ctor(ArtOfTest.Common.Win32.Window)">
            <summary>
            Initialize the watcher against a specific window
            </summary>
            <param name="window">The window to monitor</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.StartWatch(ArtOfTest.Common.Win32.Window)">
            <summary>
            Start watching a window
            </summary>
            <param name="window">The window to watch</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.EndWatch">
            <summary>
            End window watching.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.OnWindowCreated(ArtOfTest.Common.Win32.Window)">
            <summary>
            Invoke the window created event.
            </summary>
            <param name="window">The created window.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.OnWindowDestroyed(ArtOfTest.Common.Win32.Window)">
            <summary>
            Invoke the window destroyed event.
            </summary>
            <param name="window">The destroyed winsow</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WindowWatcher.OnWindowMovedSize(ArtOfTest.Common.Win32.Window)">
            <summary>
            Invoke the window moved/sized event
            </summary>
            <param name="window">The window that moved/sizes</param>
        </member>
        <member name="T:ArtOfTest.Common.Win32.WinEventHook">
            <summary>
            Global windows hook used to track windows movement.
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.WindowLocationChanged">
            <summary>
            Window LocationChanged event
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.DialogCreated">
            <summary>
            Dialog created event
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.ForegroundWindowChanged">
            <summary>
            Foreground window changed event
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.WindowCreated">
            <summary>
            Window created event
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.WindowClosed">
            <summary>
            Window closed event
            </summary>
        </member>
        <member name="E:ArtOfTest.Common.Win32.WinEventHook.SystemCaptureEnd">
            <summary>
            Occurs when [system capture end].
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WinEventHook._win">
            <summary>
            The window we are attached to
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.WinEventHook._hookHandle">
            <summary>
            The hook handle
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WinEventHook.#ctor(ArtOfTest.Common.Win32.Window,ArtOfTest.Common.Win32.NativeMethods.AccessibleEvents,ArtOfTest.Common.Win32.NativeMethods.AccessibleEvents,System.Int32,ArtOfTest.Common.Win32.NativeMethods.SetWinEventHookParameter)">
            <summary>
            Create the win event hook
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WinEventHook.Dispose">
            <summary>
            Dispose of the hook.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.WinEventHook.WinEventCallback(System.IntPtr,ArtOfTest.Common.Win32.NativeMethods.AccessibleEvents,System.IntPtr,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            The call back
            </summary>
            <param name="hWinEventHook"></param>
            <param name="accEvent"></param>
            <param name="hwnd"></param>
            <param name="idObject"></param>
            <param name="idChild"></param>
            <param name="dwEventThread"></param>
            <param name="dwmsEventTime"></param>
        </member>
        <member name="T:ArtOfTest.Common.Win32.AdornerWindow">
            <summary>
            An adorner window that can host WPF UI on top of any window.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.AdornerWindow.#ctor(System.String,ArtOfTest.Common.Win32.Window,System.Boolean,System.Boolean)">
            <summary>
            Create an adorner window
            </summary>
            <param name="name">The name of the window to use.</param>
            <param name="windowToAdorn">The window to adorn.</param>
            <param name="autoSync">If set, the adorner will follow the window in size/location and will auto-close when window is closed.</param>
            <param name="hitTestVisible">If set, the adorner will accept user input, else will be transparent to user interactions</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.AdornerWindow.CreateSourceParameters(System.String,System.Boolean)">
            <summary>
            Create the HwndSourceParameters object.
            </summary>
            <param name="name"></param>
            <param name="hitTestVisible"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.AdornerWindow.CreateHwndSource(System.Windows.Interop.HwndSourceParameters,System.Boolean)">
            <summary>
            Create the window
            </summary>
            <param name="cparams"></param>
            <param name="autoSync"></param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.AdornerWindow.SyncLocation">
            <summary>
            Sync the location of adorner to the location of the adorned window. 
            If (autoSync) was set, then this will automatically is called.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.AdornerWindow.PerformAction(System.Action)">
            <summary>
            Performs a certain action on the adorner using the Dispatcher
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:ArtOfTest.Common.Win32.AdornerWindow.Dispatcher">
            <summary>
            The UI dispatcher to use to iteract with the Framework element
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.Connector.ConnectorEntryPoint">
            <summary>
            Used internally to determine which instance of rundll32 to start, and what parameters to pass to it
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Connector.InjectCode(System.IntPtr,System.String,System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            After installing our Connector into a process, we can start up code inside it using this function
            </summary>
            <param name="handle">The hwnd of window with a thread running our hook</param>
            <param name="assemblyAndClass">The fully qualified assembly path and class name to start, separated by a ?</param>
            <param name="pipename">The communication pipename</param>
            <param name="pid">The host pid</param>
            <param name="waitForDocument">Whether to wait for a document object when connecting to the window. This should be false for non-browser windows.</param>
            <param name="waitForDocumentTimeout">The time in milliseconds if waiting is on.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Connector.Attach(System.IntPtr@,System.Boolean,System.Int32)">
            <summary>
            Take control over a window. Start up the CLR if necessary. A necessary step before automation or recording can take place.
            </summary>
            <param name="handle">The window handle</param>
            <param name="findTabWindow">For IE instances, whether or not to look for the TabWindowClass. If not IE, disregard</param>
            <returns>Returns true if rundll32 has exited properly</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Connector.Attach(System.IntPtr@,System.Int32)">
            <summary>
            Take control over a window. Start up the CLR if necessary. A necessary step before automation or recording can take place.
            </summary>
            <param name="handle">The window handle</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.Connector.Start(ArtOfTest.Common.Win32.Connector.ConnectorEntryPoint,System.IntPtr)">
            <summary>
            Launch the appropriate copy of rundll32 with a given entrypoint and window handle to operate on
            </summary>
            <param name="entryPoint">The entrypoint to load. This determines the bitness of rundll32 as well</param>
            <param name="windowHandle">The window to pass to the entrypoint</param>
            <returns>Returns true if rundll32 has exited properly</returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.HWND">
            <summary>
            Drop-in P/Invoke replacement for IntPtr window handle.
            Includes implicit typecasts for IntPtr, System.Windows.Window, and System.Windows.Forms.Control.
            This class performs no caching; all property accesses translate to immediate Win32 function calls,
            and failed calls will throw exceptions (unlike the P/Invoke entry points themselves).
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.HWND.HINSTANCE">
            <summary>
            This is useful because some frameworks store their DLL instance handle here, allowing you to loosely identify the framework that is managing the window.
            </summary>
        </member>
        <member name="P:ArtOfTest.Common.Win32.HWND.WindowRect">
            <summary>
            Gets or sets the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the screen origin.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods">
            <summary>
            All PInvokes
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.EnumWindowsProc">
            <summary>
            Win32 Delegate
            </summary>
            <param name="hwnd">hwnd</param>
            <param name="lParam">lparam</param>
            <returns>int</returns>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window
            when performing navigation operations such as handling the TAB key, an arrow key, or a
            keyboard mnemonic.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WS_EX_TOPMOST">
            <summary>
            The window should be placed above all non-topmost windows and should stay above them,
            even when the window is deactivated. To add or remove this style, use the SetWindowPos
            function.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_STOP">
            <summary>
            Stop flashing. The system restores the window to its original state.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_CAPTION">
            <summary>
            Flash the window caption. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_TRAY">
            <summary>
            Flash the taskbar button.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_ALL">
            <summary>
            Flash both the window caption and taskbar button.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_TIMER">
            <summary>
            Flash continuously, until the FLASHW_STOP flag is set.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.FLASHW_TIMERNOFG">
            <summary>
            Flash continuously until the window comes to the foreground. 
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.RECT">
            <summary>
            Win32 structure for a RECT
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.CWPSTRUCT">
            <summary>
            The CWPSTRUCT structure defines the message parameters passed to a WH_CALLWNDPROC hook procedure, CallWndProc.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.CWPRETSTRUCT">
            <summary>
            The CWPRETSTRUCT structure defines the message parameters passed to a WH_CALLWNDPROCRET hook procedure, CallWndRetProc.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_TERMINATE">
            <summary>Enables usage of the process handle in the TerminateProcess function to terminate the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_CREATE_THREAD">
            <summary>Enables usage of the process handle in the CreateRemoteThread function to create a thread in the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_VM_OPERATION">
            <summary>Enables usage of the process handle in the VirtualProtectEx and WriteProcessMemory functions to modify the virtual memory of the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_VM_READ">
            <summary>Enables usage of the process handle in the ReadProcessMemory function to read from the virtual memory of the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_VM_WRITE">
            <summary>Enables usage of the process handle in the WriteProcessMemory function to write to the virtual memory of the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_DUP_HANDLE">
            <summary>Enables usage of the process handle as either the source or target process in the DuplicateHandle function to duplicate a handle.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_SET_INFORMATION">
            <summary>Enables usage of the process handle in the SetPriorityClass function to set the priority class of the process.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.PROCESS_QUERY_INFORMATION">
            <summary>Enables usage of the process handle in the GetExitCodeProcess and GetPriorityClass functions to read information from the process object.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.DELETE">
            <summary>Required to delete the object.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.READ_CONTROL">
            <summary>Required to read information in the security descriptor for the object, not including the information in the SACL. To read or write the SACL, you must request the ACCESS_SYSTEM_SECURITY access right. For more information, see SACL Access Right.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.SYNCHRONIZE">
            <summary>Not supported for desktop objects.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.WRITE_DAC">
            <summary>Required to modify the DACL in the security descriptor for the object.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ProcessAccessRights.WRITE_OWNER">
            <summary>Required to change the owner in the security descriptor for the object.</summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.WindowsMessages">
            <summary>
            Win32 Messages.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.WindowStyleFlags.WC_THICKFRAME">
            <summary>The window has a sizing border. Same as the WS_SIZEBOX style.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.ExtendedWindowStyleFlags.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.KeyFlags">
            <summary>
            Key flags
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.GetAncestorCode.GA_PARENT">
            <summary>Retrieves the parent window. This does not include the owner, as it does with the GetParent function.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.GetAncestorCode.GA_ROOT">
            <summary>Retrieves the root window by walking the chain of parent windows.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.GetAncestorCode.GA_ROOTOWNER">
            <summary>Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.StandardAccessRights.DELETE">
            <summary>Required to delete the object.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.StandardAccessRights.READ_CONTROL">
            <summary>Required to read information in the security descriptor for the object, not including the information in the SACL. To read or write the SACL, you must request the ACCESS_SYSTEM_SECURITY access right. For more information, see SACL Access Right.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.StandardAccessRights.SYNCHRONIZE">
            <summary>Not supported for desktop objects.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.StandardAccessRights.WRITE_DAC">
            <summary>Required to modify the DACL in the security descriptor for the object.</summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.NativeMethods.StandardAccessRights.WRITE_OWNER">
            <summary>Required to change the owner in the security descriptor for the object.</summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.User32">
            <summary>
            User32 PInvokes
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.LoadString(System.IntPtr,System.UInt32,System.IntPtr@,System.Int32)">
            <summary>
            This permits a special usage of LoadString where a direct read-only pointer to
            the memory-mapped resource string is returned in the buffer, if the buffer length is given as zero.
            This is actually the preferred usage because it doesn't require the caller to make guesses as to how large the preallocated buffer should be.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.LoadString(System.IntPtr,System.UInt32)">
            <summary>
            Safe wrapper for the LoadString Win32 function.
            </summary>
            <returns>null if the resource does not exist</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetWindowText(ArtOfTest.Common.Win32.HWND)">
            <summary>
            Safe wrapper for the Win32 GetWindowText function.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetClassName(System.IntPtr,System.Int32)">
            <summary>
            Safe wrapper for the GetClassName Win32 function.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetWindowLongPtr(ArtOfTest.Common.Win32.HWND,System.Int32)">
            <summary>
            Do NOT call this on 32-bit systems. The CLR won't search for the entry point until the first call.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.EnumChildWindows(ArtOfTest.Common.Win32.HWND)">
            <summary>
            Convenient wrapper for EnumChildWindows Win32 function.
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.ToAscii(System.Int32,System.Int32,System.Byte[],System.UInt32@,System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.ToUnicodeEx(System.UInt32,System.UInt32,System.Byte[],System.Text.StringBuilder,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.
            </summary>
            <param name="wVirtKey">The virtual-key code to be translated.</param>
            <param name="wScanCode">The hardware scan code of the key to be translated.The high-order bit of this value is set if the key is up.</param>
            <param name="lpKeyState">The buffer that receives the translated Unicode character or characters. However, this buffer may be returned without being null-terminated even though the variable name suggests that it is null-terminated.</param>
            <param name="pwszBuff">The size, in characters, of the buffer pointed to by the pwszBuff parameter.</param>
            <param name="cchBuff">The size, in characters, of the buffer pointed to by the pwszBuff parameter.</param>
            <param name="wFlags">The behavior of the function. If bit 0 is set, a menu is active. Bits 1 through 31 are reserved.</param>
            <param name="dwhkl">The input locale identifier used to translate the specified code.</param>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetKeyboardLayout(System.UInt32)">
            <summary>
            Retrieves the active input locale identifier (formerly called the keyboard layout) for the specified thread. If the idThread parameter is zero, the input locale identifier for the active thread is returned.
            </summary>
            <param name="idThread">The identifier of the thread to query, or 0 for the current thread.</param>
            <returns>The input locale identifier for the thread.</returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.User32.GetKeyState(System.Int32)">
             <summary>
             The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled 
             (on, off—alternating each time the key is pressed). 
             </summary>
             <param name="vKey">
             [in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. 
             </param>
             <returns>
             The return value specifies the status of the specified virtual key, as follows: 
            If the high-order bit is 1, the key is down; otherwise, it is up.
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.
             </returns>
             <remarks>http://msdn.microsoft.com/en-us/library/ms646301.aspx</remarks>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.Gdi32">
            <summary>
            Gdi32 PInvokes
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.Kernel32">
            <summary>
            Kernel32 PInvokes
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.Kernel32.GetLastError">
            <summary>
            Gets the Win32 error code from the last marshaled Win32Invoke call.
            Does not actually call KERNEL32.GetLastError().
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.Kernel32.WaitForSingleObject(System.IntPtr,System.UInt32)">
            <summary>
            This function should never be used in general situations because it does not have the internal handling that .NET includes in WaitOne(), etc.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.NativeMethods.SystemWindowClasses">
            <summary>
            System-registered Window class names
            http://msdn.microsoft.com/en-us/library/ms633574(VS.85).aspx#system
            </summary>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.CoInternetSetFeatureEnabled(ArtOfTest.Common.Win32.INTERNETFEATURELIST,System.Int32,System.Boolean)">
            <summary>
            Url Mon
            </summary>
            <param name="FeatureEntry"></param>
            <param name="dwFlags"></param>
            <param name="fEnable"></param>
            <returns></returns>
        </member>
        <member name="M:ArtOfTest.Common.Win32.NativeMethods.ReadPrivateProfileString(System.String,System.String,System.String)">
            <summary>
            Read value from the ini file.
            </summary>
            <param name="path">The ini file path.</param>
            <param name="section">Value section.</param>
            <param name="key">Value key.</param>
            <returns>String representaion of the value.</returns>
        </member>
        <member name="T:ArtOfTest.Common.Win32.KeyboardHookStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardHookStruct.VirtualKeyCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardHookStruct.ScanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardHookStruct.Flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.KeyboardHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.Win32.MouseLLHookStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.MouseLLHookStruct.Point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.MouseLLHookStruct.MouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, MouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.MouseLLHookStruct.Flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse Flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.MouseLLHookStruct.Time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.Win32.MouseLLHookStruct.ExtraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.OffsetReference">
            <summary>
            Offset references used to adjust the target point (X,Y) of an action.
            </summary>
            <example>
            <code>
            Given a Rectangle target, the reference points are as follows:
            
            
            TopLeft             TopCenter       TopRight
                       X***********X***********X
                       *                       *
                       *                       *
            LeftCenter X           X           X RightCenter
                       *     AbsoluteCenter    *
                       *                       *
                       X***********X***********X 
            BottomLeft         BottomCenter      BottomRight
            </code>
            </example>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.TopLeftCorner">
            <summary>
            The reference is the top left corner of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.BottomLeftCorner">
            <summary>
            The reference is the bottom left corner of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.TopRightCorner">
            <summary>
            The reference is the top right corner of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.BottomRightCorner">
            <summary>
            The reference is the bottom right corner of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.TopCenter">
            <summary>
            The reference is the center point of the top edge of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.RightCenter">
            <summary>
            The reference is the center point of the right edge of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.LeftCenter">
            <summary>
            The reference is the center point of the left edge of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.BottomCenter">
            <summary>
            The reference is the center point of the bottom edge of the target.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.OffsetReference.AbsoluteCenter">
            <summary>
            The reference is the absolute center of the target.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.ActionPointUnitType">
            <summary>
            The action point unit type.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ActionPointUnitType.Pixel">
            <summary>
            The x/y distance from the offset reference is in absolute pixels.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.ActionPointUnitType.Percentage">
            <summary>
            The x/y distance from the offset reference is in percentage.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.StringCompareType">
            <summary>
            String compare type (Contains, exact ...etc.)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.Exact">
            <summary>
            Exact comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.Same">
            <summary>
            Same string. Similar to exact but is not case-sensitive.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.Contains">
            <summary>
            Contains comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.NotContain">
            <summary>
            Does not contain comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.StartsWith">
            <summary>
            Starts with comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.EndsWith">
            <summary>
            Ends with comparison
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.StringCompareType.RegEx">
            <summary>
            Regex comparison
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.NumberCompareType">
            <summary>
            Numerical compare type (Equals, less than..etc)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.Equals">
            <summary>
            Tests the numbers to be equal.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.LessThan">
            <summary>
            Tests operand 1 to be less than operand 2.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.GreaterThan">
            <summary>
            Tests operand 1 to be greater than operand 2.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.LessThanOrEqual">
            <summary>
            Tests operand 1 to be less than or equal to operand 2.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.GreaterThanOrEqual">
            <summary>
            Tests operand 1 to be greater than or equal to operand 2.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberCompareType.NotEqual">
            <summary>
            Tests operand 1 is not equal to operand 2.
            </summary>
        </member>
        <member name="T:ArtOfTest.Common.NumberRangeCompareType">
            <summary>
            Numerical range compare type (InRange, outsiderange)
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberRangeCompareType.InRange">
            <summary>
            Tests that the number is inside the specified range.
            </summary>
        </member>
        <member name="F:ArtOfTest.Common.NumberRangeCompareType.OutsideRange">
            <summary>
            Tests that the number is outside the specified range.
            </summary>
        </member>
    </members>
</doc>
